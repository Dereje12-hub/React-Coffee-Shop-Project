{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._resetWarnings = exports.warnEnvironmentDeprecation = exports.validateEnvironment = void 0;\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar getConfig_1 = __importDefault(require(\"./getConfig\"));\n\nvar paths_1 = require(\"./paths\");\n\nfunction validateEnvironment(env) {\n  if (typeof env.projectRoot !== 'string') {\n    throw new Error(\"@expo/webpack-config requires a valid projectRoot string value which points to the root of your project\");\n  }\n\n  warnEnvironmentDeprecation(env, true);\n  var validModes = ['development', 'production', 'none'];\n\n  if (!env.mode || !validModes.includes(env.mode)) {\n    throw new Error(\"@expo/webpack-config requires a valid `mode` string which should be one of: \" + validModes.join(', '));\n  }\n\n  if (typeof env.platform === 'undefined') {\n    env.platform = 'web';\n  }\n\n  if (typeof env.https === 'undefined') {\n    env.https = false;\n  }\n\n  if (!env.locations) {\n    env.locations = paths_1.getPaths(env.projectRoot, env);\n  }\n\n  if (!env.config) {\n    env.config = getConfig_1.default(env);\n  }\n\n  return env;\n}\n\nexports.validateEnvironment = validateEnvironment;\nvar warned = {};\n\nfunction shouldWarnDeprecated(config, key, warnOnce) {\n  return (!warnOnce || !(key in warned)) && typeof config[key] !== 'undefined';\n}\n\nfunction warnEnvironmentDeprecation(env) {\n  var warnOnce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var warnings = {\n    production: 'Please use `mode: \"production\"` instead.',\n    development: 'Please use `mode: \"development\"` instead.',\n    polyfill: 'Please include polyfills manually in your project.'\n  };\n\n  for (var _i = 0, _Object$keys = Object.keys(warnings); _i < _Object$keys.length; _i++) {\n    var warning = _Object$keys[_i];\n\n    if (shouldWarnDeprecated(env, warning, warnOnce)) {\n      warned[warning] = true;\n      console.warn(chalk_1.default.bgYellow.black((\"The environment property `\" + warning + \"` is deprecated. \" + warnings[warning]).trim()));\n    }\n  }\n}\n\nexports.warnEnvironmentDeprecation = warnEnvironmentDeprecation;\n\nfunction _resetWarnings() {\n  warned = {};\n}\n\nexports._resetWarnings = _resetWarnings;","map":{"version":3,"sources":["../../src/env/validate.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,eAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,WAAA;;AAQA,SAAgB,mBAAhB,CAAoC,GAApC,EAAyD;AACvD,MAAI,OAAO,GAAG,CAAC,WAAX,KAA2B,QAA/B,EAAyC;AACvC,UAAM,IAAI,KAAJ,2GAAN;AAGD;;AACD,EAAA,0BAA0B,CAAC,GAAD,EAAM,IAAN,CAA1B;AAEA,MAAM,UAAU,GAAG,CAAC,aAAD,EAAgB,YAAhB,EAA8B,MAA9B,CAAnB;;AACA,MAAI,CAAC,GAAG,CAAC,IAAL,IAAa,CAAC,UAAU,CAAC,QAAX,CAAoB,GAAG,CAAC,IAAxB,CAAlB,EAAiD;AAC/C,UAAM,IAAI,KAAJ,kFAC6E,UAAU,CAAC,IAAX,CAC/E,IAD+E,CAD7E,CAAN;AAKD;;AAGD,MAAI,OAAO,GAAG,CAAC,QAAX,KAAwB,WAA5B,EAAyC;AACvC,IAAA,GAAG,CAAC,QAAJ,GAAe,KAAf;AACD;;AAED,MAAI,OAAO,GAAG,CAAC,KAAX,KAAqB,WAAzB,EAAsC;AACpC,IAAA,GAAG,CAAC,KAAJ,GAAY,KAAZ;AACD;;AAGD,MAAI,CAAC,GAAG,CAAC,SAAT,EAAoB;AAClB,IAAA,GAAG,CAAC,SAAJ,GAAgB,OAAA,CAAA,QAAA,CAAS,GAAG,CAAC,WAAb,EAA0B,GAA1B,CAAhB;AACD;;AAGD,MAAI,CAAC,GAAG,CAAC,MAAT,EAAiB;AACf,IAAA,GAAG,CAAC,MAAJ,GAAa,WAAA,CAAA,OAAA,CAAU,GAAV,CAAb;AACD;;AAED,SAAO,GAAP;AACD;;AArCD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAuCA,IAAI,MAAM,GAA+B,EAAzC;;AAEA,SAAS,oBAAT,CACE,MADF,EAEE,GAFF,EAGE,QAHF,EAGmB;AAEjB,SAAO,CAAC,CAAC,QAAD,IAAa,EAAE,GAAG,IAAI,MAAT,CAAd,KAAmC,OAAO,MAAM,CAAC,GAAD,CAAb,KAAuB,WAAjE;AACD;;AASD,SAAgB,0BAAhB,CAA2C,GAA3C,EAA2F;AAAA,MAAzB,QAAyB,uEAAL,KAAK;AACzF,MAAM,QAAQ,GAA8B;AAC1C,IAAA,UAAU,EAAE,0CAD8B;AAE1C,IAAA,WAAW,EAAE,2CAF6B;AAG1C,IAAA,QAAQ,EAAE;AAHgC,GAA5C;;AAMA,kCAAsB,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAtB,kCAA6C;AAAxC,QAAM,OAAO,mBAAb;;AACH,QAAI,oBAAoB,CAAC,GAAD,EAAM,OAAN,EAAe,QAAf,CAAxB,EAAkD;AAChD,MAAA,MAAM,CAAC,OAAD,CAAN,GAAkB,IAAlB;AACA,MAAA,OAAO,CAAC,IAAR,CACE,OAAA,CAAA,OAAA,CAAM,QAAN,CAAe,KAAf,CACE,gCAA8B,OAA9B,yBAA0D,QAAQ,CAAC,OAAD,CAAlE,EAA8E,IAA9E,EADF,CADF;AAKD;AACF;AACF;;AAjBD,OAAA,CAAA,0BAAA,GAAA,0BAAA;;AAwBA,SAAgB,cAAhB,GAA8B;AAC5B,EAAA,MAAM,GAAG,EAAT;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import chalk from 'chalk';\n\nimport { Environment, InputEnvironment } from '../types';\nimport getConfig from './getConfig';\nimport { getPaths } from './paths';\n\n/**\n * Validate the environment options and apply default values.\n *\n * @param env\n * @category env\n */\nexport function validateEnvironment(env: InputEnvironment): Environment {\n  if (typeof env.projectRoot !== 'string') {\n    throw new Error(\n      `@expo/webpack-config requires a valid projectRoot string value which points to the root of your project`\n    );\n  }\n  warnEnvironmentDeprecation(env, true);\n\n  const validModes = ['development', 'production', 'none'];\n  if (!env.mode || !validModes.includes(env.mode)) {\n    throw new Error(\n      `@expo/webpack-config requires a valid \\`mode\\` string which should be one of: ${validModes.join(\n        ', '\n      )}`\n    );\n  }\n\n  // Default to web. Allow any arbitrary platform.\n  if (typeof env.platform === 'undefined') {\n    env.platform = 'web';\n  }\n  // No https by default since it doesn't work well across different browsers and devices.\n  if (typeof env.https === 'undefined') {\n    env.https = false;\n  }\n\n  // Ensure the locations are defined.\n  if (!env.locations) {\n    env.locations = getPaths(env.projectRoot, env);\n  }\n\n  // Ensure the config is evaluated.\n  if (!env.config) {\n    env.config = getConfig(env as Environment);\n  }\n\n  return env as Environment;\n}\n\nlet warned: { [key: string]: boolean } = {};\n\nfunction shouldWarnDeprecated(\n  config: { [key: string]: any },\n  key: string,\n  warnOnce: boolean\n): boolean {\n  return (!warnOnce || !(key in warned)) && typeof config[key] !== 'undefined';\n}\n\n/**\n *\n * @param env\n * @param warnOnce\n * @category env\n * @internal\n */\nexport function warnEnvironmentDeprecation(env: InputEnvironment, warnOnce: boolean = false) {\n  const warnings: { [key: string]: string } = {\n    production: 'Please use `mode: \"production\"` instead.',\n    development: 'Please use `mode: \"development\"` instead.',\n    polyfill: 'Please include polyfills manually in your project.',\n  };\n\n  for (const warning of Object.keys(warnings)) {\n    if (shouldWarnDeprecated(env, warning, warnOnce)) {\n      warned[warning] = true;\n      console.warn(\n        chalk.bgYellow.black(\n          `The environment property \\`${warning}\\` is deprecated. ${warnings[warning]}`.trim()\n        )\n      );\n    }\n  }\n}\n\n/**\n * Used for testing\n * @category env\n * @internal\n */\nexport function _resetWarnings() {\n  warned = {};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}