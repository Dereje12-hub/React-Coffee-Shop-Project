{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.raw = void 0;\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nvar image_size_1 = require(\"image-size\");\n\nvar loader_utils_1 = __importDefault(require(\"loader-utils\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar schema_utils_1 = require(\"schema-utils\");\n\nvar util_1 = require(\"util\");\n\nvar escapeStringRegexp_1 = require(\"../../utils/escapeStringRegexp\");\n\nvar NativeAssetResolver_1 = require(\"./NativeAssetResolver\");\n\nfunction getOptions(loaderContext) {\n  var options = loader_utils_1.default.getOptions(loaderContext) || {};\n  schema_utils_1.validate({\n    type: 'object',\n    required: ['platforms', 'assetExtensions'],\n    properties: {\n      platforms: {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      },\n      assetExtensions: {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      },\n      persist: {\n        type: 'boolean'\n      },\n      publicPath: {\n        type: 'string'\n      }\n    }\n  }, options, {\n    name: 'nativeAssetsLoader'\n  });\n  return options;\n}\n\nexports.raw = true;\n\nfunction getAndroidResourceFolder(_ref) {\n  var name = _ref.name,\n      contents = _ref.contents,\n      scale = _ref.scale,\n      scaleFilePath = _ref.scaleFilePath;\n  var testXml = /\\.(xml)$/;\n  var testImages = /\\.(png|jpg|gif|webp)$/;\n  var testFonts = /\\.(ttf|otf|ttc)$/;\n\n  if (testXml.test(name) && (contents === null || contents === void 0 ? void 0 : contents.includes('font-family')) || testFonts.test(name)) {\n    return 'font';\n  } else if (testImages.test(name) || testXml.test(name)) {\n    switch (scale) {\n      case '@0.75x':\n        return 'drawable-ldpi';\n\n      case '@1x':\n        return 'drawable-mdpi';\n\n      case '@1.5x':\n        return 'drawable-hdpi';\n\n      case '@2x':\n        return 'drawable-xhdpi';\n\n      case '@3x':\n        return 'drawable-xxhdpi';\n\n      case '@4x':\n        return 'drawable-xxxhdpi';\n\n      default:\n        throw new Error(\"Unknown scale \" + scale + \" for \" + scaleFilePath);\n    }\n  }\n\n  return 'raw';\n}\n\nfunction nativeAssetsLoader() {\n  var _this = this;\n\n  var callback, logger, rootContext, options, pathSeparatorPattern, resourcePath, dirname, relativeDirname, type, assetsPath, suffix, filename, normalizedName, files, scales, scaleKeys, readFileAsync, resolveAssetOutput, resolveScaleAsync, assets, publicPath, hashes, info, match, scale;\n  return _regeneratorRuntime.async(function nativeAssetsLoader$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          this.cacheable();\n          callback = this.async();\n          logger = this.getLogger('nativeAssetsLoader');\n          rootContext = this.rootContext;\n          logger.debug('Processing:', this.resourcePath);\n          _context2.prev = 5;\n          options = getOptions(this);\n          pathSeparatorPattern = new RegExp(\"\\\\\" + path_1.default.sep, 'g');\n          resourcePath = this.resourcePath;\n          dirname = path_1.default.dirname(resourcePath);\n          relativeDirname = path_1.default.relative(rootContext, dirname).replace(new RegExp(\"^[\\\\.\\\\\" + path_1.default.sep + \"]+\"), '');\n          type = path_1.default.extname(resourcePath).replace(/^\\./, '');\n          assetsPath = 'assets';\n          suffix = \"(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(\" + options.platforms.join('|') + \"))?\\\\.\" + type + \"$\";\n          filename = path_1.default.basename(resourcePath).replace(new RegExp(suffix), '');\n          normalizedName = (relativeDirname.length === 0 ? filename : relativeDirname.replace(pathSeparatorPattern, '_') + \"_\" + filename).toLowerCase().replace(/[^a-z0-9_]/g, '') + \".\" + type;\n          _context2.next = 18;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return _this.fs.readdir(dirname, function (error, results) {\n              var _a, _b;\n\n              if (error) {\n                reject(error);\n              } else {\n                resolve((_b = (_a = results) === null || _a === void 0 ? void 0 : _a.filter(function (result) {\n                  return typeof result === 'string';\n                })) !== null && _b !== void 0 ? _b : []);\n              }\n            });\n          }));\n\n        case 18:\n          files = _context2.sent;\n          scales = NativeAssetResolver_1.NativeAssetResolver.collectScales(files, {\n            name: filename,\n            type: type,\n            assetExtensions: options.assetExtensions,\n            platforms: options.platforms\n          });\n          scaleKeys = Object.keys(scales).sort(function (a, b) {\n            return parseInt(a.replace(/[^\\d.]/g, ''), 10) - parseInt(b.replace(/[^\\d.]/g, ''), 10);\n          });\n          readFileAsync = util_1.promisify(this.fs.readFile.bind(this.fs));\n\n          resolveAssetOutput = function resolveAssetOutput(results, scale, scaleFilePath) {\n            if (options.persist && options.platforms.includes('android')) {\n              var destination = getAndroidResourceFolder({\n                name: normalizedName,\n                scale: scale,\n                scaleFilePath: scaleFilePath,\n                contents: results\n              });\n              return path_1.default.join(destination, normalizedName);\n            }\n\n            var name = \"\" + filename + (scale === '@1x' ? '' : scale) + \".\" + type;\n            return path_1.default.join(assetsPath, relativeDirname, name);\n          };\n\n          resolveScaleAsync = function resolveScaleAsync(scale) {\n            var scaleFilePath, results;\n            return _regeneratorRuntime.async(function resolveScaleAsync$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    scaleFilePath = path_1.default.join(dirname, scales[scale].name);\n\n                    _this.addDependency(scaleFilePath);\n\n                    _context.next = 4;\n                    return _regeneratorRuntime.awrap(readFileAsync(scaleFilePath));\n\n                  case 4:\n                    results = _context.sent;\n                    return _context.abrupt(\"return\", {\n                      content: results,\n                      destination: resolveAssetOutput(results, scale, scaleFilePath)\n                    });\n\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          _context2.next = 26;\n          return _regeneratorRuntime.awrap(Promise.all(scaleKeys.map(resolveScaleAsync)));\n\n        case 26:\n          assets = _context2.sent;\n          assets.forEach(function (asset) {\n            var destination = asset.destination,\n                content = asset.content;\n            logger.debug('Asset emitted:', destination);\n\n            _this.emitFile(destination, content !== null && content !== void 0 ? content : '');\n          });\n          publicPath = path_1.default.join(assetsPath, relativeDirname).replace(pathSeparatorPattern, '/');\n\n          if (options.publicPath) {\n            publicPath = path_1.default.join(options.publicPath, publicPath);\n          }\n\n          hashes = assets.map(function (asset) {\n            var _a, _b;\n\n            return crypto_1.default.createHash('md5').update((_b = (_a = asset.content) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : asset.destination, 'utf8').digest('hex');\n          });\n\n          try {\n            info = image_size_1.imageSize(this.resourcePath);\n            match = path_1.default.basename(this.resourcePath).match(new RegExp(\"^\" + escapeStringRegexp_1.escapeStringRegexp(filename) + suffix));\n\n            if (match === null || match === void 0 ? void 0 : match[1]) {\n              scale = Number(match[1].replace(/[^\\d.]/g, ''));\n\n              if (typeof scale === 'number' && Number.isFinite(scale)) {\n                info.width && (info.width /= scale);\n                info.height && (info.height /= scale);\n              }\n            }\n          } catch (_unused) {}\n\n          logger.debug('Asset processed:', {\n            resourcePath: resourcePath,\n            platforms: options.platforms,\n            rootContext: rootContext,\n            relativeDirname: relativeDirname,\n            type: type,\n            assetsPath: assetsPath,\n            filename: filename,\n            normalizedName: normalizedName,\n            scales: scales,\n            assets: assets.map(function (asset) {\n              return asset.destination;\n            }),\n            publicPath: publicPath,\n            width: info === null || info === void 0 ? void 0 : info.width,\n            height: info === null || info === void 0 ? void 0 : info.height\n          });\n          callback === null || callback === void 0 ? void 0 : callback(null, createAssetCodeBlock(_objectSpread({\n            persist: !!options.persist,\n            scales: scales,\n            filename: filename,\n            type: type,\n            hashes: hashes,\n            httpServerLocation: publicPath,\n            fileSystemLocation: dirname\n          }, info || {})));\n          _context2.next = 39;\n          break;\n\n        case 36:\n          _context2.prev = 36;\n          _context2.t0 = _context2[\"catch\"](5);\n          callback === null || callback === void 0 ? void 0 : callback(_context2.t0);\n\n        case 39:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, this, [[5, 36]], Promise);\n}\n\nexports.default = nativeAssetsLoader;\n\nfunction createAssetCodeBlock(_ref2) {\n  var persist = _ref2.persist,\n      scales = _ref2.scales,\n      filename = _ref2.filename,\n      type = _ref2.type,\n      hashes = _ref2.hashes,\n      httpServerLocation = _ref2.httpServerLocation,\n      height = _ref2.height,\n      width = _ref2.width,\n      fileSystemLocation = _ref2.fileSystemLocation;\n  return [\"var AssetRegistry = require('react-native/Libraries/Image/AssetRegistry');\", \"module.exports = AssetRegistry.registerAsset({\", \"  __packager_asset: true,\", \"  scales: \" + JSON.stringify(scales) + \",\", \"  name: \" + JSON.stringify(filename) + \",\", \"  type: \" + JSON.stringify(type) + \",\", \"  hash: \" + JSON.stringify(hashes.join()) + \",\", \"  httpServerLocation: \" + JSON.stringify(httpServerLocation) + \",\", \"  \" + (persist ? '' : \"fileSystemLocation: \" + JSON.stringify(fileSystemLocation) + \",\"), \"  \" + (height != null ? \"height: \" + height + \",\" : ''), \"  \" + (width != null ? \"width: \" + width + \",\" : ''), \"});\"].join('\\n');\n}","map":{"version":3,"sources":["../../../src/plugins/NativeAssetsPlugin/loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2021 Callstack, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on https://github.com/callstack/repack/blob/3c1e059/packages/repack/src/webpack/plugins/AssetsPlugin/assetsLoader.ts\n */\n\nimport crypto from 'crypto';\nimport type fs from 'fs';\nimport { imageSize } from 'image-size';\nimport { ISizeCalculationResult } from 'image-size/dist/types/interface';\nimport utils from 'loader-utils';\nimport path from 'path';\nimport { validate as validateSchema } from 'schema-utils';\nimport { promisify } from 'util';\n\nimport { escapeStringRegexp } from '../../utils/escapeStringRegexp';\nimport { CollectedScales, NativeAssetResolver } from './NativeAssetResolver';\n\ninterface Options {\n  platforms: string[];\n  assetExtensions: string[];\n  persist?: boolean;\n  publicPath?: string;\n}\n\nfunction getOptions(loaderContext: any): Options {\n  const options = utils.getOptions(loaderContext) || {};\n\n  validateSchema(\n    {\n      type: 'object',\n      required: ['platforms', 'assetExtensions'],\n      properties: {\n        platforms: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        assetExtensions: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        persist: { type: 'boolean' },\n        publicPath: { type: 'string' },\n      },\n    },\n    options,\n    { name: 'nativeAssetsLoader' }\n  );\n\n  return (options as unknown) as Options;\n}\n\nexport const raw = true;\n\nfunction getAndroidResourceFolder({\n  name,\n  contents,\n  scale,\n  scaleFilePath,\n}: {\n  name: string;\n  contents?: string;\n  scale: string;\n  scaleFilePath: string;\n}) {\n  const testXml = /\\.(xml)$/;\n  const testImages = /\\.(png|jpg|gif|webp)$/;\n  const testFonts = /\\.(ttf|otf|ttc)$/;\n\n  if (\n    // found font family\n    (testXml.test(name) && contents?.includes('font-family')) ||\n    // font extensions\n    testFonts.test(name)\n  ) {\n    return 'font';\n  } else if (testImages.test(name) || testXml.test(name)) {\n    // images extensions\n    switch (scale) {\n      case '@0.75x':\n        return 'drawable-ldpi';\n      case '@1x':\n        return 'drawable-mdpi';\n      case '@1.5x':\n        return 'drawable-hdpi';\n      case '@2x':\n        return 'drawable-xhdpi';\n      case '@3x':\n        return 'drawable-xxhdpi';\n      case '@4x':\n        return 'drawable-xxxhdpi';\n      default:\n        throw new Error(`Unknown scale ${scale} for ${scaleFilePath}`);\n    }\n  }\n\n  // everything else is going to RAW\n  return 'raw';\n}\n\nexport default async function nativeAssetsLoader(this: any) {\n  this.cacheable();\n\n  const callback = this.async();\n  const logger = this.getLogger('nativeAssetsLoader');\n  const rootContext = this.rootContext;\n\n  logger.debug('Processing:', this.resourcePath);\n\n  try {\n    const options = getOptions(this);\n    const pathSeparatorPattern = new RegExp(`\\\\${path.sep}`, 'g');\n    const resourcePath = this.resourcePath;\n    const dirname = path.dirname(resourcePath);\n    // Relative path to rootContext without any ../ due to https://github.com/callstack/haul/issues/474\n    // Assets from from outside of rootContext, should still be placed inside bundle output directory.\n    // Example:\n    //   resourcePath    = monorepo/node_modules/my-module/image.png\n    //   dirname         = monorepo/node_modules/my-module\n    //   rootContext     = monorepo/packages/my-app/\n    //   relativeDirname = ../../node_modules/my-module (original)\n    // So when we calculate destination for the asset for iOS ('assets' + relativeDirname + filename),\n    // it will end up outside of `assets` directory, so we have to make sure it's:\n    //   relativeDirname = node_modules/my-module (tweaked)\n    const relativeDirname = path\n      .relative(rootContext, dirname)\n      .replace(new RegExp(`^[\\\\.\\\\${path.sep}]+`), '');\n    const type = path.extname(resourcePath).replace(/^\\./, '');\n    const assetsPath = 'assets';\n    const suffix = `(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${options.platforms.join('|')}))?\\\\.${type}$`;\n    const filename = path.basename(resourcePath).replace(new RegExp(suffix), '');\n    // Name with embedded relative dirname eg `node_modules_reactnative_libraries_newappscreen_components_logo.png`\n    const normalizedName = `${(relativeDirname.length === 0\n      ? filename\n      : `${relativeDirname.replace(pathSeparatorPattern, '_')}_${filename}`\n    )\n      .toLowerCase()\n      .replace(/[^a-z0-9_]/g, '')}.${type}`;\n\n    const files = await new Promise<string[]>((resolve, reject) =>\n      this.fs.readdir(dirname, (error: Error | null, results: any[]) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(\n            (results as any[] | undefined)?.filter(result => typeof result === 'string') ?? []\n          );\n        }\n      })\n    );\n\n    const scales = NativeAssetResolver.collectScales(files, {\n      name: filename,\n      type,\n      assetExtensions: options.assetExtensions,\n      platforms: options.platforms,\n    });\n\n    const scaleKeys = Object.keys(scales).sort(\n      (a, b) => parseInt(a.replace(/[^\\d.]/g, ''), 10) - parseInt(b.replace(/[^\\d.]/g, ''), 10)\n    );\n    const readFileAsync = promisify(this.fs.readFile.bind(this.fs) as typeof fs.readFile);\n\n    const resolveAssetOutput = (results: any, scale: string, scaleFilePath: string) => {\n      if (options.persist && options.platforms.includes('android')) {\n        const destination = getAndroidResourceFolder({\n          name: normalizedName,\n          scale,\n          scaleFilePath,\n          contents: results,\n        });\n        return path.join(destination, normalizedName);\n      }\n\n      const name = `${filename}${scale === '@1x' ? '' : scale}.${type}`;\n      return path.join(assetsPath, relativeDirname, name);\n    };\n\n    const resolveScaleAsync = async (\n      scale: string\n    ): Promise<{\n      destination: string;\n      content: string | Buffer | undefined;\n    }> => {\n      const scaleFilePath = path.join(dirname, scales[scale].name);\n      this.addDependency(scaleFilePath);\n      const results = await readFileAsync(scaleFilePath);\n      return {\n        content: results,\n        destination: resolveAssetOutput(results, scale, scaleFilePath),\n      };\n    };\n\n    const assets = await Promise.all(scaleKeys.map(resolveScaleAsync));\n\n    assets.forEach(asset => {\n      const { destination, content } = asset;\n\n      logger.debug('Asset emitted:', destination);\n      // Assets are emitted relatively to `output.path`.\n      this.emitFile(destination, content ?? '');\n    });\n\n    let publicPath = path.join(assetsPath, relativeDirname).replace(pathSeparatorPattern, '/');\n\n    if (options.publicPath) {\n      publicPath = path.join(options.publicPath, publicPath);\n    }\n\n    const hashes = assets.map(asset =>\n      crypto\n        .createHash('md5')\n        .update(asset.content?.toString() ?? asset.destination, 'utf8')\n        .digest('hex')\n    );\n\n    let info: ISizeCalculationResult | undefined;\n\n    try {\n      info = imageSize(this.resourcePath);\n\n      const match = path\n        .basename(this.resourcePath)\n        .match(new RegExp(`^${escapeStringRegexp(filename)}${suffix}`));\n\n      if (match?.[1]) {\n        const scale = Number(match[1].replace(/[^\\d.]/g, ''));\n\n        if (typeof scale === 'number' && Number.isFinite(scale)) {\n          info.width && (info.width /= scale);\n          info.height && (info.height /= scale);\n        }\n      }\n    } catch {\n      // Asset is not an image\n    }\n\n    logger.debug('Asset processed:', {\n      resourcePath,\n      platforms: options.platforms,\n      rootContext,\n      relativeDirname,\n      type,\n      assetsPath,\n      filename,\n      normalizedName,\n      scales,\n      assets: assets.map(asset => asset.destination),\n      publicPath,\n      width: info?.width,\n      height: info?.height,\n    });\n\n    callback?.(\n      null,\n      createAssetCodeBlock({\n        persist: !!options.persist,\n        scales,\n        filename,\n        type,\n        hashes,\n        httpServerLocation: publicPath,\n        fileSystemLocation: dirname,\n        ...(info || {}),\n      })\n    );\n  } catch (error) {\n    callback?.(error);\n  }\n}\n\nfunction createAssetCodeBlock({\n  persist,\n  scales,\n  filename,\n  type,\n  hashes,\n  httpServerLocation,\n  height,\n  width,\n  fileSystemLocation,\n}: {\n  persist: boolean;\n  scales: CollectedScales;\n  filename: string;\n  type: string;\n  hashes: string[];\n  httpServerLocation: string;\n  height?: number;\n  width?: number;\n  fileSystemLocation: string;\n}) {\n  return [\n    `var AssetRegistry = require('react-native/Libraries/Image/AssetRegistry');`,\n    `module.exports = AssetRegistry.registerAsset({`,\n    `  __packager_asset: true,`,\n    `  scales: ${JSON.stringify(scales)},`,\n    `  name: ${JSON.stringify(filename)},`,\n    `  type: ${JSON.stringify(type)},`,\n    `  hash: ${JSON.stringify(hashes.join())},`,\n    `  httpServerLocation: ${JSON.stringify(httpServerLocation)},`,\n    `  ${persist ? '' : `fileSystemLocation: ${JSON.stringify(fileSystemLocation)},`}`,\n    `  ${height != null ? `height: ${height},` : ''}`,\n    `  ${width != null ? `width: ${width},` : ''}`,\n    `});`,\n  ].join('\\n');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}