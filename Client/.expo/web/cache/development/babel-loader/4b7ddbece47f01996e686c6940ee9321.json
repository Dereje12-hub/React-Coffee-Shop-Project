{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDevServerAsync = void 0;\n\nvar connect_1 = __importDefault(require(\"connect\"));\n\nvar http_1 = __importDefault(require(\"http\"));\n\nvar importMetroFromProject_1 = require(\"./importMetroFromProject\");\n\nfunction getConfig(projectRoot, config) {\n  var _importMetroFromProje, getDefaultConfig, mergeConfig, defaultConfig;\n\n  return _regeneratorRuntime.async(function getConfig$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _importMetroFromProje = importMetroFromProject_1.importMetroConfigFromProject(projectRoot), getDefaultConfig = _importMetroFromProje.getDefaultConfig, mergeConfig = _importMetroFromProje.mergeConfig;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getDefaultConfig(config.projectRoot || projectRoot));\n\n        case 3:\n          defaultConfig = _context.sent;\n          return _context.abrupt(\"return\", mergeConfig(defaultConfig, config));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction reportInitializeStarted(config) {\n  config.reporter.update({\n    hasReducedPerformance: false,\n    port: config.server.port,\n    type: 'initialize_started'\n  });\n}\n\nfunction runMetro(projectRoot, config) {\n  var MetroServer, mergedConfig;\n  return _regeneratorRuntime.async(function runMetro$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          MetroServer = importMetroFromProject_1.importMetroServerFromProject(projectRoot);\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(getConfig(projectRoot, config));\n\n        case 3:\n          mergedConfig = _context2.sent;\n          reportInitializeStarted(mergedConfig);\n          return _context2.abrupt(\"return\", new MetroServer(mergedConfig));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction createDevServerAsync(projectRoot, _ref) {\n  var config, logger, onReady, serverApp, metroServer, _importMetroFromProje2, InspectorProxy, MetroHmrServer, attachWebsocketServer, middleware, inspectorProxy, httpServer;\n\n  return _regeneratorRuntime.async(function createDevServerAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          config = _ref.config, logger = _ref.logger, onReady = _ref.onReady;\n          serverApp = connect_1.default();\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(runMetro(projectRoot, config));\n\n        case 4:\n          metroServer = _context3.sent;\n          _importMetroFromProje2 = importMetroFromProject_1.importInspectorProxyServerFromProject(projectRoot), InspectorProxy = _importMetroFromProje2.InspectorProxy;\n          MetroHmrServer = importMetroFromProject_1.importMetroHmrServerFromProject(projectRoot);\n          attachWebsocketServer = importMetroFromProject_1.importMetroLibAttachWebsocketServerFromProject(projectRoot);\n          middleware = metroServer.processRequest;\n\n          if (config.server.enhanceMiddleware) {\n            middleware = config.server.enhanceMiddleware(middleware, metroServer);\n          }\n\n          serverApp.use(middleware);\n          inspectorProxy = null;\n\n          if (config.server.runInspectorProxy) {\n            inspectorProxy = new InspectorProxy(config.projectRoot);\n          }\n\n          httpServer = http_1.default.createServer(serverApp);\n          httpServer.timeout = 0;\n          return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n            httpServer.listen(config.server.port, function () {\n              if (onReady) {\n                onReady(httpServer);\n              }\n\n              var websocketServer = new MetroHmrServer(metroServer.getBundler(), metroServer.getCreateModuleId(), config);\n              attachWebsocketServer({\n                httpServer: httpServer,\n                path: '/hot',\n                websocketServer: websocketServer\n              });\n\n              if (inspectorProxy) {\n                inspectorProxy.addWebSocketListener(httpServer);\n                serverApp.use(inspectorProxy.processRequest.bind(inspectorProxy));\n              }\n\n              resolve({\n                server: httpServer\n              });\n            });\n            httpServer.on('error', function (error) {\n              logger.error({\n                tag: 'metro'\n              }, \"Server error: \" + error.message);\n              metroServer.end();\n              reject(error);\n            });\n            httpServer.on('close', function () {\n              metroServer.end();\n            });\n          }));\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.createDevServerAsync = createDevServerAsync;","map":{"version":3,"sources":["../../src/metro/createDevServerAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import type Log from '@expo/bunyan';\nimport connect from 'connect';\nimport http from 'http';\nimport type MetroConfig from 'metro-config';\n\nimport {\n  importInspectorProxyServerFromProject,\n  importMetroConfigFromProject,\n  importMetroHmrServerFromProject,\n  importMetroLibAttachWebsocketServerFromProject,\n  importMetroServerFromProject,\n} from './importMetroFromProject';\n\nasync function getConfig(\n  projectRoot: string,\n  config: MetroConfig.InputConfigT\n): Promise<MetroConfig.ConfigT> {\n  const { getDefaultConfig, mergeConfig } = importMetroConfigFromProject(projectRoot);\n  const defaultConfig = await getDefaultConfig(config.projectRoot || projectRoot);\n  return mergeConfig(defaultConfig, config);\n}\n\n/**\n * Send the initial load event to our logger.\n * @param config loaded metro config\n */\nfunction reportInitializeStarted(config: MetroConfig.ConfigT) {\n  config.reporter.update({\n    hasReducedPerformance: false,\n    port: config.server.port,\n    type: 'initialize_started',\n  });\n}\n\nasync function runMetro(projectRoot: string, config: MetroConfig.InputConfigT) {\n  const MetroServer = importMetroServerFromProject(projectRoot);\n\n  const mergedConfig = await getConfig(projectRoot, config);\n\n  reportInitializeStarted(mergedConfig);\n\n  return new MetroServer(mergedConfig);\n}\n\ntype RunServerProps = {\n  config: MetroConfig.ConfigT;\n  logger: Log;\n  onReady?: (server: http.Server) => void;\n};\n\nexport async function createDevServerAsync(\n  projectRoot: string,\n  { config, logger, onReady }: RunServerProps\n): Promise<{\n  server: http.Server;\n}> {\n  const serverApp = connect();\n\n  const metroServer = await runMetro(projectRoot, config);\n\n  const { InspectorProxy } = importInspectorProxyServerFromProject(projectRoot);\n  const MetroHmrServer = importMetroHmrServerFromProject(projectRoot);\n  const attachWebsocketServer = importMetroLibAttachWebsocketServerFromProject(projectRoot);\n\n  let middleware = metroServer.processRequest;\n\n  // Enhance the resulting middleware using the config options\n  if (config.server.enhanceMiddleware) {\n    middleware = config.server.enhanceMiddleware(middleware, metroServer);\n  }\n\n  serverApp.use(middleware);\n\n  let inspectorProxy: typeof InspectorProxy | null = null;\n  if (config.server.runInspectorProxy) {\n    inspectorProxy = new InspectorProxy(config.projectRoot);\n  }\n\n  const httpServer = http.createServer(serverApp);\n\n  // Disable any kind of automatic timeout behavior for incoming\n  // requests in case it takes the packager more than the default\n  // timeout of 120 seconds to respond to a request.\n  httpServer.timeout = 0;\n\n  return new Promise((resolve, reject) => {\n    httpServer.listen(config.server.port, () => {\n      if (onReady) {\n        onReady(httpServer);\n      }\n\n      // Create a new HMR Server\n      // TODO: Replace with a metro-agnostic HMR server and share with Webpack.\n      const websocketServer = new MetroHmrServer(\n        metroServer.getBundler(),\n        metroServer.getCreateModuleId(),\n        config\n      );\n\n      // attachHmrServer\n      // TODO: Extract this function into expo/dev-server\n      attachWebsocketServer({\n        httpServer,\n        path: '/hot',\n        websocketServer,\n      });\n\n      if (inspectorProxy) {\n        inspectorProxy.addWebSocketListener(httpServer);\n\n        // TODO(hypuk): Refactor inspectorProxy.processRequest into separate request handlers\n        // so that we could provide routes (/json/list and /json/version) here.\n        // Currently this causes Metro to give warning about T31407894.\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n        serverApp.use(inspectorProxy.processRequest.bind(inspectorProxy));\n      }\n\n      resolve({ server: httpServer });\n    });\n\n    httpServer.on('error', error => {\n      // Send a custom log to inform our system that the server has had an unexpected error.\n      logger.error({ tag: 'metro' }, `Server error: ${error.message}`);\n      metroServer.end();\n      reject(error);\n    });\n\n    httpServer.on('close', () => {\n      metroServer.end();\n    });\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}