{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.importMetroSourceMapFromProject = exports.importMetroConfigFromProject = void 0;\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar MetroImportError = function (_Error) {\n  _inherits(MetroImportError, _Error);\n\n  var _super = _createSuper(MetroImportError);\n\n  function MetroImportError(projectRoot, moduleId) {\n    _classCallCheck(this, MetroImportError);\n\n    return _super.call(this, \"Missing package \\\"\" + moduleId + \"\\\" in the project at: \" + projectRoot + \"\\n\" + 'This usually means `react-native` is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + 'and run `yarn` or `npm install`.');\n  }\n\n  return _createClass(MetroImportError);\n}(_wrapNativeSuper(Error));\n\nfunction resolveFromProject(projectRoot, moduleId) {\n  var resolvedPath = resolve_from_1.default.silent(projectRoot, moduleId);\n\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot, moduleId) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nfunction importMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nexports.importMetroConfigFromProject = importMetroConfigFromProject;\nvar metroSourceMap;\n\nfunction importMetroSourceMapFromProject(projectRoot) {\n  if (metroSourceMap) return metroSourceMap;\n  metroSourceMap = importFromProject(projectRoot, 'metro-source-map');\n  return metroSourceMap;\n}\n\nexports.importMetroSourceMapFromProject = importMetroSourceMapFromProject;","map":{"version":3,"sources":["../src/importMetroFromProject.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;IAEM,gB;;;;;AACJ,4BAAY,WAAZ,EAAiC,QAAjC,EAAiD;AAAA;;AAAA,6BAE7C,uBAAoB,QAApB,8BAAoD,WAApD,UACE,sDADF,GAEE,yEAFF,GAGE,kCAL2C;AAOhD;;;mBAR4B,K;;AAW/B,SAAS,kBAAT,CAA4B,WAA5B,EAAiD,QAAjD,EAAiE;AAC/D,MAAM,YAAY,GAAG,cAAA,CAAA,OAAA,CAAY,MAAZ,CAAmB,WAAnB,EAAgC,QAAhC,CAArB;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,UAAM,IAAI,gBAAJ,CAAqB,WAArB,EAAkC,QAAlC,CAAN;AACD;;AACD,SAAO,YAAP;AACD;;AAED,SAAS,iBAAT,CAAoC,WAApC,EAAyD,QAAzD,EAAyE;AACvE,SAAO,OAAO,CAAC,kBAAkB,CAAC,WAAD,EAAc,QAAd,CAAnB,CAAd;AACD;;AAED,SAAgB,4BAAhB,CAA6C,WAA7C,EAAgE;AAC9D,SAAO,iBAAiB,CAAC,WAAD,EAAc,cAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAIA,IAAI,cAAJ;;AAEA,SAAgB,+BAAhB,CAAgD,WAAhD,EAAmE;AACjE,MAAI,cAAJ,EAAoB,OAAO,cAAP;AACpB,EAAA,cAAc,GAAG,iBAAiB,CAAwB,WAAxB,EAAqC,kBAArC,CAAlC;AACA,SAAO,cAAP;AACD;;AAJD,OAAA,CAAA,+BAAA,GAAA,+BAAA","sourcesContent":["import type MetroConfig from 'metro-config';\nimport type MetroSourceMap from 'metro-source-map';\nimport resolveFrom from 'resolve-from';\n\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject<T = any>(projectRoot: string, moduleId: string): T {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nexport function importMetroConfigFromProject(projectRoot: string): typeof MetroConfig {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nlet metroSourceMap: typeof MetroSourceMap | undefined;\n\nexport function importMetroSourceMapFromProject(projectRoot: string): typeof MetroSourceMap {\n  if (metroSourceMap) return metroSourceMap;\n  metroSourceMap = importFromProject<typeof MetroSourceMap>(projectRoot, 'metro-source-map');\n  return metroSourceMap;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}