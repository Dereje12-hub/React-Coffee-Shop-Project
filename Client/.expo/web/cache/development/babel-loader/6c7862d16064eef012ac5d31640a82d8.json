{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNpmProxy = void 0;\n\nvar child_process_1 = require(\"child_process\");\n\nvar dns_1 = __importDefault(require(\"dns\"));\n\nvar url_1 = __importDefault(require(\"url\"));\n\nfunction getNpmProxy() {\n  var _a;\n\n  if (process.env.https_proxy) {\n    return (_a = process.env.https_proxy) !== null && _a !== void 0 ? _a : null;\n  }\n\n  try {\n    var httpsProxy = child_process_1.execSync('npm config get https-proxy').toString().trim();\n    return httpsProxy !== 'null' ? httpsProxy : null;\n  } catch (e) {\n    return null;\n  }\n}\n\nexports.getNpmProxy = getNpmProxy;\n\nfunction isUrlAvailableAsync(url) {\n  return new Promise(function (resolve) {\n    dns_1.default.lookup(url, function (err) {\n      resolve(!err);\n    });\n  });\n}\n\nfunction isYarnOfflineAsync() {\n  var proxy, _url_1$default$parse, hostname;\n\n  return _regeneratorRuntime.async(function isYarnOfflineAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(isUrlAvailableAsync('registry.yarnpkg.com'));\n\n        case 2:\n          if (!_context.sent) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 4:\n          proxy = getNpmProxy();\n\n          if (proxy) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 7:\n          _url_1$default$parse = url_1.default.parse(proxy), hostname = _url_1$default$parse.hostname;\n\n          if (hostname) {\n            _context.next = 10;\n            break;\n          }\n\n          return _context.abrupt(\"return\", true);\n\n        case 10:\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(isUrlAvailableAsync(hostname));\n\n        case 12:\n          return _context.abrupt(\"return\", !_context.sent);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.default = isYarnOfflineAsync;","map":{"version":3,"sources":["../../src/utils/isYarnOfflineAsync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AAEA,SAAgB,WAAhB,GAA2B;;;AACzB,MAAI,OAAO,CAAC,GAAR,CAAY,WAAhB,EAA6B;AAC3B,WAAO,CAAA,EAAA,GAAA,OAAO,CAAC,GAAR,CAAY,WAAZ,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,EAAvB,GAA2B,IAAlC;AACD;;AAED,MAAI;AACF,QAAM,UAAU,GAAG,eAAA,CAAA,QAAA,CAAS,4BAAT,EAAuC,QAAvC,GAAkD,IAAlD,EAAnB;AACA,WAAO,UAAU,KAAK,MAAf,GAAwB,UAAxB,GAAqC,IAA5C;AACD,GAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAO,IAAP;AACD;AACF;;AAXD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAaA,SAAS,mBAAT,CAA6B,GAA7B,EAAwC;AACtC,SAAO,IAAI,OAAJ,CAAqB,UAAA,OAAO,EAAG;AACpC,IAAA,KAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,GAAX,EAAgB,UAAA,GAAG,EAAG;AACpB,MAAA,OAAO,CAAC,CAAC,GAAF,CAAP;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AAKc,SAAe,kBAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACH,mBAAmB,CAAC,sBAAD,CADhB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,2CAEJ,KAFI;;AAAA;AAKP,UAAA,KALO,GAKC,WAAW,EALZ;;AAAA,cAOR,KAPQ;AAAA;AAAA;AAAA;;AAAA,2CAQJ,IARI;;AAAA;AAAA,iCAWQ,KAAA,CAAA,OAAA,CAAI,KAAJ,CAAU,KAAV,CAXR,EAWL,QAXK,wBAWL,QAXK;;AAAA,cAYR,QAZQ;AAAA;AAAA;AAAA;;AAAA,2CAaJ,IAbI;;AAAA;AAAA;AAAA,2CAgBE,mBAAmB,CAAC,QAAD,CAhBrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAf,OAAA,CAAA,OAAA,GAAA,kBAAA","sourcesContent":["import { execSync } from 'child_process';\nimport dns from 'dns';\nimport url from 'url';\n\nexport function getNpmProxy(): string | null {\n  if (process.env.https_proxy) {\n    return process.env.https_proxy ?? null;\n  }\n\n  try {\n    const httpsProxy = execSync('npm config get https-proxy').toString().trim();\n    return httpsProxy !== 'null' ? httpsProxy : null;\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction isUrlAvailableAsync(url: string): Promise<boolean> {\n  return new Promise<boolean>(resolve => {\n    dns.lookup(url, err => {\n      resolve(!err);\n    });\n  });\n}\n\n/**\n * Determine if you should use yarn offline or not.\n */\nexport default async function isYarnOfflineAsync(): Promise<boolean> {\n  if (await isUrlAvailableAsync('registry.yarnpkg.com')) {\n    return false;\n  }\n\n  const proxy = getNpmProxy();\n\n  if (!proxy) {\n    return true;\n  }\n\n  const { hostname } = url.parse(proxy);\n  if (!hostname) {\n    return true;\n  }\n\n  return !(await isUrlAvailableAsync(hostname));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}