{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDevServerMiddleware = void 0;\n\nvar cli_server_api_1 = require(\"@react-native-community/cli-server-api\");\n\nvar body_parser_1 = __importDefault(require(\"body-parser\"));\n\nvar middlwareMutations_1 = require(\"../middlwareMutations\");\n\nvar clientLogsMiddleware_1 = __importDefault(require(\"./clientLogsMiddleware\"));\n\nvar createJsInspectorMiddleware_1 = __importDefault(require(\"./createJsInspectorMiddleware\"));\n\nvar remoteDevtoolsCorsMiddleware_1 = require(\"./remoteDevtoolsCorsMiddleware\");\n\nvar remoteDevtoolsSecurityHeadersMiddleware_1 = require(\"./remoteDevtoolsSecurityHeadersMiddleware\");\n\nvar suppressErrorMiddleware_1 = require(\"./suppressErrorMiddleware\");\n\nfunction createDevServerMiddleware(_ref) {\n  var watchFolders = _ref.watchFolders,\n      port = _ref.port,\n      logger = _ref.logger;\n\n  var _cli_server_api_1$cre = cli_server_api_1.createDevServerMiddleware({\n    port: port,\n    watchFolders: watchFolders\n  }),\n      middleware = _cli_server_api_1$cre.middleware,\n      attachToServer = _cli_server_api_1$cre.attachToServer;\n\n  middlwareMutations_1.replaceMiddlewareWith(middleware, cli_server_api_1.securityHeadersMiddleware, remoteDevtoolsSecurityHeadersMiddleware_1.remoteDevtoolsSecurityHeadersMiddleware);\n  middleware.use(remoteDevtoolsCorsMiddleware_1.remoteDevtoolsCorsMiddleware);\n  middlwareMutations_1.prependMiddleware(middleware, suppressErrorMiddleware_1.suppressRemoteDebuggingErrorMiddleware);\n  middleware.use(body_parser_1.default.json());\n  middleware.use('/logs', clientLogsMiddleware_1.default(logger));\n  middleware.use('/inspector', createJsInspectorMiddleware_1.default());\n  return {\n    middleware: middleware,\n    attachToServer: attachToServer,\n    logger: logger\n  };\n}\n\nexports.createDevServerMiddleware = createDevServerMiddleware;","map":{"version":3,"sources":["../../src/middleware/devServerMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;AAIA,IAAA,aAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AAGA,IAAA,oBAAA,GAAA,OAAA,yBAAA;;AACA,IAAA,sBAAA,GAAA,eAAA,CAAA,OAAA,0BAAA,CAAA;;AACA,IAAA,6BAAA,GAAA,eAAA,CAAA,OAAA,iCAAA,CAAA;;AACA,IAAA,8BAAA,GAAA,OAAA,kCAAA;;AACA,IAAA,yCAAA,GAAA,OAAA,6CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,6BAAA;;AAsBA,SAAgB,yBAAhB,OAQC;AAAA,MAPC,YAOD,QAPC,YAOD;AAAA,MANC,IAMD,QANC,IAMD;AAAA,MALC,MAKD,QALC,MAKD;;AACC,8BAAuC,gBAAA,CAAA,yBAAA,CAAqC;AAC1E,IAAA,IAAI,EAAJ,IAD0E;AAE1E,IAAA,YAAY,EAAZ;AAF0E,GAArC,CAAvC;AAAA,MAAQ,UAAR,yBAAQ,UAAR;AAAA,MAAoB,cAApB,yBAAoB,cAApB;;AAOA,EAAA,oBAAA,CAAA,qBAAA,CACE,UADF,EAEE,gBAAA,CAAA,yBAFF,EAGE,yCAAA,CAAA,uCAHF;AAKA,EAAA,UAAU,CAAC,GAAX,CAAe,8BAAA,CAAA,4BAAf;AACA,EAAA,oBAAA,CAAA,iBAAA,CAAkB,UAAlB,EAA8B,yBAAA,CAAA,sCAA9B;AAEA,EAAA,UAAU,CAAC,GAAX,CAAe,aAAA,CAAA,OAAA,CAAW,IAAX,EAAf;AACA,EAAA,UAAU,CAAC,GAAX,CAAe,OAAf,EAAwB,sBAAA,CAAA,OAAA,CAAqB,MAArB,CAAxB;AACA,EAAA,UAAU,CAAC,GAAX,CAAe,YAAf,EAA6B,6BAAA,CAAA,OAAA,EAA7B;AAEA,SAAO;AAAE,IAAA,UAAU,EAAV,UAAF;AAAc,IAAA,cAAc,EAAd,cAAd;AAA8B,IAAA,MAAM,EAAN;AAA9B,GAAP;AACD;;AA7BD,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourcesContent":["import type Log from '@expo/bunyan';\nimport {\n  createDevServerMiddleware as createReactNativeDevServerMiddleware,\n  securityHeadersMiddleware,\n} from '@react-native-community/cli-server-api';\nimport bodyParser from 'body-parser';\nimport type { Server as ConnectServer } from 'connect';\n\nimport { prependMiddleware, replaceMiddlewareWith } from '../middlwareMutations';\nimport clientLogsMiddleware from './clientLogsMiddleware';\nimport createJsInspectorMiddleware from './createJsInspectorMiddleware';\nimport { remoteDevtoolsCorsMiddleware } from './remoteDevtoolsCorsMiddleware';\nimport { remoteDevtoolsSecurityHeadersMiddleware } from './remoteDevtoolsSecurityHeadersMiddleware';\nimport { suppressRemoteDebuggingErrorMiddleware } from './suppressErrorMiddleware';\n\nexport type AttachToServerFunction = ReturnType<\n  typeof createReactNativeDevServerMiddleware\n>['attachToServer'];\n\n/**\n * Extends the default `createDevServerMiddleware` and adds some Expo CLI-specific dev middleware\n * with exception for the manifest middleware which is currently in `xdl`.\n *\n * Adds:\n * - `/logs`: pipe runtime `console` logs to the `props.logger` object.\n * - `/inspector`: launch hermes inspector proxy in chrome.\n * - CORS support for remote devtools\n * - body parser middleware\n *\n * @param props.watchFolders array of directory paths to use with watchman\n * @param props.port port that the dev server will run on\n * @param props.logger bunyan instance that all runtime `console` logs will be piped through.\n *\n * @returns\n */\nexport function createDevServerMiddleware({\n  watchFolders,\n  port,\n  logger,\n}: {\n  watchFolders: readonly string[];\n  port: number;\n  logger: Log;\n}): { middleware: ConnectServer; attachToServer: AttachToServerFunction; logger: Log } {\n  const { middleware, attachToServer } = createReactNativeDevServerMiddleware({\n    port,\n    watchFolders,\n  });\n\n  // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.\n  // We replace with the enhanced version.\n  replaceMiddlewareWith(\n    middleware as ConnectServer,\n    securityHeadersMiddleware,\n    remoteDevtoolsSecurityHeadersMiddleware\n  );\n  middleware.use(remoteDevtoolsCorsMiddleware);\n  prependMiddleware(middleware, suppressRemoteDebuggingErrorMiddleware);\n\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(logger));\n  middleware.use('/inspector', createJsInspectorMiddleware());\n\n  return { middleware, attachToServer, logger };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}