{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidPermissions = getAndroidPermissions;\nexports.setAndroidPermissions = setAndroidPermissions;\nexports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;\nexports.addPermissionToManifest = addPermissionToManifest;\nexports.removePermissions = removePermissions;\nexports.addPermission = addPermission;\nexports.ensurePermissions = ensurePermissions;\nexports.ensurePermission = ensurePermission;\nexports.ensurePermissionNameFormat = ensurePermissionNameFormat;\nexports.getPermissions = getPermissions;\nexports.withPermissions = void 0;\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar USES_PERMISSION = 'uses-permission';\n\nvar withPermissions = function withPermissions(config, permissions) {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = _toConsumableArray(new Set(config.android.permissions.concat(permissions)));\n  }\n\n  return (0, _androidPlugins().withAndroidManifest)(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setAndroidPermissions(config, config.modResults));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withPermissions = withPermissions;\n\nfunction prefixAndroidPermissionsIfNecessary(permissions) {\n  return permissions.map(function (permission) {\n    if (!permission.includes('.')) {\n      return \"android.permission.\" + permission;\n    }\n\n    return permission;\n  });\n}\n\nfunction getAndroidPermissions(config) {\n  var _config$android$permi, _config$android;\n\n  return (_config$android$permi = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.permissions) !== null && _config$android$permi !== void 0 ? _config$android$permi : [];\n}\n\nfunction setAndroidPermissions(config, androidManifest) {\n  var _androidManifest$mani;\n\n  var permissions = getAndroidPermissions(config);\n  var providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n\n  var permissionsToAdd = _toConsumableArray(providedPermissions);\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  var manifestPermissions = (_androidManifest$mani = androidManifest.manifest['uses-permission']) !== null && _androidManifest$mani !== void 0 ? _androidManifest$mani : [];\n  permissionsToAdd.forEach(function (permission) {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n  return androidManifest;\n}\n\nfunction isPermissionAlreadyRequested(permission, manifestPermissions) {\n  return manifestPermissions.some(function (e) {\n    return e.$['android:name'] === permission;\n  });\n}\n\nfunction addPermissionToManifest(permission, manifestPermissions) {\n  manifestPermissions.push({\n    $: {\n      'android:name': permission\n    }\n  });\n  return manifestPermissions;\n}\n\nfunction removePermissions(androidManifest, permissionNames) {\n  var targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  var permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var nextPermissions = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(permissions), _step; !(_step = _iterator()).done;) {\n    var attribute = _step.value;\n\n    if (targetNames) {\n      var value = attribute.$['android:name'] || attribute.$.name;\n\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nfunction addPermission(androidManifest, permissionName) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: {\n      'android:name': permissionName\n    }\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nfunction ensurePermissions(androidManifest, permissionNames) {\n  var permissions = getPermissions(androidManifest);\n  var results = {};\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(permissionNames), _step2; !(_step2 = _iterator2()).done;) {\n    var permissionName = _step2.value;\n    var targetName = ensurePermissionNameFormat(permissionName);\n\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n\n  return results;\n}\n\nfunction ensurePermission(androidManifest, permissionName) {\n  var permissions = getPermissions(androidManifest);\n  var targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n\n  return false;\n}\n\nfunction ensurePermissionNameFormat(permissionName) {\n  if (permissionName.includes('.')) {\n    var com = permissionName.split('.');\n    var name = com.pop();\n    return [].concat(_toConsumableArray(com), [name.toUpperCase()]).join('.');\n  } else {\n    return ensurePermissionNameFormat(\"android.permission.\" + permissionName);\n  }\n}\n\nfunction getPermissions(androidManifest) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var permissions = usesPermissions.map(function (permissionObject) {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}","map":{"version":3,"sources":["../../src/android/Permissions.ts"],"names":["USES_PERMISSION","withPermissions","Array","permissions","config","setAndroidPermissions","permission","getAndroidPermissions","providedPermissions","prefixAndroidPermissionsIfNecessary","permissionsToAdd","androidManifest","manifestPermissions","isPermissionAlreadyRequested","addPermissionToManifest","e","$","targetNames","permissionNames","nextPermissions","value","attribute","usesPermissions","permissionName","getPermissions","results","targetName","ensurePermissionNameFormat","addPermission","com","name","permissionObject"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map(permission => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach(permission => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some(e => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map(permissionObject => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"]},"metadata":{},"sourceType":"script"}