{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\n\nvar fs_1 = require(\"fs\");\n\nvar mkdirp_1 = require(\"mkdirp\");\n\nvar lodash_1 = require(\"lodash\");\n\nvar applicationConfigPath = require(\"application-config-path\");\n\nvar eol_1 = tslib_1.__importDefault(require(\"eol\"));\n\nvar utils_1 = require(\"./utils\");\n\nexports.VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;\nexports.VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;\nexports.isMac = process.platform === 'darwin';\nexports.isLinux = process.platform === 'linux';\nexports.isWindows = process.platform === 'win32';\nexports.configDir = applicationConfigPath('devcert');\nexports.configPath = path_1.default.join.bind(path_1.default, exports.configDir);\nexports.domainsDir = exports.configPath('domains');\nexports.pathForDomain = path_1.default.join.bind(path_1.default, exports.domainsDir);\nexports.caVersionFile = exports.configPath('devcert-ca-version');\nexports.opensslSerialFilePath = exports.configPath('certificate-authority', 'serial');\nexports.opensslDatabaseFilePath = exports.configPath('certificate-authority', 'index.txt');\nexports.caSelfSignConfig = path_1.default.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');\n\nfunction withDomainSigningRequestConfig(domain, cb) {\n  var tmpFile = utils_1.mktmp();\n  var source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');\n  var template = lodash_1.template(source);\n  var result = template({\n    domain: domain\n  });\n  fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));\n  cb(tmpFile);\n  fs_1.unlinkSync(tmpFile);\n}\n\nexports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;\n\nfunction withDomainCertificateConfig(domain, cb) {\n  var tmpFile = utils_1.mktmp();\n  var source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');\n  var template = lodash_1.template(source);\n  var result = template({\n    domain: domain,\n    serialFile: exports.opensslSerialFilePath,\n    databaseFile: exports.opensslDatabaseFilePath,\n    domainDir: exports.pathForDomain(domain)\n  });\n  fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));\n  cb(tmpFile);\n  fs_1.unlinkSync(tmpFile);\n}\n\nexports.withDomainCertificateConfig = withDomainCertificateConfig;\nexports.rootCADir = exports.configPath('certificate-authority');\nexports.rootCAKeyPath = exports.configPath('certificate-authority', 'private-key.key');\nexports.rootCACertPath = exports.configPath('certificate-authority', 'certificate.cert');\n\nfunction getLegacyConfigDir() {\n  if (exports.isWindows && process.env.LOCALAPPDATA) {\n    return path_1.default.join(process.env.LOCALAPPDATA, 'devcert', 'config');\n  } else {\n    var uid = process.getuid && process.getuid();\n    var userHome = exports.isLinux && uid === 0 ? path_1.default.resolve('/usr/local/share') : require('os').homedir();\n    return path_1.default.join(userHome, '.config', 'devcert');\n  }\n}\n\nexports.getLegacyConfigDir = getLegacyConfigDir;\n\nfunction ensureConfigDirs() {\n  mkdirp_1.sync(exports.configDir);\n  mkdirp_1.sync(exports.domainsDir);\n  mkdirp_1.sync(exports.rootCADir);\n}\n\nexports.ensureConfigDirs = ensureConfigDirs;\nensureConfigDirs();","map":{"version":3,"sources":["constants.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { unlinkSync as rm, writeFileSync as writeFile, readFileSync as readFile } from 'fs';\nimport { sync as mkdirp } from 'mkdirp';\nimport { template as makeTemplate } from 'lodash';\nimport applicationConfigPath = require('application-config-path');\nimport eol from 'eol';\nimport { mktmp } from './utils';\n\nexport const VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;\nexport const VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;\n\n// Platform shortcuts\nexport const isMac = process.platform === 'darwin';\nexport const isLinux = process.platform === 'linux';\nexport const isWindows = process.platform === 'win32';\n\n// Common paths\nexport const configDir = applicationConfigPath('devcert');\nexport const configPath: (...pathSegments: string[]) => string = path.join.bind(path, configDir);\n\nexport const domainsDir = configPath('domains');\nexport const pathForDomain: (domain: string, ...pathSegments: string[]) => string = path.join.bind(path, domainsDir)\n\nexport const caVersionFile = configPath('devcert-ca-version');\nexport const opensslSerialFilePath = configPath('certificate-authority', 'serial');\nexport const opensslDatabaseFilePath = configPath('certificate-authority', 'index.txt');\nexport const caSelfSignConfig = path.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');\n\nexport function withDomainSigningRequestConfig(domain: string, cb: (filepath: string) => void) {\n  let tmpFile = mktmp();\n  let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');\n  let template = makeTemplate(source);\n  let result = template({ domain });\n  writeFile(tmpFile, eol.auto(result));\n  cb(tmpFile);\n  rm(tmpFile);\n}\n\nexport function withDomainCertificateConfig(domain: string, cb: (filepath: string) => void) {\n  let tmpFile = mktmp();\n  let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');\n  let template = makeTemplate(source);\n  let result = template({\n    domain,\n    serialFile: opensslSerialFilePath,\n    databaseFile: opensslDatabaseFilePath,\n    domainDir: pathForDomain(domain)\n  });\n  writeFile(tmpFile, eol.auto(result));\n  cb(tmpFile);\n  rm(tmpFile);\n}\n\n  // confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\\\/g, '\\\\\\\\'));\n  // confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\\\/g, '\\\\\\\\'));\n  // confTemplate = eol.auto(confTemplate);\n\nexport const rootCADir = configPath('certificate-authority');\nexport const rootCAKeyPath = configPath('certificate-authority', 'private-key.key');\nexport const rootCACertPath = configPath('certificate-authority', 'certificate.cert');\n\n\n\n// Exposed for uninstallation purposes.\nexport function getLegacyConfigDir(): string {\n  if (isWindows && process.env.LOCALAPPDATA) {\n    return path.join(process.env.LOCALAPPDATA, 'devcert', 'config');\n  } else {\n    let uid = process.getuid && process.getuid();\n    let userHome = (isLinux && uid === 0) ? path.resolve('/usr/local/share') : require('os').homedir();\n    return path.join(userHome, '.config', 'devcert');\n  }\n}\n\nexport function ensureConfigDirs() {\n  mkdirp(configDir);\n  mkdirp(domainsDir);\n  mkdirp(rootCADir);\n}\n\nensureConfigDirs();\n"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}