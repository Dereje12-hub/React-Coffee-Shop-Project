{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withDefaultBaseMods = withDefaultBaseMods;\nexports.withIntrospectionBaseMods = withIntrospectionBaseMods;\nexports.compileModsAsync = compileModsAsync;\nexports.evalModsAsync = evalModsAsync;\n\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n\n  _errors = function _errors() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Warnings() {\n  var data = _interopRequireWildcard(require(\"../utils/warnings\"));\n\n  Warnings = function Warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withAndroidBaseMods() {\n  var data = require(\"./withAndroidBaseMods\");\n\n  _withAndroidBaseMods = function _withAndroidBaseMods() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withIosBaseMods() {\n  var data = require(\"./withIosBaseMods\");\n\n  _withIosBaseMods = function _withIosBaseMods() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar debug = (0, _debug().default)('config-plugins:mod-compiler');\n\nfunction withDefaultBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, props);\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, props);\n  return config;\n}\n\nfunction withIntrospectionBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n\n  if (config.mods) {\n    for (var _i = 0, _Object$keys = Object.keys(config.mods); _i < _Object$keys.length; _i++) {\n      var platform = _Object$keys[_i];\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(config.mods[platform] || {}); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n\n        var _config$mods$platform, _config$mods$platform2;\n\n        if (!((_config$mods$platform = config.mods[platform]) !== null && _config$mods$platform !== void 0 && (_config$mods$platform2 = _config$mods$platform[key]) !== null && _config$mods$platform2 !== void 0 && _config$mods$platform2.isIntrospective)) {\n          var _config$mods$platform3;\n\n          debug(\"removing non-idempotent mod: \" + platform + \".\" + key);\n          (_config$mods$platform3 = config.mods[platform]) === null || _config$mods$platform3 === void 0 ? true : delete _config$mods$platform3[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\nfunction compileModsAsync(config, props) {\n  return _regeneratorRuntime.async(function compileModsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (props.introspect === true) {\n            config = withIntrospectionBaseMods(config);\n          } else {\n            config = withDefaultBaseMods(config);\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(evalModsAsync(config, props));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction sortMods(commands, order) {\n  var allKeys = commands.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        key = _ref2[0];\n\n    return key;\n  });\n\n  var completeOrder = _toConsumableArray(new Set([].concat(_toConsumableArray(order), _toConsumableArray(allKeys))));\n\n  var sorted = [];\n\n  var _loop = function _loop() {\n    var group = completeOrder.shift();\n    var commandSet = commands.find(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          key = _ref4[0];\n\n      return key === group;\n    });\n\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  };\n\n  while (completeOrder.length) {\n    _loop();\n  }\n\n  return sorted;\n}\n\nvar orders = {\n  ios: ['dangerous', 'xcodeproj'],\n  android: ['dangerous']\n};\n\nfunction evalModsAsync(config, _ref5) {\n  var projectRoot, introspect, platforms, assertMissingModProviders, _i3, _Object$entries, _ref6, _ref7, platformName, platform, _config$mods, entries, platformProjectRoot, projectName, _iterator, _step, _ref10, _ref11, modName, mod, modRequest, errorMessage, results;\n\n  return _regeneratorRuntime.async(function evalModsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          projectRoot = _ref5.projectRoot, introspect = _ref5.introspect, platforms = _ref5.platforms, assertMissingModProviders = _ref5.assertMissingModProviders;\n          _i3 = 0, _Object$entries = Object.entries((_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : {});\n\n        case 2:\n          if (!(_i3 < _Object$entries.length)) {\n            _context2.next = 42;\n            break;\n          }\n\n          _ref6 = _Object$entries[_i3];\n          _ref7 = _slicedToArray(_ref6, 2);\n          platformName = _ref7[0];\n          platform = _ref7[1];\n\n          if (!(platforms && !platforms.includes(platformName))) {\n            _context2.next = 10;\n            break;\n          }\n\n          debug(\"skip platform: \" + platformName);\n          return _context2.abrupt(\"continue\", 39);\n\n        case 10:\n          entries = Object.entries(platform);\n\n          if (!entries.length) {\n            _context2.next = 39;\n            break;\n          }\n\n          entries = sortMods(entries, orders[platformName]);\n          debug(\"run in order: \" + entries.map(function (_ref8) {\n            var _ref9 = _slicedToArray(_ref8, 1),\n                name = _ref9[0];\n\n            return name;\n          }).join(', '));\n          platformProjectRoot = _path().default.join(projectRoot, platformName);\n          projectName = platformName === 'ios' ? (0, _Xcodeproj().getHackyProjectName)(projectRoot, config) : undefined;\n          _iterator = _createForOfIteratorHelperLoose(entries);\n\n        case 17:\n          if ((_step = _iterator()).done) {\n            _context2.next = 39;\n            break;\n          }\n\n          _ref10 = _step.value;\n          _ref11 = _slicedToArray(_ref10, 2);\n          modName = _ref11[0];\n          mod = _ref11[1];\n          modRequest = {\n            projectRoot: projectRoot,\n            projectName: projectName,\n            platformProjectRoot: platformProjectRoot,\n            platform: platformName,\n            modName: modName,\n            introspect: !!introspect\n          };\n\n          if (mod.isProvider) {\n            _context2.next = 31;\n            break;\n          }\n\n          errorMessage = \"Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods\";\n\n          if (!(assertMissingModProviders !== false)) {\n            _context2.next = 29;\n            break;\n          }\n\n          throw new (_errors().PluginError)(errorMessage, 'MISSING_PROVIDER');\n\n        case 29:\n          Warnings().addWarningForPlatform(platformName, platformName + \".\" + modName, \"Skipping: Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.\");\n          return _context2.abrupt(\"continue\", 37);\n\n        case 31:\n          _context2.next = 33;\n          return _regeneratorRuntime.awrap(mod(_objectSpread(_objectSpread({}, config), {}, {\n            modResults: null,\n            modRequest: modRequest\n          })));\n\n        case 33:\n          results = _context2.sent;\n          config = (0, _createBaseMod().assertModResults)(results, platformName, modName);\n          delete config.modResults;\n          delete config.modRequest;\n\n        case 37:\n          _context2.next = 17;\n          break;\n\n        case 39:\n          _i3++;\n          _context2.next = 2;\n          break;\n\n        case 42:\n          return _context2.abrupt(\"return\", config);\n\n        case 43:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/plugins/mod-compiler.ts"],"names":["debug","props","config","saveToInternal","skipEmptyMod","platform","Object","key","withIntrospectionBaseMods","withDefaultBaseMods","evalModsAsync","allKeys","commands","completeOrder","sorted","group","commandSet","orders","ios","android","assertMissingModProviders","platforms","entries","sortMods","platformProjectRoot","path","projectName","platformName","modRequest","projectRoot","modName","introspect","mod","errorMessage","PluginError","Warnings","results","modResults"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAAA,EAAA,MAAA,GAAA,kBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAAA,EAAA,KAAA,GAAA,iBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGA,SAAA,UAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,UAAA,GAAA,sBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,mBAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,uBAAA,CAAA,OAAA,qBAAA,CAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,cAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,mBAAA;;AAAA,EAAA,cAAA,GAAA,0BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,oBAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,yBAAA;;AAAA,EAAA,oBAAA,GAAA,gCAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,gBAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,gBAAA,GAAA,4BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAG,CAAA,GAAA,MAAA,GAAA,OAAA,EAAd,6BAAc,CAAd;;AAEO,SAAA,mBAAA,CAAA,MAAA,EAGW;AAAA,MADhBC,KACgB,uEAHX,EAGW;AAChBC,EAAAA,MAAM,GAAG,CAAA,GAAA,gBAAA,GAAA,eAAA,EAAA,MAAA,EAATA,KAAS,CAATA;AACAA,EAAAA,MAAM,GAAG,CAAA,GAAA,oBAAA,GAAA,mBAAA,EAAA,MAAA,EAATA,KAAS,CAATA;AACA,SAAA,MAAA;AACD;;AAOM,SAAA,yBAAA,CAAA,MAAA,EAGW;AAAA,MADhBD,KACgB,uEAHX,EAGW;AAChBC,EAAAA,MAAM,GAAG,CAAA,GAAA,gBAAA,GAAA,eAAA,EAAA,MAAA;AACPC,IAAAA,cAAc,EADiB,IAAxB;AAIPC,IAAAA,YAAY,EAJmB;AAAxB,KAKJH,KALI,EAATC;AAOAA,EAAAA,MAAM,GAAG,CAAA,GAAA,oBAAA,GAAA,mBAAA,EAAA,MAAA;AACPC,IAAAA,cAAc,EADqB,IAA5B;AAEPC,IAAAA,YAAY,EAFuB;AAA5B,KAGJH,KAHI,EAATC;;AAMA,MAAIA,MAAM,CAAV,IAAA,EAAiB;AAEf,oCAAuBI,MAAM,CAANA,IAAAA,CAAYJ,MAAM,CAAzC,IAAuBI,CAAvB,kCAAkE;AAA7D,UAAMD,QAAX,mBAAK;;AAEH,wCAAkBC,MAAM,CAANA,IAAAA,CAAYJ,MAAM,CAANA,IAAAA,CAAAA,QAAAA,KAA9B,EAAkBI,CAAlB,qCAA4D;AAAvD,YAAMC,GAAX,qBAAK;;AAAuD,YAAA,qBAAA,EAAA,sBAAA;;AAE1D,YAAI,EAAA,CAAA,qBAAA,GAACL,MAAM,CAANA,IAAAA,CAAD,QAACA,CAAD,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAA,CAAA,sBAAA,GAACA,qBAAAA,CAAD,GAACA,CAAD,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,IAACA,sBAAAA,CAAL,eAAI,CAAJ,EAAoD;AAAA,cAAA,sBAAA;;AAClDF,UAAAA,KAAK,mCAAiCK,QAAjC,SAD6C,GAC7C,CAALL;AAEA,WAAA,sBAAA,GAAOE,MAAM,CAANA,IAAAA,CAAP,QAAOA,CAAP,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,OAAOA,sBAAAA,CAAP,GAAOA,CAAP;AACD;AACF;AACF;AACF;;AAED,SAAA,MAAA;AACD;;AAOM,SAAA,gBAAA,CAAA,MAAA,EAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AASL,cAAID,KAAK,CAALA,UAAAA,KAAJ,IAAA,EAA+B;AAC7BC,YAAAA,MAAM,GAAGM,yBAAyB,CAAlCN,MAAkC,CAAlCA;AADF,WAAA,MAEO;AACLA,YAAAA,MAAM,GAAGO,mBAAmB,CAA5BP,MAA4B,CAA5BA;AACD;;AAbI;AAAA,2CAcQQ,aAAa,CAAA,MAAA,EAA1B,KAA0B,CAdrB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBP,SAAA,QAAA,CAAA,QAAA,EAAA,KAAA,EAA+E;AAC7E,MAAMC,OAAO,GAAGC,QAAQ,CAARA,GAAAA,CAAa;AAAA;AAAA,QAAA,GAAA;;AAAA,WAA7B,GAA6B;AAAA,GAAbA,CAAhB;;AACA,MAAMC,aAAa,sBAAO,IAAA,GAAA,8BAAQ,KAAR,sBAA1B,OAA0B,GAAP,CAAnB;;AACA,MAAMC,MAAuB,GAA7B,EAAA;;AAH6E;AAK3E,QAAMC,KAAK,GAAGF,aAAa,CAA3B,KAAcA,EAAd;AACA,QAAMG,UAAU,GAAGJ,QAAQ,CAARA,IAAAA,CAAc;AAAA;AAAA,UAAA,GAAA;;AAAA,aAAWL,GAAG,KAA/C,KAAiC;AAAA,KAAdK,CAAnB;;AACA,QAAA,UAAA,EAAgB;AACdE,MAAAA,MAAM,CAANA,IAAAA,CAAAA,UAAAA;AACD;AAT0E;;AAI7E,SAAOD,aAAa,CAApB,MAAA,EAA6B;AAAA;AAM5B;;AACD,SAAA,MAAA;AACD;;AAED,IAAMI,MAAgC,GAAG;AACvCC,EAAAA,GAAG,EAAE,CAAA,WAAA,EADkC,WAClC,CADkC;AAOvCC,EAAAA,OAAO,EAAE,CAAA,WAAA;AAP8B,CAAzC;;AAcO,SAAA,aAAA,CAAA,MAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEL,UAAA,WAFK,SAEL,WAFK,EAEL,UAFK,SAEL,UAFK,EAEL,SAFK,SAEL,SAFK,EAUHC,yBAVG,SAUHA,yBAVG;AAAA,qCAkBkCd,MAAM,CAANA,OAAAA,CAAAA,CAAAA,YAAAA,GAAeJ,MAAM,CAArBI,IAAAA,MAAAA,IAAAA,IAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAAA,GAAvC,EAAuCA,CAlBlC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkBM,UAAA,YAlBN;AAkBL,UAAA,QAlBK;;AAAA,gBAmBCe,SAAS,IAAI,CAACA,SAAS,CAATA,QAAAA,CAAlB,YAAkBA,CAnBf;AAAA;AAAA;AAAA;;AAoBDrB,UAAAA,KAAK,qBAALA,YAAK,CAALA;AApBC;;AAAA;AAwBCsB,UAAAA,OAxBD,GAwBWhB,MAAM,CAANA,OAAAA,CAAd,QAAcA,CAxBX;;AAAA,eAyBCgB,OAAO,CAAX,MAzBG;AAAA;AAAA;AAAA;;AA2BDA,UAAAA,OAAO,GAAGC,QAAQ,CAAA,OAAA,EAAUN,MAAM,CAAlCK,YAAkC,CAAhB,CAAlBA;AACAtB,UAAAA,KAAK,oBAAkBsB,OAAO,CAAPA,GAAAA,CAAY;AAAA;AAAA,gBAAA,IAAA;;AAAA,mBAAZA,IAAY;AAAA,WAAZA,EAAAA,IAAAA,CAAvBtB,IAAuBsB,CAAlB,CAALtB;AACMwB,UAAAA,mBA7BL,GA6B2BC,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAA5B,YAA4BA,CA7B3B;AA8BKC,UAAAA,WA9BL,GA+BCC,YAAY,KAAZA,KAAAA,GAAyB,CAAA,GAAA,UAAA,GAAA,mBAAA,EAAA,WAAA,EAAzBA,MAAyB,CAAzBA,GADF,SA9BC;AAAA,sDAiCD,OAjCC;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiCU,UAAA,OAjCV;AAiCD,UAAA,GAjCC;AAkCOC,UAAAA,UAlCP,GAkCoB;AACjBC,YAAAA,WADiB,EACjBA,WADiB;AAEjBH,YAAAA,WAFiB,EAEjBA,WAFiB;AAGjBF,YAAAA,mBAHiB,EAGjBA,mBAHiB;AAIjBnB,YAAAA,QAAQ,EAJS,YAAA;AAKjByB,YAAAA,OALiB,EAKjBA,OALiB;AAMjBC,YAAAA,UAAU,EAAE,CAAC,CAACA;AANG,WAlCpB;;AAAA,cA2COC,GAAD,CAAL,UA3CD;AAAA;AAAA;AAAA;;AA6CSC,UAAAA,YA7CT,oCA6CsDN,YA7CtD,SA6CG,OA7CH;;AAAA,gBA8COP,yBAAyB,KAA7B,KA9CH;AAAA;AAAA;AAAA;;AAAA,gBA+CW,KAAIc,OAAAA,GAAJ,WAAA,EAAA,YAAA,EAAN,kBAAM,CA/CX;;AAAA;AAiDKC,UAAAA,QAAQ,GAARA,qBAAAA,CAAAA,YAAAA,EAEKR,YAFLQ,SAAAA,OAAAA,6CAG0CR,YAH1CQ,SADK,OACLA;AAjDL;;AAAA;AAAA;AAAA,2CA2DwBH,GAAD,iCAAa,MAAb;AAEpBK,YAAAA,UAAU,EAFuB,IAAb;AAGpBT,YAAAA,UAAAA,EAAAA;AAHoB,aA3DvB;;AAAA;AA2DOQ,UAAAA,OA3DP;AAkEClC,UAAAA,MAAM,GAAG,CAAA,GAAA,cAAA,GAAA,gBAAA,EAAA,OAAA,EAAA,YAAA,EAjC2B,OAiC3B,CAATA;AAEA,iBAAOA,MAAM,CAnCuB,UAmCpC;AAEA,iBAAOA,MAAM,CAAb,UAAA;;AAtED;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,4CA2EL,MA3EK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { withAndroidBaseMods } from './withAndroidBaseMods';\nimport { withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, {\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      // const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        // @ts-ignore\n        if (!config.mods[platform]?.[key]?.isIntrospective) {\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          // @ts-ignore\n          delete config.mods[platform]?.[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: data is added for modifications\n        delete config.modResults;\n        // @ts-ignore: info is added for modifications\n        delete config.modRequest;\n      }\n    }\n  }\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"script"}