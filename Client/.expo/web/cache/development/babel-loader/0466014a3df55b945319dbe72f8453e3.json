{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"ITSAppUsesNonExemptEncryption\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUsesNonExemptEncryption = getUsesNonExemptEncryption;\nexports.setUsesNonExemptEncryption = setUsesNonExemptEncryption;\nexports.withUsesNonExemptEncryption = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withUsesNonExemptEncryption = (0, _iosPlugins().createInfoPlistPlugin)(setUsesNonExemptEncryption, 'withUsesNonExemptEncryption');\nexports.withUsesNonExemptEncryption = withUsesNonExemptEncryption;\n\nfunction getUsesNonExemptEncryption(config) {\n  var _config$ios$config$us, _config$ios, _config$ios$config;\n\n  return (_config$ios$config$us = config === null || config === void 0 ? void 0 : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.usesNonExemptEncryption) !== null && _config$ios$config$us !== void 0 ? _config$ios$config$us : null;\n}\n\nfunction setUsesNonExemptEncryption(config, _ref) {\n  var ITSAppUsesNonExemptEncryption = _ref.ITSAppUsesNonExemptEncryption,\n      infoPlist = _objectWithoutProperties(_ref, _excluded);\n\n  var usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption\n  });\n}","map":{"version":3,"sources":["../../src/ios/UsesNonExemptEncryption.ts"],"names":["withUsesNonExemptEncryption","config","infoPlist","usesNonExemptEncryption","getUsesNonExemptEncryption","ITSAppUsesNonExemptEncryption"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,IAAMA,2BAA2B,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,0BAAA,EAApC,6BAAoC,CAApC;;;AAKA,SAAA,0BAAA,CAAA,MAAA,EAAqE;AAAA,MAAA,qBAAA,EAAA,WAAA,EAAA,kBAAA;;AAC1E,SAAA,CAAA,qBAAA,GAAOC,MAAP,KAAA,IAAOA,IAAAA,MAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAP,CAAA,WAAA,GAAOA,MAAM,CAAb,GAAA,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,kBAAA,GAAOA,WAAAA,CAAP,MAAA,MAAA,IAAA,IAAA,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,kBAAAA,CAAP,uBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,IAAA;AACD;;AAEM,SAAA,0BAAA,CAAA,MAAA,QAGM;AAAA,MADX,6BACW,QADX,6BACW;AAAA,MADyBC,SACzB;;AACX,MAAMC,uBAAuB,GAAGC,0BAA0B,CAD/C,MAC+C,CAA1D;;AAGA,MAAID,uBAAuB,KAA3B,IAAA,EAAsC;AACpC,WAAA,SAAA;AACD;;AAED,yCAAO,SAAP;AAEEE,IAAAA,6BAA6B,EAAEF;AAFjC;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withUsesNonExemptEncryption = createInfoPlistPlugin(\n  setUsesNonExemptEncryption,\n  'withUsesNonExemptEncryption'\n);\n\nexport function getUsesNonExemptEncryption(config: Pick<ExpoConfig, 'ios'>) {\n  return config?.ios?.config?.usesNonExemptEncryption ?? null;\n}\n\nexport function setUsesNonExemptEncryption(\n  config: Pick<ExpoConfig, 'ios'>,\n  { ITSAppUsesNonExemptEncryption, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const usesNonExemptEncryption = getUsesNonExemptEncryption(config);\n\n  // Make no changes if the key is left blank\n  if (usesNonExemptEncryption === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    ITSAppUsesNonExemptEncryption: usesNonExemptEncryption,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}