{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commander() {\n  var data = _interopRequireDefault(require(\"commander\"));\n\n  _commander = function _commander() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getenv() {\n  var data = require(\"getenv\");\n\n  _getenv = function _getenv() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _terminalLink() {\n  var data = _interopRequireDefault(require(\"terminal-link\"));\n\n  _terminalLink = function _terminalLink() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar isProfiling = (0, _getenv().boolish)('EXPO_PROFILE', false);\nvar consoleTime = isProfiling ? console.time : function () {};\nvar consoleTimeEnd = isProfiling ? console.timeEnd : function () {};\n\nvar Log = function () {\n  function Log() {\n    _classCallCheck(this, Log);\n  }\n\n  _createClass(Log, null, [{\n    key: \"log\",\n    value: function log() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleLog.apply(Log, _toConsumableArray(Log.withPrefix(args)));\n      });\n    }\n  }, {\n    key: \"nested\",\n    value: function nested(message) {\n      Log.respectProgressBars(function () {\n        Log.consoleLog(message);\n      });\n    }\n  }, {\n    key: \"newLine\",\n    value: function newLine() {\n      Log.respectProgressBars(function () {\n        Log.consoleLog();\n      });\n    }\n  }, {\n    key: \"addNewLineIfNone\",\n    value: function addNewLineIfNone() {\n      if (!Log._isLastLineNewLine && !Log._printNewLineBeforeNextLog) {\n        Log.newLine();\n      }\n    }\n  }, {\n    key: \"printNewLineBeforeNextLog\",\n    value: function printNewLineBeforeNextLog() {\n      Log._printNewLineBeforeNextLog = true;\n    }\n  }, {\n    key: \"setBundleProgressBar\",\n    value: function setBundleProgressBar(bar) {\n      Log._bundleProgressBar = bar;\n    }\n  }, {\n    key: \"setSpinner\",\n    value: function setSpinner(oraSpinner) {\n      Log._oraSpinner = oraSpinner;\n\n      if (oraSpinner && !oraSpinner.__modified) {\n        oraSpinner.__modified = true;\n        var originalStart = oraSpinner.start.bind(oraSpinner);\n\n        oraSpinner.start = function (text) {\n          Log._isLastLineNewLine = false;\n          Log.setSpinner(this);\n          return originalStart(text);\n        };\n\n        var originalStop = oraSpinner.stop.bind(oraSpinner);\n\n        oraSpinner.stop = function () {\n          Log.setSpinner(null);\n          return originalStop();\n        };\n      }\n    }\n  }, {\n    key: \"getSpinner\",\n    value: function getSpinner() {\n      return Log._oraSpinner || null;\n    }\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      return Log._bundleProgressBar || null;\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleError.apply(Log, _toConsumableArray(Log.withPrefixAndTextColor(args, _chalk().default.red)));\n      });\n    }\n  }, {\n    key: \"nestedError\",\n    value: function nestedError(message) {\n      Log.respectProgressBars(function () {\n        Log.consoleError(_chalk().default.red(message));\n      });\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleWarn.apply(Log, _toConsumableArray(Log.withPrefixAndTextColor(args, _chalk().default.yellow)));\n      });\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      if (!Log.isDebug) {\n        return;\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleDebug.apply(Log, _toConsumableArray(Log.withPrefixAndTextColor(args)));\n      });\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleInfo.apply(Log, args);\n      });\n    }\n  }, {\n    key: \"nestedWarn\",\n    value: function nestedWarn(message) {\n      Log.respectProgressBars(function () {\n        Log.consoleWarn(_chalk().default.yellow(message));\n      });\n    }\n  }, {\n    key: \"gray\",\n    value: function gray() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      Log.respectProgressBars(function () {\n        Log.consoleLog.apply(Log, _toConsumableArray(Log.withPrefixAndTextColor(args)));\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      process.stdout.write(process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H');\n    }\n  }, {\n    key: \"_updateIsLastLineNewLine\",\n    value: function _updateIsLastLineNewLine(args) {\n      if (args.length === 0) {\n        Log._isLastLineNewLine = true;\n      } else {\n        var lastArg = args[args.length - 1];\n\n        if (typeof lastArg === 'string' && (lastArg === '' || lastArg.match(/[\\r\\n]$/))) {\n          Log._isLastLineNewLine = true;\n        } else {\n          Log._isLastLineNewLine = false;\n        }\n      }\n    }\n  }, {\n    key: \"_maybePrintNewLine\",\n    value: function _maybePrintNewLine() {\n      if (Log._printNewLineBeforeNextLog) {\n        Log._printNewLineBeforeNextLog = false;\n        console.log();\n      }\n    }\n  }, {\n    key: \"consoleDebug\",\n    value: function consoleDebug() {\n      var _console;\n\n      Log._maybePrintNewLine();\n\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      Log._updateIsLastLineNewLine(args);\n\n      (_console = console).debug.apply(_console, args);\n    }\n  }, {\n    key: \"consoleInfo\",\n    value: function consoleInfo() {\n      var _console2;\n\n      Log._maybePrintNewLine();\n\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n\n      Log._updateIsLastLineNewLine(args);\n\n      (_console2 = console).info.apply(_console2, args);\n    }\n  }, {\n    key: \"consoleLog\",\n    value: function consoleLog() {\n      var _console3;\n\n      Log._maybePrintNewLine();\n\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n\n      Log._updateIsLastLineNewLine(args);\n\n      (_console3 = console).log.apply(_console3, args);\n    }\n  }, {\n    key: \"consoleWarn\",\n    value: function consoleWarn() {\n      var _console4;\n\n      Log._maybePrintNewLine();\n\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      Log._updateIsLastLineNewLine(args);\n\n      (_console4 = console).warn.apply(_console4, args);\n    }\n  }, {\n    key: \"consoleError\",\n    value: function consoleError() {\n      var _console5;\n\n      Log._maybePrintNewLine();\n\n      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n\n      Log._updateIsLastLineNewLine(args);\n\n      (_console5 = console).error.apply(_console5, args);\n    }\n  }, {\n    key: \"respectProgressBars\",\n    value: function respectProgressBars(commitLogs) {\n      var progressBar = Log._bundleProgressBar;\n\n      if (progressBar) {\n        if (progressBar.complete) {\n          Log.setBundleProgressBar(null);\n          progressBar = null;\n        } else if ('stream' in progressBar) {\n          var _progressBar$stream, _progressBar$stream$c, _progressBar$stream2, _progressBar$stream2$;\n\n          (_progressBar$stream = progressBar.stream) === null || _progressBar$stream === void 0 ? void 0 : (_progressBar$stream$c = _progressBar$stream.clearLine) === null || _progressBar$stream$c === void 0 ? void 0 : _progressBar$stream$c.call(_progressBar$stream);\n          (_progressBar$stream2 = progressBar.stream) === null || _progressBar$stream2 === void 0 ? void 0 : (_progressBar$stream2$ = _progressBar$stream2.cursorTo) === null || _progressBar$stream2$ === void 0 ? void 0 : _progressBar$stream2$.call(_progressBar$stream2, 0);\n        }\n      }\n\n      var spinner = Log._oraSpinner;\n      var isSpinning = spinner === null || spinner === void 0 ? void 0 : spinner.isSpinning;\n      var frameIndex = (spinner === null || spinner === void 0 ? void 0 : spinner.frameIndex) || 0;\n\n      if (spinner && isSpinning) {\n        spinner.stop();\n      }\n\n      commitLogs();\n\n      if (progressBar) {\n        progressBar.render();\n      }\n\n      if (spinner && isSpinning) {\n        spinner.frameIndex = frameIndex;\n        spinner.start();\n        spinner.render();\n      }\n    }\n  }, {\n    key: \"getPrefix\",\n    value: function getPrefix(chalkColor) {\n      return chalkColor(\"[\" + new Date().toTimeString().slice(0, 8) + \"]\");\n    }\n  }, {\n    key: \"withPrefixAndTextColor\",\n    value: function withPrefixAndTextColor(args) {\n      var chalkColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _chalk().default.gray;\n\n      if (_commander().default.nonInteractive) {\n        return [Log.getPrefix(chalkColor)].concat(_toConsumableArray(args.map(function (arg) {\n          return chalkColor(arg);\n        })));\n      } else {\n        return args.map(function (arg) {\n          return chalkColor(arg);\n        });\n      }\n    }\n  }, {\n    key: \"withPrefix\",\n    value: function withPrefix(args) {\n      var chalkColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _chalk().default.gray;\n\n      if (_commander().default.nonInteractive) {\n        return [Log.getPrefix(chalkColor)].concat(_toConsumableArray(args));\n      } else {\n        return args;\n      }\n    }\n  }]);\n\n  return Log;\n}();\n\nexports.default = Log;\n\n_defineProperty(Log, \"chalk\", _chalk().default);\n\n_defineProperty(Log, \"terminalLink\", _terminalLink().default);\n\n_defineProperty(Log, \"isDebug\", (0, _getenv().boolish)('EXPO_DEBUG', false));\n\n_defineProperty(Log, \"isProfiling\", isProfiling);\n\n_defineProperty(Log, \"time\", consoleTime);\n\n_defineProperty(Log, \"timeEnd\", consoleTimeEnd);\n\n_defineProperty(Log, \"_bundleProgressBar\", void 0);\n\n_defineProperty(Log, \"_oraSpinner\", void 0);\n\n_defineProperty(Log, \"_printNewLineBeforeNextLog\", false);\n\n_defineProperty(Log, \"_isLastLineNewLine\", false);","map":{"version":3,"sources":["../src/log.ts"],"names":["isProfiling","consoleTime","console","consoleTimeEnd","Log","chalk","terminalLink","log","nested","newLine","addNewLineIfNone","printNewLineBeforeNextLog","setBundleProgressBar","setSpinner","oraSpinner","originalStart","originalStop","getSpinner","getProgress","error","nestedError","warn","debug","info","nestedWarn","gray","clear","process","_updateIsLastLineNewLine","args","lastArg","_maybePrintNewLine","consoleDebug","consoleInfo","consoleLog","consoleWarn","consoleError","respectProgressBars","progressBar","spinner","isSpinning","frameIndex","commitLogs","getPrefix","chalkColor","withPrefixAndTextColor","program","arg","withPrefix"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport { boolish } from 'getenv';\nimport type { Ora } from 'ora';\nimport type ProgressBar from 'progress';\nimport terminalLink from 'terminal-link';\n\ntype Color = (...text: string[]) => string;\n\nconst isProfiling = boolish('EXPO_PROFILE', false);\n\n// eslint-disable-next-line no-console\nconst consoleTime: (label?: string) => void = isProfiling ? console.time : () => {};\n// eslint-disable-next-line no-console\nconst consoleTimeEnd: (label?: string) => void = isProfiling ? console.timeEnd : () => {};\n\nexport default class Log {\n  public static readonly chalk = chalk;\n  public static readonly terminalLink = terminalLink;\n  public static readonly isDebug = boolish('EXPO_DEBUG', false);\n  public static readonly isProfiling = isProfiling;\n\n  public static log(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(...Log.withPrefix(args));\n    });\n  }\n\n  public static nested(message: any) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(message);\n    });\n  }\n\n  public static time = consoleTime;\n\n  public static timeEnd = consoleTimeEnd;\n\n  public static newLine() {\n    Log.respectProgressBars(() => {\n      Log.consoleLog();\n    });\n  }\n\n  public static addNewLineIfNone() {\n    if (!Log._isLastLineNewLine && !Log._printNewLineBeforeNextLog) {\n      Log.newLine();\n    }\n  }\n\n  public static printNewLineBeforeNextLog() {\n    Log._printNewLineBeforeNextLog = true;\n  }\n\n  public static setBundleProgressBar(bar: ProgressBar | null) {\n    Log._bundleProgressBar = bar;\n  }\n\n  public static setSpinner(oraSpinner: (Ora & { __modified?: boolean }) | null) {\n    Log._oraSpinner = oraSpinner;\n    if (oraSpinner && !oraSpinner.__modified) {\n      oraSpinner.__modified = true;\n      const originalStart = oraSpinner.start.bind(oraSpinner);\n      oraSpinner.start = function (text: any) {\n        // Reset the new line tracker\n        Log._isLastLineNewLine = false;\n        // Ensure we set the observable spinner to this because it is animating.\n        Log.setSpinner(this);\n        return originalStart(text);\n      };\n      // All other methods of stopping will invoke the stop method.\n      const originalStop = oraSpinner.stop.bind(oraSpinner);\n      oraSpinner.stop = () => {\n        // Reset the target spinner\n        Log.setSpinner(null);\n        return originalStop();\n      };\n    }\n  }\n\n  public static getSpinner() {\n    return Log._oraSpinner || null;\n  }\n\n  public static getProgress() {\n    return Log._bundleProgressBar || null;\n  }\n\n  public static error(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleError(...Log.withPrefixAndTextColor(args, chalk.red));\n    });\n  }\n\n  public static nestedError(message: string) {\n    Log.respectProgressBars(() => {\n      Log.consoleError(chalk.red(message));\n    });\n  }\n\n  public static warn(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleWarn(...Log.withPrefixAndTextColor(args, chalk.yellow));\n    });\n  }\n\n  // Only show these logs when EXPO_DEBUG is active\n  public static debug(...args: any[]) {\n    if (!Log.isDebug) {\n      return;\n    }\n    Log.respectProgressBars(() => {\n      Log.consoleDebug(...Log.withPrefixAndTextColor(args));\n    });\n  }\n\n  public static info(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleInfo(...args);\n    });\n  }\n\n  public static nestedWarn(message: string) {\n    Log.respectProgressBars(() => {\n      Log.consoleWarn(chalk.yellow(message));\n    });\n  }\n\n  public static gray(...args: any[]) {\n    Log.respectProgressBars(() => {\n      Log.consoleLog(...Log.withPrefixAndTextColor(args));\n    });\n  }\n\n  public static clear() {\n    process.stdout.write(process.platform === 'win32' ? '\\x1B[2J\\x1B[0f' : '\\x1B[2J\\x1B[3J\\x1B[H');\n  }\n\n  private static _bundleProgressBar: ProgressBar | null;\n  private static _oraSpinner: Ora | null;\n\n  private static _printNewLineBeforeNextLog = false;\n  private static _isLastLineNewLine = false;\n  private static _updateIsLastLineNewLine(args: any[]) {\n    if (args.length === 0) {\n      Log._isLastLineNewLine = true;\n    } else {\n      const lastArg = args[args.length - 1];\n      if (typeof lastArg === 'string' && (lastArg === '' || lastArg.match(/[\\r\\n]$/))) {\n        Log._isLastLineNewLine = true;\n      } else {\n        Log._isLastLineNewLine = false;\n      }\n    }\n  }\n\n  private static _maybePrintNewLine() {\n    if (Log._printNewLineBeforeNextLog) {\n      Log._printNewLineBeforeNextLog = false;\n      console.log(); // eslint-disable-line no-console\n    }\n  }\n\n  private static consoleDebug(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.debug(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleInfo(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.info(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleLog(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.log(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleWarn(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.warn(...args); // eslint-disable-line no-console\n  }\n\n  private static consoleError(...args: any[]) {\n    Log._maybePrintNewLine();\n    Log._updateIsLastLineNewLine(args);\n\n    console.error(...args); // eslint-disable-line no-console\n  }\n\n  private static respectProgressBars(commitLogs: () => void) {\n    let progressBar = Log._bundleProgressBar;\n\n    if (progressBar) {\n      // Automatically unmount the bar if it's complete\n      if (progressBar.complete) {\n        Log.setBundleProgressBar(null);\n        progressBar = null;\n      } else if ('stream' in progressBar) {\n        // @ts-ignore\n        progressBar.stream?.clearLine?.();\n        // @ts-ignore\n        progressBar.stream?.cursorTo?.(0);\n      }\n    }\n\n    const spinner = Log._oraSpinner;\n    const isSpinning = spinner?.isSpinning;\n    // Store the index, before stopping for later.\n    const frameIndex: number = (spinner as any)?.frameIndex || 0;\n    if (spinner && isSpinning) {\n      spinner.stop();\n    }\n    commitLogs();\n\n    if (progressBar) {\n      progressBar.render();\n    }\n    // Only restart the spinner if it was spinning to begin with, this\n    // prevents us from accidentally starting a paused spinner.\n    if (spinner && isSpinning) {\n      // Stopping the spinner causes the frameIndex to be set to 0, we want to set it to what it was before we reset it so it continues to animate as expected.\n      // @ts-ignore\n      spinner.frameIndex = frameIndex;\n      spinner.start();\n      spinner.render();\n    }\n  }\n\n  private static getPrefix(chalkColor: Color) {\n    return chalkColor(`[${new Date().toTimeString().slice(0, 8)}]`);\n  }\n\n  private static withPrefixAndTextColor(args: any[], chalkColor: Color = chalk.gray) {\n    if (program.nonInteractive) {\n      return [Log.getPrefix(chalkColor), ...args.map(arg => chalkColor(arg))];\n    } else {\n      return args.map(arg => chalkColor(arg));\n    }\n  }\n\n  private static withPrefix(args: any[], chalkColor = chalk.gray) {\n    if (program.nonInteractive) {\n      return [Log.getPrefix(chalkColor), ...args];\n    } else {\n      return args;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}