{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.replaceMiddlewareWith = exports.prependMiddleware = void 0;\n\nfunction prependMiddleware(app, middleware) {\n  app.use(middleware);\n  app.stack.unshift(app.stack.pop());\n}\n\nexports.prependMiddleware = prependMiddleware;\n\nfunction replaceMiddlewareWith(app, sourceMiddleware, targetMiddleware) {\n  var item = app.stack.find(function (middleware) {\n    return middleware.handle === sourceMiddleware;\n  });\n\n  if (item) {\n    item.handle = targetMiddleware;\n  }\n}\n\nexports.replaceMiddlewareWith = replaceMiddlewareWith;","map":{"version":3,"sources":["../src/middlwareMutations.ts"],"names":[],"mappings":";;;;;;;AAQA,SAAgB,iBAAhB,CAAkC,GAAlC,EAAsD,UAAtD,EAAgF;AAC9E,EAAA,GAAG,CAAC,GAAJ,CAAQ,UAAR;AACA,EAAA,GAAG,CAAC,KAAJ,CAAU,OAAV,CAAkB,GAAG,CAAC,KAAJ,CAAU,GAAV,EAAlB;AACD;;AAHD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAYA,SAAgB,qBAAhB,CACE,GADF,EAEE,gBAFF,EAGE,gBAHF,EAGkC;AAEhC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAJ,CAAU,IAAV,CAAe,UAAA,UAAU;AAAA,WAAI,UAAU,CAAC,MAAX,KAAsB,gBAA1B;AAAA,GAAzB,CAAb;;AACA,MAAI,IAAJ,EAAU;AACR,IAAA,IAAI,CAAC,MAAL,GAAc,gBAAd;AACD;AACF;;AATD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourcesContent":["import type { Server as ConnectServer, HandleFunction } from 'connect';\n\n/**\n * Prepends a `middleware` to current server middleware stack.\n *\n * @param app connect app server instance\n * @param middleware target middleware to be prepended\n */\nexport function prependMiddleware(app: ConnectServer, middleware: HandleFunction) {\n  app.use(middleware);\n  app.stack.unshift(app.stack.pop()!);\n}\n\n/**\n * Replaces source middleware with a new middlware in connect app\n *\n * @param app connect app server instance\n * @param sourceMiddleware source middlware to be matched and replaces\n * @param targetMiddleware new middlware\n */\nexport function replaceMiddlewareWith(\n  app: ConnectServer,\n  sourceMiddleware: HandleFunction,\n  targetMiddleware: HandleFunction\n) {\n  const item = app.stack.find(middleware => middleware.handle === sourceMiddleware);\n  if (item) {\n    item.handle = targetMiddleware;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}