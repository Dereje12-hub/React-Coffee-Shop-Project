{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\n\nvar url_1 = tslib_1.__importDefault(require(\"url\"));\n\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\n\nvar assert_1 = tslib_1.__importDefault(require(\"assert\"));\n\nvar get_port_1 = tslib_1.__importDefault(require(\"get-port\"));\n\nvar http_1 = tslib_1.__importDefault(require(\"http\"));\n\nvar glob_1 = require(\"glob\");\n\nvar fs_1 = require(\"fs\");\n\nvar utils_1 = require(\"../utils\");\n\nvar constants_1 = require(\"../constants\");\n\nvar user_interface_1 = tslib_1.__importDefault(require(\"../user-interface\"));\n\nvar child_process_1 = require(\"child_process\");\n\nvar debug = debug_1.default('devcert:platforms:shared');\n\nfunction doForNSSCertDB(nssDirGlob, callback) {\n  glob_1.sync(nssDirGlob).forEach(function (potentialNSSDBDir) {\n    debug(\"checking to see if \" + potentialNSSDBDir + \" is a valid NSS database directory\");\n\n    if (fs_1.existsSync(path_1.default.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(\"Found legacy NSS database in \" + potentialNSSDBDir + \", running callback...\");\n      callback(potentialNSSDBDir, 'legacy');\n    }\n\n    if (fs_1.existsSync(path_1.default.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(\"Found modern NSS database in \" + potentialNSSDBDir + \", running callback...\");\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\n\nfunction addCertificateToNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(\"trying to install certificate into NSS databases in \" + nssDirGlob);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? \"sql:\" + dir : dir;\n    utils_1.run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(\"finished scanning & installing certificate in NSS databases in \" + nssDirGlob);\n}\n\nexports.addCertificateToNSSCertDB = addCertificateToNSSCertDB;\n\nfunction removeCertificateFromNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(\"trying to remove certificates from NSS databases in \" + nssDirGlob);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? \"sql:\" + dir : dir;\n\n    try {\n      utils_1.run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(\"failed to remove \" + certPath + \" from \" + dir + \", continuing. \" + e.toString());\n    }\n  });\n  debug(\"finished scanning & installing certificate in NSS databases in \" + nssDirGlob);\n}\n\nexports.removeCertificateFromNSSCertDB = removeCertificateFromNSSCertDB;\n\nfunction closeFirefox() {\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isFirefoxOpen()) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 3;\n            return user_interface_1.default.closeFirefoxBeforeContinuing();\n\n          case 3:\n            if (!isFirefoxOpen()) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 6;\n            return sleep(50);\n\n          case 6:\n            _context.next = 3;\n            break;\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.closeFirefox = closeFirefox;\n\nfunction isFirefoxOpen() {\n  assert_1.default(constants_1.isMac || constants_1.isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return child_process_1.execSync('ps aux').indexOf('firefox') > -1;\n}\n\nfunction sleep(ms) {\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              return setTimeout(resolve, ms);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction openCertificateInFirefox(firefoxPath, certPath) {\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee4() {\n    var _this = this;\n\n    var port, server;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n            _context4.next = 3;\n            return get_port_1.default();\n\n          case 3:\n            port = _context4.sent;\n            server = http_1.default.createServer(function (req, res) {\n              return tslib_1.__awaiter(_this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n                var _url_1$default$parse, pathname;\n\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _url_1$default$parse = url_1.default.parse(req.url), pathname = _url_1$default$parse.pathname;\n\n                        if (!(pathname === '/certificate')) {\n                          _context3.next = 7;\n                          break;\n                        }\n\n                        res.writeHead(200, {\n                          'Content-type': 'application/x-x509-ca-cert'\n                        });\n                        res.write(fs_1.readFileSync(certPath));\n                        res.end();\n                        _context3.next = 14;\n                        break;\n\n                      case 7:\n                        res.writeHead(200);\n                        _context3.t0 = res;\n                        _context3.next = 11;\n                        return user_interface_1.default.firefoxWizardPromptPage(\"http://localhost:\" + port + \"/certificate\");\n\n                      case 11:\n                        _context3.t1 = _context3.sent;\n\n                        _context3.t0.write.call(_context3.t0, _context3.t1);\n\n                        res.end();\n\n                      case 14:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n            }).listen(port);\n            debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n            _context4.next = 8;\n            return user_interface_1.default.startFirefoxWizard(\"http://localhost:\" + port);\n\n          case 8:\n            utils_1.run(firefoxPath, [\"http://localhost:\" + port]);\n            _context4.next = 11;\n            return user_interface_1.default.waitForFirefoxWizard();\n\n          case 11:\n            server.close();\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.openCertificateInFirefox = openCertificateInFirefox;\n\nfunction assertNotTouchingFiles(filepath, operation) {\n  if (!filepath.startsWith(constants_1.configDir) && !filepath.startsWith(constants_1.getLegacyConfigDir())) {\n    throw new Error(\"Devcert cannot \" + operation + \" \" + filepath + \"; it is outside known devcert config directories!\");\n  }\n}\n\nexports.assertNotTouchingFiles = assertNotTouchingFiles;","map":{"version":3,"sources":["platforms/shared.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport url from 'url';\nimport createDebug from 'debug';\nimport assert from 'assert';\nimport getPort from 'get-port';\nimport http from 'http';\nimport { sync as glob } from 'glob';\nimport { readFileSync as readFile, existsSync as exists } from 'fs';\nimport { run } from '../utils';\nimport { isMac, isLinux , configDir, getLegacyConfigDir } from '../constants';\nimport UI from '../user-interface';\nimport { execSync as exec } from 'child_process';\n\nconst debug = createDebug('devcert:platforms:shared');\n\n/**\n *  Given a directory or glob pattern of directories, run a callback for each db\n *  directory, with a version argument.\n */\nfunction doForNSSCertDB(nssDirGlob: string, callback: (dir: string, version: \"legacy\" | \"modern\") => void): void {\n  glob(nssDirGlob).forEach((potentialNSSDBDir) => {\n    debug(`checking to see if ${ potentialNSSDBDir } is a valid NSS database directory`);\n    if (exists(path.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(`Found legacy NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'legacy');\n    }\n    if (exists(path.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(`Found modern NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\n\n/**\n *  Given a directory or glob pattern of directories, attempt to install the\n *  CA certificate to each directory containing an NSS database.\n */\nexport function addCertificateToNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to install certificate into NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\nexport function removeCertificateFromNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to remove certificates from NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n    try {\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${ certPath } from ${ dir }, continuing. ${ e.toString() }`)\n    }\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\n/**\n *  Check to see if Firefox is still running, and if so, ask the user to close\n *  it. Poll until it's closed, then return.\n *\n * This is needed because Firefox appears to load the NSS database in-memory on\n * startup, and overwrite on exit. So we have to ask the user to quite Firefox\n * first so our changes don't get overwritten.\n */\nexport async function closeFirefox(): Promise<void> {\n  if (isFirefoxOpen()) {\n    await UI.closeFirefoxBeforeContinuing();\n    while(isFirefoxOpen()) {\n      await sleep(50);\n    }\n  }\n}\n\n/**\n * Check if Firefox is currently open\n */\nfunction isFirefoxOpen() {\n  // NOTE: We use some Windows-unfriendly methods here (ps) because Windows\n  // never needs to check this, because it doesn't update the NSS DB\n  // automaticaly.\n  assert(isMac || isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return exec('ps aux').indexOf('firefox') > -1;\n}\n\nasync function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Firefox manages it's own trust store for SSL certificates, which can be\n * managed via the certutil command (supplied by NSS tooling packages). In the\n * event that certutil is not already installed, and either can't be installed\n * (Windows) or the user doesn't want to install it (skipCertutilInstall:\n * true), it means that we can't programmatically tell Firefox to trust our\n * root CA certificate.\n *\n * There is a recourse though. When a Firefox tab is directed to a URL that\n * responds with a certificate, it will automatically prompt the user if they\n * want to add it to their trusted certificates. So if we can't automatically\n * install the certificate via certutil, we instead start a quick web server\n * and host our certificate file. Then we open the hosted cert URL in Firefox\n * to kick off the GUI flow.\n *\n * This method does all this, along with providing user prompts in the terminal\n * to walk them through this process.\n */\nexport async function openCertificateInFirefox(firefoxPath: string, certPath: string): Promise<void> {\n  debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n  let port = await getPort();\n  let server = http.createServer(async (req, res) => {\n    let { pathname } = url.parse(req.url);\n    if (pathname === '/certificate') {\n      res.writeHead(200, { 'Content-type': 'application/x-x509-ca-cert' });\n      res.write(readFile(certPath));\n      res.end();\n    } else {\n      res.writeHead(200);\n      res.write(await UI.firefoxWizardPromptPage(`http://localhost:${ port }/certificate`));\n      res.end();\n    }\n  }).listen(port);\n  debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n  await UI.startFirefoxWizard(`http://localhost:${ port }`);\n  run(firefoxPath, [`http://localhost:${ port }`]);\n  await UI.waitForFirefoxWizard();\n  server.close();\n}\n\nexport function assertNotTouchingFiles(filepath: string, operation: string): void {\n    if (!filepath.startsWith(configDir) && !filepath.startsWith(getLegacyConfigDir())) {\n      throw new Error(`Devcert cannot ${ operation } ${ filepath }; it is outside known devcert config directories!`);\n    }\n}"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}