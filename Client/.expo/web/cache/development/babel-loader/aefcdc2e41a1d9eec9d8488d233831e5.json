{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction maybeFetchPlugin(compiler, name) {\n  var _a, _b;\n\n  return (_b = (_a = compiler.options) === null || _a === void 0 ? void 0 : _a.plugins) === null || _b === void 0 ? void 0 : _b.map(function (_ref) {\n    var constructor = _ref.constructor;\n    return constructor;\n  }).find(function (constructor) {\n    return constructor && constructor.name.endsWith(name);\n  });\n}\n\nvar ModifyJsonWebpackPlugin = function () {\n  function ModifyJsonWebpackPlugin() {\n    _classCallCheck(this, ModifyJsonWebpackPlugin);\n  }\n\n  _createClass(ModifyJsonWebpackPlugin, [{\n    key: \"modifyAsync\",\n    value: function modifyAsync(compiler, compilation, data) {\n      return _regeneratorRuntime.async(function modifyAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", data);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.make.tapPromise(this.constructor.name, function _callee2(compilation) {\n        var JsonWebpackPlugin;\n        return _regeneratorRuntime.async(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                JsonWebpackPlugin = maybeFetchPlugin(compiler, 'PwaManifestWebpackPlugin');\n\n                if (!JsonWebpackPlugin) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                if (!(typeof JsonWebpackPlugin.getHooks === 'undefined')) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                compilation.errors.push(new Error('ModifyJsonWebpackPlugin - This ModifyJsonWebpackPlugin version is not compatible with your current JsonWebpackPlugin version.\\n'));\n                return _context3.abrupt(\"return\");\n\n              case 5:\n                JsonWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync(_this.constructor.name, function _callee(data, callback) {\n                  return _regeneratorRuntime.async(function _callee$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.prev = 0;\n                          _context2.next = 3;\n                          return _regeneratorRuntime.awrap(_this.modifyAsync(compiler, compilation, data));\n\n                        case 3:\n                          data = _context2.sent;\n                          _context2.next = 9;\n                          break;\n\n                        case 6:\n                          _context2.prev = 6;\n                          _context2.t0 = _context2[\"catch\"](0);\n                          compilation.errors.push(_context2.t0);\n\n                        case 9:\n                          callback(null, data);\n\n                        case 10:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, null, null, [[0, 6]], Promise);\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    }\n  }]);\n\n  return ModifyJsonWebpackPlugin;\n}();\n\nexports.default = ModifyJsonWebpackPlugin;","map":{"version":3,"sources":["../../src/plugins/ModifyJsonWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;AAUA,SAAS,gBAAT,CAA0B,QAA1B,EAA8C,IAA9C,EAA0D;;;AACxD,SAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,OAAT,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,OAAlB,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAC5B,GAD4B,CACxB;AAAA,QAAG,WAAH,QAAG,WAAH;AAAA,WAAqB,WAArB;AAAA,GADwB,EAE7B,IAF6B,CAExB,UAAA,WAAW;AAAA,WAAI,WAAW,IAAI,WAAW,CAAC,IAAZ,CAAiB,QAAjB,CAA0B,IAA1B,CAAnB;AAAA,GAFa,CAAhC;AAGD;;IAEoB,uB;;;;;;;WACnB,qBACE,QADF,EAEE,WAFF,EAGE,IAHF;AAAA;AAAA;AAAA;AAAA;AAAA,+CAKS,IALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAQA,eAAM,QAAN,EAAwB;AAAA;;AACtB,MAAA,QAAQ,CAAC,KAAT,CAAe,IAAf,CAAoB,UAApB,CAA+B,KAAK,WAAL,CAAiB,IAAhD,EAAsD,kBAAO,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAE9C,gBAAA,iBAF8C,GAE1B,gBAAgB,CAAC,QAAD,EAAW,0BAAX,CAFU;;AAAA,qBAGhD,iBAHgD;AAAA;AAAA;AAAA;;AAAA,sBAI9C,OAAO,iBAAiB,CAAC,QAAzB,KAAsC,WAJQ;AAAA;AAAA;AAAA;;AAKhD,gBAAA,WAAW,CAAC,MAAZ,CAAmB,IAAnB,CACE,IAAI,KAAJ,CACE,iIADF,CADF;AALgD;;AAAA;AAalD,gBAAA,iBAAiB,CAAC,QAAlB,CAA2B,WAA3B,EAAwC,UAAxC,CAAmD,QAAnD,CACE,KAAI,CAAC,WAAL,CAAiB,IADnB,EAEE,iBACE,IADF,EAEE,QAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAKiB,KAAI,CAAC,WAAL,CAAiB,QAAjB,EAA2B,WAA3B,EAAwC,IAAxC,CALjB;;AAAA;AAKI,0BAAA,IALJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOI,0BAAA,WAAW,CAAC,MAAZ,CAAmB,IAAnB;;AAPJ;AAUE,0BAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF;;AAbkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAtD;AA8BD;;;;;;AAxCH,OAAA,CAAA,OAAA,GAAA,uBAAA","sourcesContent":["import { compilation as compilationNS, Compiler, Plugin } from 'webpack';\n\nimport { BeforeEmitOptions } from './JsonWebpackPlugin';\n\nexport type Options = {\n  path: string;\n  json: any;\n  pretty?: boolean;\n};\n\nfunction maybeFetchPlugin(compiler: Compiler, name: string): Plugin | undefined {\n  return compiler.options?.plugins\n    ?.map(({ constructor }) => constructor)\n    .find(constructor => constructor && constructor.name.endsWith(name));\n}\n\nexport default class ModifyJsonWebpackPlugin {\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: compilationNS.Compilation,\n    data: BeforeEmitOptions\n  ): Promise<BeforeEmitOptions> {\n    return data;\n  }\n\n  apply(compiler: Compiler) {\n    compiler.hooks.make.tapPromise(this.constructor.name, async (compilation: any) => {\n      // Hook into the html-webpack-plugin processing and add the html\n      const JsonWebpackPlugin = maybeFetchPlugin(compiler, 'PwaManifestWebpackPlugin') as any;\n      if (JsonWebpackPlugin) {\n        if (typeof JsonWebpackPlugin.getHooks === 'undefined') {\n          compilation.errors.push(\n            new Error(\n              'ModifyJsonWebpackPlugin - This ModifyJsonWebpackPlugin version is not compatible with your current JsonWebpackPlugin version.\\n'\n            )\n          );\n          return;\n        }\n\n        JsonWebpackPlugin.getHooks(compilation).beforeEmit.tapAsync(\n          this.constructor.name,\n          async (\n            data: BeforeEmitOptions,\n            callback: (error: Error | null, data: BeforeEmitOptions) => void\n          ) => {\n            try {\n              data = await this.modifyAsync(compiler, compilation, data);\n            } catch (error) {\n              compilation.errors.push(error);\n            }\n\n            callback(null, data);\n          }\n        );\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}