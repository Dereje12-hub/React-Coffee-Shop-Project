{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeAndroidManifestAsync = writeAndroidManifestAsync;\nexports.readAndroidManifestAsync = readAndroidManifestAsync;\nexports.getMainApplication = getMainApplication;\nexports.getMainApplicationOrThrow = getMainApplicationOrThrow;\nexports.getMainActivityOrThrow = getMainActivityOrThrow;\nexports.getRunnableActivity = getRunnableActivity;\nexports.getMainActivity = getMainActivity;\nexports.addMetaDataItemToMainApplication = addMetaDataItemToMainApplication;\nexports.removeMetaDataItemFromMainApplication = removeMetaDataItemFromMainApplication;\nexports.findMetaDataItem = findMetaDataItem;\nexports.findUsesLibraryItem = findUsesLibraryItem;\nexports.getMainApplicationMetaDataValue = getMainApplicationMetaDataValue;\nexports.addUsesLibraryItemToMainApplication = addUsesLibraryItemToMainApplication;\nexports.removeUsesLibraryItemFromMainApplication = removeUsesLibraryItemFromMainApplication;\nexports.prefixAndroidKeys = prefixAndroidKeys;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction XML() {\n  var data = _interopRequireWildcard(require(\"../utils/XML\"));\n\n  XML = function XML() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction writeAndroidManifestAsync(manifestPath, androidManifest) {\n  var manifestXml;\n  return _regeneratorRuntime.async(function writeAndroidManifestAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          manifestXml = XML().format(androidManifest);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(_fsExtra().default.ensureDir(_path().default.dirname(manifestPath)));\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(_fsExtra().default.writeFile(manifestPath, manifestXml));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction readAndroidManifestAsync(manifestPath) {\n  var xml;\n  return _regeneratorRuntime.async(function readAndroidManifestAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(XML().readXMLAsync({\n            path: manifestPath\n          }));\n\n        case 2:\n          xml = _context2.sent;\n\n          if (isManifest(xml)) {\n            _context2.next = 5;\n            break;\n          }\n\n          throw new Error('Invalid manifest found at: ' + manifestPath);\n\n        case 5:\n          return _context2.abrupt(\"return\", xml);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isManifest(xml) {\n  return !!xml.manifest;\n}\n\nfunction getMainApplication(androidManifest) {\n  var _androidManifest$mani, _androidManifest$mani2, _androidManifest$mani3;\n\n  return (_androidManifest$mani = androidManifest === null || androidManifest === void 0 ? void 0 : (_androidManifest$mani2 = androidManifest.manifest) === null || _androidManifest$mani2 === void 0 ? void 0 : (_androidManifest$mani3 = _androidManifest$mani2.application) === null || _androidManifest$mani3 === void 0 ? void 0 : _androidManifest$mani3.filter(function (e) {\n    var _e$$;\n\n    return (e === null || e === void 0 ? void 0 : (_e$$ = e.$) === null || _e$$ === void 0 ? void 0 : _e$$['android:name']) === '.MainApplication';\n  })[0]) !== null && _androidManifest$mani !== void 0 ? _androidManifest$mani : null;\n}\n\nfunction getMainApplicationOrThrow(androidManifest) {\n  var mainApplication = getMainApplication(androidManifest);\n  (0, _assert().default)(mainApplication, 'AndroidManifest.xml is missing the required MainApplication element');\n  return mainApplication;\n}\n\nfunction getMainActivityOrThrow(androidManifest) {\n  var mainActivity = getMainActivity(androidManifest);\n  (0, _assert().default)(mainActivity, 'AndroidManifest.xml is missing the required MainActivity element');\n  return mainActivity;\n}\n\nfunction getRunnableActivity(androidManifest) {\n  var _androidManifest$mani4, _androidManifest$mani5, _androidManifest$mani6, _androidManifest$mani7, _androidManifest$mani8;\n\n  var enabledActivities = androidManifest === null || androidManifest === void 0 ? void 0 : (_androidManifest$mani4 = androidManifest.manifest) === null || _androidManifest$mani4 === void 0 ? void 0 : (_androidManifest$mani5 = _androidManifest$mani4.application) === null || _androidManifest$mani5 === void 0 ? void 0 : (_androidManifest$mani6 = _androidManifest$mani5[0]) === null || _androidManifest$mani6 === void 0 ? void 0 : (_androidManifest$mani7 = _androidManifest$mani6.activity) === null || _androidManifest$mani7 === void 0 ? void 0 : (_androidManifest$mani8 = _androidManifest$mani7.filter) === null || _androidManifest$mani8 === void 0 ? void 0 : _androidManifest$mani8.call(_androidManifest$mani7, function (e) {\n    return e.$['android:enabled'] !== 'false' && e.$['android:enabled'] !== false;\n  });\n\n  if (!enabledActivities) {\n    return null;\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(enabledActivities), _step; !(_step = _iterator()).done;) {\n    var activity = _step.value;\n\n    if (Array.isArray(activity['intent-filter'])) {\n      for (var _iterator2 = _createForOfIteratorHelperLoose(activity['intent-filter']), _step2; !(_step2 = _iterator2()).done;) {\n        var intentFilter = _step2.value;\n\n        var _intentFilter$action, _intentFilter$categor;\n\n        if ((_intentFilter$action = intentFilter.action) !== null && _intentFilter$action !== void 0 && _intentFilter$action.find(function (action) {\n          return action.$['android:name'] === 'android.intent.action.MAIN';\n        }) && (_intentFilter$categor = intentFilter.category) !== null && _intentFilter$categor !== void 0 && _intentFilter$categor.find(function (category) {\n          return category.$['android:name'] === 'android.intent.category.LAUNCHER';\n        })) {\n          return activity;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getMainActivity(androidManifest) {\n  var _androidManifest$mani9, _androidManifest$mani10, _androidManifest$mani11, _androidManifest$mani12, _androidManifest$mani13, _mainActivity$;\n\n  var mainActivity = androidManifest === null || androidManifest === void 0 ? void 0 : (_androidManifest$mani9 = androidManifest.manifest) === null || _androidManifest$mani9 === void 0 ? void 0 : (_androidManifest$mani10 = _androidManifest$mani9.application) === null || _androidManifest$mani10 === void 0 ? void 0 : (_androidManifest$mani11 = _androidManifest$mani10[0]) === null || _androidManifest$mani11 === void 0 ? void 0 : (_androidManifest$mani12 = _androidManifest$mani11.activity) === null || _androidManifest$mani12 === void 0 ? void 0 : (_androidManifest$mani13 = _androidManifest$mani12.filter) === null || _androidManifest$mani13 === void 0 ? void 0 : _androidManifest$mani13.call(_androidManifest$mani12, function (e) {\n    return e.$['android:name'] === '.MainActivity';\n  });\n  return (_mainActivity$ = mainActivity === null || mainActivity === void 0 ? void 0 : mainActivity[0]) !== null && _mainActivity$ !== void 0 ? _mainActivity$ : null;\n}\n\nfunction addMetaDataItemToMainApplication(mainApplication, itemName, itemValue) {\n  var itemType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'value';\n  var existingMetaDataItem;\n  var newItem = {\n    $: prefixAndroidKeys(_defineProperty({\n      name: itemName\n    }, itemType, itemValue))\n  };\n\n  if (mainApplication['meta-data']) {\n    existingMetaDataItem = mainApplication['meta-data'].filter(function (e) {\n      return e.$['android:name'] === itemName;\n    });\n\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0].$[\"android:\" + itemType] = itemValue;\n    } else {\n      mainApplication['meta-data'].push(newItem);\n    }\n  } else {\n    mainApplication['meta-data'] = [newItem];\n  }\n\n  return mainApplication;\n}\n\nfunction removeMetaDataItemFromMainApplication(mainApplication, itemName) {\n  var index = findMetaDataItem(mainApplication, itemName);\n\n  if (mainApplication !== null && mainApplication !== void 0 && mainApplication['meta-data'] && index > -1) {\n    mainApplication['meta-data'].splice(index, 1);\n  }\n\n  return mainApplication;\n}\n\nfunction findApplicationSubItem(mainApplication, category, itemName) {\n  var parent = mainApplication[category];\n\n  if (Array.isArray(parent)) {\n    var index = parent.findIndex(function (e) {\n      return e.$['android:name'] === itemName;\n    });\n    return index;\n  }\n\n  return -1;\n}\n\nfunction findMetaDataItem(mainApplication, itemName) {\n  return findApplicationSubItem(mainApplication, 'meta-data', itemName);\n}\n\nfunction findUsesLibraryItem(mainApplication, itemName) {\n  return findApplicationSubItem(mainApplication, 'uses-library', itemName);\n}\n\nfunction getMainApplicationMetaDataValue(androidManifest, name) {\n  var mainApplication = getMainApplication(androidManifest);\n\n  if (mainApplication !== null && mainApplication !== void 0 && mainApplication.hasOwnProperty('meta-data')) {\n    var _mainApplication$meta, _item$$$androidValue;\n\n    var item = mainApplication === null || mainApplication === void 0 ? void 0 : (_mainApplication$meta = mainApplication['meta-data']) === null || _mainApplication$meta === void 0 ? void 0 : _mainApplication$meta.find(function (e) {\n      return e.$['android:name'] === name;\n    });\n    return (_item$$$androidValue = item === null || item === void 0 ? void 0 : item.$['android:value']) !== null && _item$$$androidValue !== void 0 ? _item$$$androidValue : null;\n  }\n\n  return null;\n}\n\nfunction addUsesLibraryItemToMainApplication(mainApplication, item) {\n  var existingMetaDataItem;\n  var newItem = {\n    $: prefixAndroidKeys(item)\n  };\n\n  if (mainApplication['uses-library']) {\n    existingMetaDataItem = mainApplication['uses-library'].filter(function (e) {\n      return e.$['android:name'] === item.name;\n    });\n\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0].$ = newItem.$;\n    } else {\n      mainApplication['uses-library'].push(newItem);\n    }\n  } else {\n    mainApplication['uses-library'] = [newItem];\n  }\n\n  return mainApplication;\n}\n\nfunction removeUsesLibraryItemFromMainApplication(mainApplication, itemName) {\n  var index = findUsesLibraryItem(mainApplication, itemName);\n\n  if (mainApplication !== null && mainApplication !== void 0 && mainApplication['uses-library'] && index > -1) {\n    mainApplication['uses-library'].splice(index, 1);\n  }\n\n  return mainApplication;\n}\n\nfunction prefixAndroidKeys(head) {\n  return Object.entries(head).reduce(function (prev, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        curr = _ref2[1];\n\n    return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, \"android:\" + key, curr));\n  }, {});\n}","map":{"version":3,"sources":["../../src/android/Manifest.ts"],"names":["manifestXml","XML","fs","path","xml","manifestPath","isManifest","e","mainApplication","getMainApplication","mainActivity","getMainActivity","enabledActivities","androidManifest","Array","activity","action","intentFilter","category","itemType","newItem","$","prefixAndroidKeys","name","itemValue","existingMetaDataItem","index","findMetaDataItem","parent","findApplicationSubItem","item","findUsesLibraryItem","curr"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport * as XML from '../utils/XML';\n\nexport type StringBoolean = 'true' | 'false';\n\ntype ManifestMetaDataAttributes = AndroidManifestAttributes & {\n  'android:value'?: string;\n  'android:resource'?: string;\n};\n\ntype AndroidManifestAttributes = {\n  'android:name': string | 'android.intent.action.VIEW';\n};\n\ntype ManifestAction = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestCategory = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestData = {\n  $: {\n    [key: string]: string | undefined;\n    'android:host'?: string;\n    'android:pathPrefix'?: string;\n    'android:scheme'?: string;\n  };\n};\n\ntype ManifestReceiver = {\n  $: AndroidManifestAttributes & {\n    'android:exported'?: StringBoolean;\n    'android:enabled'?: StringBoolean;\n  };\n  'intent-filter'?: ManifestIntentFilter[];\n};\n\ntype ManifestIntentFilter = {\n  action?: ManifestAction[];\n  data?: ManifestData[];\n  category?: ManifestCategory[];\n};\n\nexport type ManifestMetaData = {\n  $: ManifestMetaDataAttributes;\n};\n\ntype ManifestServiceAttributes = AndroidManifestAttributes & {\n  'android:enabled'?: StringBoolean;\n  'android:exported'?: StringBoolean;\n  'android:permission'?: string;\n  // ...\n};\n\ntype ManifestService = {\n  $: ManifestServiceAttributes;\n  'intent-filter'?: ManifestIntentFilter[];\n};\n\ntype ManifestApplicationAttributes = {\n  'android:name': string | '.MainApplication';\n  'android:icon'?: string;\n  'android:label'?: string;\n  'android:allowBackup'?: StringBoolean;\n  'android:largeHeap'?: StringBoolean;\n  'android:requestLegacyExternalStorage'?: StringBoolean;\n  'android:usesCleartextTraffic'?: StringBoolean;\n  [key: string]: string | undefined;\n};\n\nexport type ManifestActivity = {\n  $: ManifestApplicationAttributes & {\n    'android:exported'?: StringBoolean;\n    'android:launchMode'?: string;\n    'android:theme'?: string;\n    'android:windowSoftInputMode'?:\n      | string\n      | 'stateUnspecified'\n      | 'stateUnchanged'\n      | 'stateHidden'\n      | 'stateAlwaysHidden'\n      | 'stateVisible'\n      | 'stateAlwaysVisible'\n      | 'adjustUnspecified'\n      | 'adjustResize'\n      | 'adjustPan';\n    [key: string]: string | undefined;\n  };\n  'intent-filter'?: ManifestIntentFilter[];\n  // ...\n};\n\nexport type ManifestUsesLibrary = {\n  $: AndroidManifestAttributes & {\n    'android:required'?: StringBoolean;\n  };\n};\n\nexport type ManifestApplication = {\n  $: ManifestApplicationAttributes;\n  activity?: ManifestActivity[];\n  service?: ManifestService[];\n  receiver?: ManifestReceiver[];\n  'meta-data'?: ManifestMetaData[];\n  'uses-library'?: ManifestUsesLibrary[];\n  // ...\n};\n\ntype ManifestPermission = {\n  $: AndroidManifestAttributes & {\n    'android:protectionLevel'?: string | 'signature';\n  };\n};\n\nexport type ManifestUsesPermission = {\n  $: AndroidManifestAttributes;\n};\n\ntype ManifestUsesFeature = {\n  $: AndroidManifestAttributes & {\n    'android:glEsVersion'?: string;\n    'android:required': StringBoolean;\n  };\n};\n\nexport type AndroidManifest = {\n  manifest: {\n    // Probably more, but this is currently all we'd need for most cases in Expo.\n    $: { 'xmlns:android': string; package?: string; [key: string]: string | undefined };\n    permission?: ManifestPermission[];\n    'uses-permission'?: ManifestUsesPermission[];\n    'uses-permission-sdk-23'?: ManifestUsesPermission[];\n    'uses-feature'?: ManifestUsesFeature[];\n    application?: ManifestApplication[];\n  };\n};\n\nexport async function writeAndroidManifestAsync(\n  manifestPath: string,\n  androidManifest: AndroidManifest\n): Promise<void> {\n  const manifestXml = XML.format(androidManifest);\n  await fs.ensureDir(path.dirname(manifestPath));\n  await fs.writeFile(manifestPath, manifestXml);\n}\n\nexport async function readAndroidManifestAsync(manifestPath: string): Promise<AndroidManifest> {\n  const xml = await XML.readXMLAsync({ path: manifestPath });\n  if (!isManifest(xml)) {\n    throw new Error('Invalid manifest found at: ' + manifestPath);\n  }\n  return xml;\n}\n\nfunction isManifest(xml: XML.XMLObject): xml is AndroidManifest {\n  // TODO: Maybe more validation\n  return !!xml.manifest;\n}\n\nexport function getMainApplication(androidManifest: AndroidManifest): ManifestApplication | null {\n  return (\n    androidManifest?.manifest?.application?.filter(\n      e => e?.$?.['android:name'] === '.MainApplication'\n    )[0] ?? null\n  );\n}\n\nexport function getMainApplicationOrThrow(androidManifest: AndroidManifest): ManifestApplication {\n  const mainApplication = getMainApplication(androidManifest);\n  assert(mainApplication, 'AndroidManifest.xml is missing the required MainApplication element');\n  return mainApplication;\n}\n\nexport function getMainActivityOrThrow(androidManifest: AndroidManifest): ManifestActivity {\n  const mainActivity = getMainActivity(androidManifest);\n  assert(mainActivity, 'AndroidManifest.xml is missing the required MainActivity element');\n  return mainActivity;\n}\n\nexport function getRunnableActivity(androidManifest: AndroidManifest): ManifestActivity | null {\n  // Get enabled activities\n  const enabledActivities = androidManifest?.manifest?.application?.[0]?.activity?.filter?.(\n    (e: any) => e.$['android:enabled'] !== 'false' && e.$['android:enabled'] !== false\n  );\n\n  if (!enabledActivities) {\n    return null;\n  }\n\n  // Get the activity that has a runnable intent-filter\n  for (const activity of enabledActivities) {\n    if (Array.isArray(activity['intent-filter'])) {\n      for (const intentFilter of activity['intent-filter']) {\n        if (\n          intentFilter.action?.find(\n            action => action.$['android:name'] === 'android.intent.action.MAIN'\n          ) &&\n          intentFilter.category?.find(\n            category => category.$['android:name'] === 'android.intent.category.LAUNCHER'\n          )\n        ) {\n          return activity;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function getMainActivity(androidManifest: AndroidManifest): ManifestActivity | null {\n  const mainActivity = androidManifest?.manifest?.application?.[0]?.activity?.filter?.(\n    (e: any) => e.$['android:name'] === '.MainActivity'\n  );\n  return mainActivity?.[0] ?? null;\n}\n\nexport function addMetaDataItemToMainApplication(\n  mainApplication: ManifestApplication,\n  itemName: string,\n  itemValue: string,\n  itemType: 'resource' | 'value' = 'value'\n): ManifestApplication {\n  let existingMetaDataItem;\n  const newItem = {\n    $: prefixAndroidKeys({ name: itemName, [itemType]: itemValue }),\n  } as ManifestMetaData;\n  if (mainApplication['meta-data']) {\n    existingMetaDataItem = mainApplication['meta-data'].filter(\n      (e: any) => e.$['android:name'] === itemName\n    );\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0].$[\n        `android:${itemType}` as keyof ManifestMetaDataAttributes\n      ] = itemValue;\n    } else {\n      mainApplication['meta-data'].push(newItem);\n    }\n  } else {\n    mainApplication['meta-data'] = [newItem];\n  }\n  return mainApplication;\n}\n\nexport function removeMetaDataItemFromMainApplication(mainApplication: any, itemName: string) {\n  const index = findMetaDataItem(mainApplication, itemName);\n  if (mainApplication?.['meta-data'] && index > -1) {\n    mainApplication['meta-data'].splice(index, 1);\n  }\n  return mainApplication;\n}\n\nfunction findApplicationSubItem(\n  mainApplication: ManifestApplication,\n  category: keyof ManifestApplication,\n  itemName: string\n): number {\n  const parent = mainApplication[category];\n  if (Array.isArray(parent)) {\n    const index = parent.findIndex((e: any) => e.$['android:name'] === itemName);\n\n    return index;\n  }\n  return -1;\n}\n\nexport function findMetaDataItem(mainApplication: any, itemName: string): number {\n  return findApplicationSubItem(mainApplication, 'meta-data', itemName);\n}\n\nexport function findUsesLibraryItem(mainApplication: any, itemName: string): number {\n  return findApplicationSubItem(mainApplication, 'uses-library', itemName);\n}\n\nexport function getMainApplicationMetaDataValue(\n  androidManifest: AndroidManifest,\n  name: string\n): string | null {\n  const mainApplication = getMainApplication(androidManifest);\n\n  if (mainApplication?.hasOwnProperty('meta-data')) {\n    const item = mainApplication?.['meta-data']?.find((e: any) => e.$['android:name'] === name);\n    return item?.$['android:value'] ?? null;\n  }\n\n  return null;\n}\n\nexport function addUsesLibraryItemToMainApplication(\n  mainApplication: ManifestApplication,\n  item: { name: string; required?: boolean }\n): ManifestApplication {\n  let existingMetaDataItem;\n  const newItem = {\n    $: prefixAndroidKeys(item),\n  } as ManifestUsesLibrary;\n\n  if (mainApplication['uses-library']) {\n    existingMetaDataItem = mainApplication['uses-library'].filter(\n      e => e.$['android:name'] === item.name\n    );\n    if (existingMetaDataItem.length) {\n      existingMetaDataItem[0].$ = newItem.$;\n    } else {\n      mainApplication['uses-library'].push(newItem);\n    }\n  } else {\n    mainApplication['uses-library'] = [newItem];\n  }\n  return mainApplication;\n}\n\nexport function removeUsesLibraryItemFromMainApplication(\n  mainApplication: ManifestApplication,\n  itemName: string\n) {\n  const index = findUsesLibraryItem(mainApplication, itemName);\n  if (mainApplication?.['uses-library'] && index > -1) {\n    mainApplication['uses-library'].splice(index, 1);\n  }\n  return mainApplication;\n}\n\nexport function prefixAndroidKeys<T extends Record<string, any> = Record<string, string>>(\n  head: T\n): Record<string, any> {\n  // prefix all keys with `android:`\n  return Object.entries(head).reduce(\n    (prev, [key, curr]) => ({ ...prev, [`android:${key}`]: curr }),\n    {} as T\n  );\n}\n"]},"metadata":{},"sourceType":"script"}