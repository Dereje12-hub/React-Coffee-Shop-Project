{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBitcode = getBitcode;\nexports.setBitcodeWithConfig = setBitcodeWithConfig;\nexports.setBitcode = setBitcode;\nexports.withCustomBitcode = exports.withBitcode = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withBitcode = function withBitcode(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setBitcodeWithConfig(config, {\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withBitcode = withBitcode;\n\nvar withCustomBitcode = function withCustomBitcode(config, bitcode) {\n  return (0, _iosPlugins().withXcodeProject)(config, function _callee2(config) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(setBitcode(bitcode, {\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context2.sent;\n            return _context2.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withCustomBitcode = withCustomBitcode;\n\nfunction getBitcode(config) {\n  var _config$ios;\n\n  return (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bitcode;\n}\n\nfunction setBitcodeWithConfig(config, _ref) {\n  var project = _ref.project;\n  var bitcode = getBitcode(config);\n  return setBitcode(bitcode, {\n    project: project\n  });\n}\n\nfunction setBitcode(bitcode, _ref2) {\n  var project = _ref2.project;\n  var isDefaultBehavior = bitcode == null;\n\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  var targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  var isBitcodeEnabled = !!bitcode;\n\n  if (targetName) {\n    var configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(_Xcodeproj().isNotComment);\n    var hasConfiguration = configs.find(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          configuration = _ref4[1];\n\n      return configuration.name === targetName;\n    });\n\n    if (hasConfiguration) {\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      var names = _toConsumableArray(new Set(configs.map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            configuration = _ref6[1];\n\n        return \"\\\"\" + configuration.name + \"\\\"\";\n      }))).sort();\n\n      (0, _warnings().addWarningIOS)('ios.bitcode', \"No configuration named \\\"\" + targetName + \"\\\". Expected one of: \" + names.join(', ') + \".\");\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/Bitcode.ts"],"names":["withBitcode","config","setBitcodeWithConfig","project","modResults","withCustomBitcode","setBitcode","bitcode","getBitcode","isDefaultBehavior","targetName","isBitcodeEnabled","configs","Object","isNotComment","hasConfiguration","configuration","names"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { isNotComment } from './utils/Xcodeproj';\n\ntype Bitcode = NonNullable<ExpoConfig['ios']>['bitcode'];\n\n/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */\nexport const withBitcode: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcodeWithConfig(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */\nexport const withCustomBitcode: ConfigPlugin<Bitcode> = (config, bitcode) => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcode(bitcode, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Get the bitcode preference from the Expo config.\n */\nexport function getBitcode(config: Pick<ExpoConfig, 'ios'>): Bitcode {\n  return config.ios?.bitcode;\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */\nexport function setBitcodeWithConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const bitcode = getBitcode(config);\n  return setBitcode(bitcode, { project });\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */\nexport function setBitcode(bitcode: Bitcode, { project }: { project: XcodeProject }): XcodeProject {\n  const isDefaultBehavior = bitcode == null;\n  // If the value is undefined, then do nothing.\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  const targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  const isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    // Assert if missing\n    const configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment);\n    const hasConfiguration = configs.find(([, configuration]) => configuration.name === targetName);\n    if (hasConfiguration) {\n      // If targetName is defined then disable bitcode everywhere.\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      const names = [\n        // Remove duplicates, wrap in double quotes, and sort alphabetically.\n        ...new Set(configs.map(([, configuration]) => `\"${configuration.name}\"`)),\n      ].sort();\n      addWarningIOS(\n        'ios.bitcode',\n        `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`\n      );\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}