{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"CFBundleDisplayName\"],\n    _excluded2 = [\"CFBundleName\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getName = getName;\nexports.setDisplayName = setDisplayName;\nexports.setName = setName;\nexports.withName = exports.withDisplayName = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withDisplayName = (0, _iosPlugins().createInfoPlistPlugin)(setDisplayName, 'withDisplayName');\nexports.withDisplayName = withDisplayName;\nvar withName = (0, _iosPlugins().createInfoPlistPlugin)(setName, 'withName');\nexports.withName = withName;\n\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction setDisplayName(configOrName, _ref) {\n  var CFBundleDisplayName = _ref.CFBundleDisplayName,\n      infoPlist = _objectWithoutProperties(_ref, _excluded);\n\n  var name = null;\n\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleDisplayName: name\n  });\n}\n\nfunction setName(config, _ref2) {\n  var CFBundleName = _ref2.CFBundleName,\n      infoPlist = _objectWithoutProperties(_ref2, _excluded2);\n\n  var name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleName: name\n  });\n}","map":{"version":3,"sources":["../../src/ios/Name.ts"],"names":["withDisplayName","withName","config","infoPlist","name","getName","CFBundleDisplayName","CFBundleName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,IAAMA,eAAe,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,cAAA,EAAxB,iBAAwB,CAAxB;;AAEA,IAAMC,QAAQ,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,OAAA,EAAjB,UAAiB,CAAjB;;;AAEA,SAAA,OAAA,CAAA,MAAA,EAAmD;AACxD,SAAO,OAAOC,MAAM,CAAb,IAAA,KAAA,QAAA,GAAkCA,MAAM,CAAxC,IAAA,GAAP,IAAA;AACD;;AAMM,SAAA,cAAA,CAAA,YAAA,QAGM;AAAA,MADX,mBACW,QADX,mBACW;AAAA,MADeC,SACf;;AACX,MAAIC,IAAmB,GAAvB,IAAA;;AACA,MAAI,OAAA,YAAA,KAAJ,QAAA,EAAsC;AACpCA,IAAAA,IAAI,GAAJA,YAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,IAAI,GAAGC,OAAO,CAAdD,YAAc,CAAdA;AACD;;AAED,MAAI,CAAJ,IAAA,EAAW;AACT,WAAA,SAAA;AACD;;AAED,yCAAO,SAAP;AAEEE,IAAAA,mBAAmB,EAAEF;AAFvB;AAID;;AAMM,SAAA,OAAA,CAAA,MAAA,SAGM;AAAA,MADX,YACW,SADX,YACW;AAAA,MADQD,SACR;;AACX,MAAMC,IAAI,GAAGC,OAAO,CAApB,MAAoB,CAApB;;AAEA,MAAI,CAAJ,IAAA,EAAW;AACT,WAAA,SAAA;AACD;;AAED,yCAAO,SAAP;AAEEE,IAAAA,YAAY,EAAEH;AAFhB;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withDisplayName = createInfoPlistPlugin(setDisplayName, 'withDisplayName');\n\nexport const withName = createInfoPlistPlugin(setName, 'withName');\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */\nexport function setDisplayName(\n  configOrName: Pick<ExpoConfig, 'name'> | string,\n  { CFBundleDisplayName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleDisplayName: name,\n  };\n}\n\n/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */\nexport function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  { CFBundleName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleName: name,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}