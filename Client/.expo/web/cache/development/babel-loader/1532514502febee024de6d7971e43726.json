{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSupportsTablet = getSupportsTablet;\nexports.getIsTabletOnly = getIsTabletOnly;\nexports.getDeviceFamilies = getDeviceFamilies;\nexports.formatDeviceFamilies = formatDeviceFamilies;\nexports.setDeviceFamily = setDeviceFamily;\nexports.withDeviceFamily = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withDeviceFamily = function withDeviceFamily(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setDeviceFamily(config, {\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withDeviceFamily = withDeviceFamily;\n\nfunction getSupportsTablet(config) {\n  var _config$ios;\n\n  return !!((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.supportsTablet);\n}\n\nfunction getIsTabletOnly(config) {\n  var _config$ios2;\n\n  return !!(config !== null && config !== void 0 && (_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.isTabletOnly);\n}\n\nfunction getDeviceFamilies(config) {\n  var _config$ios3;\n\n  var supportsTablet = getSupportsTablet(config);\n  var isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && ((_config$ios3 = config.ios) === null || _config$ios3 === void 0 ? void 0 : _config$ios3.supportsTablet) === false) {\n    (0, _warnings().addWarningIOS)('ios.supportsTablet', \"Found contradictory values: `{ ios: { isTabletOnly: true, supportsTablet: false } }`. Using `{ isTabletOnly: true }`.\");\n  }\n\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    return [1];\n  }\n}\n\nfunction formatDeviceFamilies(deviceFamilies) {\n  return \"\\\"\" + deviceFamilies.join(',') + \"\\\"\";\n}\n\nfunction setDeviceFamily(config, _ref) {\n  var project = _ref.project;\n  var deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n  var configurations = project.pbxXCBuildConfigurationSection();\n\n  for (var _i = 0, _Object$values = Object.values(configurations || {}); _i < _Object$values.length; _i++) {\n    var _ref2 = _Object$values[_i];\n    var buildSettings = _ref2.buildSettings;\n\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/DeviceFamily.ts"],"names":["withDeviceFamily","config","setDeviceFamily","project","modResults","supportsTablet","getSupportsTablet","isTabletOnly","getIsTabletOnly","deviceFamilies","formatDeviceFamilies","getDeviceFamilies","configurations","buildSettings","Object"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\n\nexport const withDeviceFamily: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setDeviceFamily(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getSupportsTablet(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config.ios?.supportsTablet;\n}\n\nexport function getIsTabletOnly(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config?.ios?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(config: Pick<ExpoConfig, 'ios'>): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && config.ios?.supportsTablet === false) {\n    addWarningIOS(\n      'ios.supportsTablet',\n      `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}