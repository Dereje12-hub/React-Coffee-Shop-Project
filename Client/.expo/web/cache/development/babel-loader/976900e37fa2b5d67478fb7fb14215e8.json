{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"nonInteractiveHelp\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prompt;\nexports.autoCompleteAsync = autoCompleteAsync;\nexports.selectAsync = selectAsync;\nexports.confirmAsync = confirmAsync;\nexports.toggleConfirmAsync = toggleConfirmAsync;\nexports.promptEmailAsync = promptEmailAsync;\nObject.defineProperty(exports, \"PromptType\", {\n  enumerable: true,\n  get: function get() {\n    return _prompts().PromptType;\n  }\n});\n\nfunction _commander() {\n  var data = _interopRequireDefault(require(\"commander\"));\n\n  _commander = function _commander() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  var data = _interopRequireWildcard(require(\"prompts\"));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _CommandError() {\n  var data = _interopRequireWildcard(require(\"./CommandError\"));\n\n  _CommandError = function _CommandError() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar color = require('kleur');\n\ncolor.strikethrough = color.gray;\n\nfunction prompt(questions) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var nonInteractiveHelp = _ref.nonInteractiveHelp,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  questions = Array.isArray(questions) ? questions : [questions];\n\n  if (_commander().default.nonInteractive && questions.length !== 0) {\n    var message = \"Input is required, but Expo CLI is in non-interactive mode.\\n\";\n\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      var question = questions[0];\n      var questionMessage = typeof question.message === 'function' ? question.message(undefined, {}, question) : question.message;\n      message += \"Required input:\\n\" + (questionMessage || '').trim().replace(/^/gm, '> ');\n    }\n\n    throw new (_CommandError().default)('NON_INTERACTIVE', message);\n  }\n\n  return (0, _prompts().default)(questions, _objectSpread({\n    onCancel: function onCancel() {\n      throw new (_CommandError().AbortCommandError)();\n    }\n  }, options));\n}\n\nprompt.separator = function (title) {\n  return {\n    title: title,\n    disabled: true,\n    value: undefined\n  };\n};\n\nfunction autoCompleteAsync(questions, options) {\n  var _await$prompt, value;\n\n  return _regeneratorRuntime.async(function autoCompleteAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(prompt(_objectSpread(_objectSpread({\n            limit: 11,\n            suggest: function suggest(input, choices) {\n              var regex = new RegExp(input, 'i');\n              return choices.filter(function (choice) {\n                return regex.test(choice.title);\n              });\n            }\n          }, questions), {}, {\n            name: 'value',\n            type: 'autocomplete'\n          }), options));\n\n        case 2:\n          _await$prompt = _context.sent;\n          value = _await$prompt.value;\n          return _context.abrupt(\"return\", value !== null && value !== void 0 ? value : null);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction selectAsync(questions, options) {\n  var _await$prompt2, value;\n\n  return _regeneratorRuntime.async(function selectAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(prompt(_objectSpread(_objectSpread({\n            limit: 11\n          }, questions), {}, {\n            onRender: function onRender() {\n              var _this = this;\n\n              if (this.firstRender) {\n                while (this.choices[this.cursor].disabled) {\n                  this.cursor++;\n                  if (this.cursor > this.choices.length - 1) break;\n                }\n\n                this.fire();\n                this.value = (this.choices[this.cursor] || {}).value;\n\n                this.up = function () {\n                  var next = _this.cursor;\n\n                  while (true) {\n                    if (next <= 0) break;\n                    next--;\n                    if (!_this.choices[next].disabled) break;\n                  }\n\n                  if (!_this.choices[next].disabled && next !== _this.cursor) {\n                    _this.moveCursor(next);\n\n                    _this.render();\n                  } else {\n                    _this.bell();\n                  }\n                };\n\n                this.down = function () {\n                  var next = _this.cursor;\n\n                  while (true) {\n                    if (next >= _this.choices.length - 1) break;\n                    next++;\n                    if (!_this.choices[next].disabled) break;\n                  }\n\n                  if (!_this.choices[next].disabled && next !== _this.cursor) {\n                    _this.moveCursor(next);\n\n                    _this.render();\n                  } else {\n                    _this.bell();\n                  }\n                };\n\n                this.next = function () {\n                  var next = _this.cursor;\n                  var i = 0;\n\n                  while (i < _this.choices.length) {\n                    i++;\n                    next = (next + 1) % _this.choices.length;\n                    if (!_this.choices[next].disabled) break;\n                  }\n\n                  if (!_this.choices[next].disabled) {\n                    _this.moveCursor(next);\n\n                    _this.render();\n                  } else {\n                    _this.bell();\n                  }\n                };\n              }\n            },\n            name: 'value',\n            type: 'select'\n          }), options));\n\n        case 2:\n          _await$prompt2 = _context2.sent;\n          value = _await$prompt2.value;\n          return _context2.abrupt(\"return\", value !== null && value !== void 0 ? value : null);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction confirmAsync(questions, options) {\n  var _await$prompt3, value;\n\n  return _regeneratorRuntime.async(function confirmAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(prompt(_objectSpread(_objectSpread({\n            initial: true\n          }, questions), {}, {\n            name: 'value',\n            type: 'confirm'\n          }), options));\n\n        case 2:\n          _await$prompt3 = _context3.sent;\n          value = _await$prompt3.value;\n          return _context3.abrupt(\"return\", value !== null && value !== void 0 ? value : null);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction toggleConfirmAsync(questions, options) {\n  var _await$prompt4, value;\n\n  return _regeneratorRuntime.async(function toggleConfirmAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(prompt(_objectSpread(_objectSpread({\n            active: 'yes',\n            inactive: 'no'\n          }, questions), {}, {\n            name: 'value',\n            type: 'toggle'\n          }), options));\n\n        case 2:\n          _await$prompt4 = _context4.sent;\n          value = _await$prompt4.value;\n          return _context4.abrupt(\"return\", value !== null && value !== void 0 ? value : null);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction promptEmailAsync(questions, options) {\n  var _await$prompt5, value;\n\n  return _regeneratorRuntime.async(function promptEmailAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(prompt(_objectSpread(_objectSpread({\n            type: 'text',\n            format: function format(value) {\n              return value.trim();\n            },\n            validate: function validate(value) {\n              return /.+@.+/.test(value) ? true : \"That doesn't look like a valid email.\";\n            }\n          }, questions), {}, {\n            name: 'value'\n          }), options));\n\n        case 2:\n          _await$prompt5 = _context5.sent;\n          value = _await$prompt5.value;\n          return _context5.abrupt(\"return\", value.trim());\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/prompts.ts"],"names":["color","require","options","questions","Array","program","message","question","questionMessage","CommandError","onCancel","AbortCommandError","prompt","title","disabled","value","undefined","limit","suggest","regex","choices","choice","name","type","onRender","next","i","initial","active","inactive","format","validate"],"mappings":"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","sourcesContent":["import program from 'commander';\nimport prompts, { Options, PromptObject, PromptType } from 'prompts';\n\nimport CommandError, { AbortCommandError } from './CommandError';\n\n// NOTE(brentvatne): we don't use strikethrough anywhere in expo-cli currently,\n// and prompts doesn't give us control over disabled styles (1), so until we\n// open a PR to prompts to make it more extensible in this regard we can just\n// have strikethrough make text grey instead through monkey-patching it.\n//\n// (1): https://github.com/terkelg/prompts/blob/972fbb2d43c7b1ee5058800f441daaf51f2c240f/lib/elements/select.js#L152-L154\nconst color = require('kleur');\ncolor.strikethrough = color.gray;\n\nexport type Question<V extends string = string> = PromptObject<V> & {\n  optionsPerPage?: number;\n};\n\nexport { PromptType };\n\ntype PromptOptions = { nonInteractiveHelp?: string } & Options;\n\nexport default function prompt(\n  questions: Question | Question[],\n  { nonInteractiveHelp, ...options }: PromptOptions = {}\n) {\n  questions = Array.isArray(questions) ? questions : [questions];\n  if (program.nonInteractive && questions.length !== 0) {\n    let message = `Input is required, but Expo CLI is in non-interactive mode.\\n`;\n    if (nonInteractiveHelp) {\n      message += nonInteractiveHelp;\n    } else {\n      const question = questions[0];\n      const questionMessage =\n        typeof question.message === 'function'\n          ? question.message(undefined, {}, question)\n          : question.message;\n\n      message += `Required input:\\n${(questionMessage || '').trim().replace(/^/gm, '> ')}`;\n    }\n    throw new CommandError('NON_INTERACTIVE', message);\n  }\n  return prompts(questions, {\n    onCancel() {\n      throw new AbortCommandError();\n    },\n    ...options,\n  });\n}\n\n// todo: replace this workaround, its still selectable by the cursor\n// see: https://github.com/terkelg/prompts/issues/254\nprompt.separator = (title: string) => ({ title, disabled: true, value: undefined });\n\nexport type NamelessQuestion = Omit<Question<'value'>, 'name' | 'type'>;\n\n/**\n * Create an auto complete list that can be searched and cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function autoCompleteAsync(\n  questions: NamelessQuestion | NamelessQuestion[],\n  options?: PromptOptions\n): Promise<string> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      suggest(input: any, choices: any) {\n        const regex = new RegExp(input, 'i');\n        return choices.filter((choice: any) => regex.test(choice.title));\n      },\n      ...questions,\n      name: 'value',\n      type: 'autocomplete',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a selection list that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function selectAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<any> {\n  const { value } = await prompt(\n    {\n      limit: 11,\n      ...questions,\n      // @ts-ignore: onRender not in the types\n      onRender(this: {\n        cursor: number;\n        firstRender: boolean;\n        choices: (Omit<prompts.Choice, 'disable'> & { disabled?: boolean })[];\n        value: string;\n        render: () => void;\n        moveCursor: (n: number) => void;\n        fire: () => void;\n        up: () => void;\n        down: () => void;\n        bell: () => void;\n        next: () => void;\n      }) {\n        if (this.firstRender) {\n          // Ensure the initial state isn't on a disabled item.\n          while (this.choices[this.cursor].disabled) {\n            this.cursor++;\n            if (this.cursor > this.choices.length - 1) break;\n          }\n          this.fire();\n          // Without this, the value will be `0` instead of a string.\n          this.value = (this.choices[this.cursor] || {}).value;\n\n          // Support up arrow and `k` key -- no looping\n          this.up = () => {\n            let next = this.cursor;\n            while (true) {\n              if (next <= 0) break;\n              next--;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled && next !== this.cursor) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              this.bell();\n            }\n          };\n\n          // Support down arrow and `j` key -- no looping\n          this.down = () => {\n            let next = this.cursor;\n            while (true) {\n              if (next >= this.choices.length - 1) break;\n              next++;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled && next !== this.cursor) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              this.bell();\n            }\n          };\n\n          // Support tab -- looping\n          this.next = () => {\n            let next = this.cursor;\n            let i = 0;\n            while (i < this.choices.length) {\n              i++;\n              next = (next + 1) % this.choices.length;\n              if (!this.choices[next].disabled) break;\n            }\n            if (!this.choices[next].disabled) {\n              this.moveCursor(next);\n              this.render();\n            } else {\n              // unexpected\n              this.bell();\n            }\n          };\n        }\n      },\n      name: 'value',\n      type: 'select',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a standard yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function confirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      initial: true,\n      ...questions,\n      name: 'value',\n      type: 'confirm',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Create a more dynamic yes/no confirmation that can be cancelled.\n *\n * @param questions\n * @param options\n */\nexport async function toggleConfirmAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<boolean> {\n  const { value } = await prompt(\n    {\n      active: 'yes',\n      inactive: 'no',\n      ...questions,\n      name: 'value',\n      type: 'toggle',\n    },\n    options\n  );\n  return value ?? null;\n}\n\n/**\n * Prompt the user for an email address.\n *\n * @param questions\n * @param options\n */\nexport async function promptEmailAsync(\n  questions: NamelessQuestion,\n  options?: PromptOptions\n): Promise<string> {\n  const { value } = await prompt(\n    {\n      type: 'text',\n      format: value => value.trim(),\n      validate: (value: string) =>\n        /.+@.+/.test(value) ? true : \"That doesn't look like a valid email.\",\n      ...questions,\n      name: 'value',\n    },\n    options\n  );\n  return value.trim();\n}\n"]},"metadata":{},"sourceType":"script"}