{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRuntimeVersionNullable = getRuntimeVersionNullable;\nexports.getSDKVersion = getSDKVersion;\nexports.getUpdatesEnabled = getUpdatesEnabled;\nexports.getUpdatesTimeout = getUpdatesTimeout;\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.ensureBuildGradleContainsConfigurationScript = ensureBuildGradleContainsConfigurationScript;\nexports.formatApplyLineForBuildGradle = formatApplyLineForBuildGradle;\nexports.isBuildGradleConfigured = isBuildGradleConfigured;\nexports.isMainApplicationMetaDataSet = isMainApplicationMetaDataSet;\nexports.isMainApplicationMetaDataSynced = isMainApplicationMetaDataSynced;\nexports.areVersionsSynced = areVersionsSynced;\nexports.withUpdates = exports.Config = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n\n  _Updates = function _Updates() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n\n  _Manifest = function _Manifest() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\nvar Config;\nexports.Config = Config;\n\n(function (Config) {\n  Config[\"ENABLED\"] = \"expo.modules.updates.ENABLED\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";\n  Config[\"SDK_VERSION\"] = \"expo.modules.updates.EXPO_SDK_VERSION\";\n  Config[\"RUNTIME_VERSION\"] = \"expo.modules.updates.EXPO_RUNTIME_VERSION\";\n  Config[\"UPDATE_URL\"] = \"expo.modules.updates.EXPO_UPDATE_URL\";\n  Config[\"RELEASE_CHANNEL\"] = \"expo.modules.updates.EXPO_RELEASE_CHANNEL\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\";\n})(Config || (exports.Config = Config = {}));\n\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _androidPlugins().withAndroidManifest)(config, function (config) {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexports.withUpdates = withUpdates;\n\nfunction getRuntimeVersionNullable(config) {\n  try {\n    return (0, _Updates().getRuntimeVersion)(config, 'android');\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nfunction getUpdatesEnabled(config) {\n  var _config$updates;\n\n  return ((_config$updates = config.updates) === null || _config$updates === void 0 ? void 0 : _config$updates.enabled) !== false;\n}\n\nfunction getUpdatesTimeout(config) {\n  var _config$updates$fallb, _config$updates2;\n\n  return (_config$updates$fallb = (_config$updates2 = config.updates) === null || _config$updates2 === void 0 ? void 0 : _config$updates2.fallbackToCacheTimeout) !== null && _config$updates$fallb !== void 0 ? _config$updates$fallb : 0;\n}\n\nfunction getUpdatesCheckOnLaunch(config) {\n  var _config$updates3, _config$updates4;\n\n  if (((_config$updates3 = config.updates) === null || _config$updates3 === void 0 ? void 0 : _config$updates3.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (((_config$updates4 = config.updates) === null || _config$updates4 === void 0 ? void 0 : _config$updates4.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n\n  return 'ALWAYS';\n}\n\nfunction setUpdatesConfig(config, androidManifest, username) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.ENABLED, String(getUpdatesEnabled(config)));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CHECK_ON_LAUNCH, getUpdatesCheckOnLaunch(config));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.LAUNCH_WAIT_MS, String(getUpdatesTimeout(config)));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n\n  if (updateUrl) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nfunction setVersionsConfig(config, androidManifest) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  var runtimeVersion = getRuntimeVersionNullable(config);\n  var sdkVersion = getSDKVersion(config);\n\n  if (runtimeVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\n\nfunction ensureBuildGradleContainsConfigurationScript(projectRoot, buildGradleContents) {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    var cleanedUpBuildGradleContents;\n    var isBuildGradleMisconfigured = buildGradleContents.split('\\n').some(function (line) {\n      return line.includes(CREATE_MANIFEST_ANDROID_PATH);\n    });\n\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(new RegExp(\"(\\n// Integration with Expo updates)?\\n.*\" + CREATE_MANIFEST_ANDROID_PATH + \".*\\n\"), '');\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    var gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return cleanedUpBuildGradleContents + \"\\n// Integration with Expo updates\\n\" + gradleScriptApply + \"\\n\";\n  } else {\n    return buildGradleContents;\n  }\n}\n\nfunction formatApplyLineForBuildGradle(projectRoot) {\n  var updatesGradleScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n\n  var relativePath = _path().default.relative(_path().default.join(projectRoot, 'android', 'app'), updatesGradleScriptPath);\n\n  var posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n  return \"apply from: \\\"\" + posixPath + \"\\\"\";\n}\n\nfunction isBuildGradleConfigured(projectRoot, buildGradleContents) {\n  var androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n  return buildGradleContents.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\");\n  });\n}\n\nfunction isMainApplicationMetaDataSet(androidManifest) {\n  var updateUrl = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL);\n  var runtimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var sdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nfunction isMainApplicationMetaDataSynced(config, androidManifest, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL) && String(getUpdatesEnabled(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.ENABLED) && String(getUpdatesTimeout(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.LAUNCH_WAIT_MS) && getUpdatesCheckOnLaunch(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CHECK_ON_LAUNCH) && areVersionsSynced(config, androidManifest);\n}\n\nfunction areVersionsSynced(config, androidManifest) {\n  var expectedRuntimeVersion = getRuntimeVersionNullable(config);\n  var expectedSdkVersion = getSDKVersion(config);\n  var currentRuntimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var currentSdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/android/Updates.ts"],"names":["CREATE_MANIFEST_ANDROID_PATH","Config","withUpdates","expoUsername","config","setUpdatesConfig","mainApplication","String","getUpdatesEnabled","getUpdatesCheckOnLaunch","getUpdatesTimeout","updateUrl","setVersionsConfig","runtimeVersion","getRuntimeVersionNullable","sdkVersion","getSDKVersion","isBuildGradleConfigured","isBuildGradleMisconfigured","buildGradleContents","line","cleanedUpBuildGradleContents","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","resolveFrom","relativePath","path","posixPath","process","androidBuildScript","Boolean","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { ExpoConfigUpdates, getRuntimeVersion, getUpdateUrl } from '../utils/Updates';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\n/**\n * runtime version maybe null in projects using classic updates. In that\n * case we use SDK version\n */\nexport function getRuntimeVersionNullable(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  try {\n    return getRuntimeVersion(config, 'android');\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersionNullable(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some(line => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config);\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}