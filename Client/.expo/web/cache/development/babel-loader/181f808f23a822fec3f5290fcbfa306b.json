{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\n\nvar fs_1 = require(\"fs\");\n\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\n\nvar command_exists_1 = require(\"command-exists\");\n\nvar utils_1 = require(\"../utils\");\n\nvar shared_1 = require(\"./shared\");\n\nvar debug = debug_1.default('devcert:platforms:macos');\n\nvar getCertUtilPath = function getCertUtilPath() {\n  return path_1.default.join(utils_1.run('brew', ['--prefix', 'nss']).toString().trim(), 'bin', 'certutil');\n};\n\nvar MacOSPlatform = function () {\n  function MacOSPlatform() {\n    _classCallCheck(this, MacOSPlatform);\n\n    this.FIREFOX_BUNDLE_PATH = '/Applications/Firefox.app';\n    this.FIREFOX_BIN_PATH = path_1.default.join(this.FIREFOX_BUNDLE_PATH, 'Contents/MacOS/firefox');\n    this.FIREFOX_NSS_DIR = path_1.default.join(process.env.HOME, 'Library/Application Support/Firefox/Profiles/*');\n    this.HOST_FILE_PATH = '/etc/hosts';\n  }\n\n  _createClass(MacOSPlatform, [{\n    key: \"addToTrustStores\",\n    value: function addToTrustStores(certificatePath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                debug('Adding devcert root CA to macOS system keychain');\n                utils_1.run('sudo', ['security', 'add-trusted-cert', '-d', '-r', 'trustRoot', '-k', '/Library/Keychains/System.keychain', '-p', 'ssl', '-p', 'basic', certificatePath]);\n\n                if (!this.isFirefoxInstalled()) {\n                  _context.next = 27;\n                  break;\n                }\n\n                debug('Firefox install detected. Adding devcert root CA to Firefox trust store');\n\n                if (this.isNSSInstalled()) {\n                  _context.next = 21;\n                  break;\n                }\n\n                if (options.skipCertutilInstall) {\n                  _context.next = 17;\n                  break;\n                }\n\n                if (!command_exists_1.sync('brew')) {\n                  _context.next = 11;\n                  break;\n                }\n\n                debug(\"certutil is not already installed, but Homebrew is detected. Trying to install certutil via Homebrew...\");\n\n                try {\n                  utils_1.run('brew', ['install', 'nss'], {\n                    stdio: 'ignore'\n                  });\n                } catch (e) {\n                  debug(\"brew install nss failed\");\n                }\n\n                _context.next = 15;\n                break;\n\n              case 11:\n                debug(\"Homebrew didn't work, so we can't try to install certutil. Falling back to manual certificate install\");\n                _context.next = 14;\n                return shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n\n              case 14:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 15:\n                _context.next = 21;\n                break;\n\n              case 17:\n                debug(\"certutil is not already installed, and skipCertutilInstall is true, so we have to fall back to a manual install\");\n                _context.next = 20;\n                return shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n\n              case 20:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 21:\n                _context.next = 23;\n                return shared_1.closeFirefox();\n\n              case 23:\n                _context.next = 25;\n                return shared_1.addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n\n              case 25:\n                _context.next = 28;\n                break;\n\n              case 27:\n                debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      debug('Removing devcert root CA from macOS system keychain');\n\n      try {\n        utils_1.run('sudo', ['security', 'remove-trusted-cert', '-d', certificatePath], {\n          stdio: 'ignore'\n        });\n      } catch (e) {\n        debug(\"failed to remove \" + certificatePath + \" from macOS cert store, continuing. \" + e.toString());\n      }\n\n      if (this.isFirefoxInstalled() && this.isNSSInstalled()) {\n        debug('Firefox install and certutil install detected. Trying to remove root CA from Firefox NSS databases');\n        shared_1.removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function addDomainToHostFileIfMissing(domain) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n        var trimDomain, hostsFileContents;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                trimDomain = domain.trim().replace(/[\\s;]/g, '');\n                hostsFileContents = fs_1.readFileSync(this.HOST_FILE_PATH, 'utf8');\n\n                if (!hostsFileContents.includes(trimDomain)) {\n                  utils_1.sudoAppend(this.HOST_FILE_PATH, \"127.0.0.1 \" + trimDomain + \"\\n\");\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      shared_1.assertNotTouchingFiles(filepath, 'delete');\n      utils_1.run('sudo', ['rm', '-rf', filepath]);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function readProtectedFile(filepath) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                shared_1.assertNotTouchingFiles(filepath, 'read');\n                _context3.next = 3;\n                return utils_1.run('sudo', ['cat', filepath]);\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent.toString().trim());\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }, {\n    key: \"writeProtectedFile\",\n    value: function writeProtectedFile(filepath, contents) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                shared_1.assertNotTouchingFiles(filepath, 'write');\n\n                if (!fs_1.existsSync(filepath)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return utils_1.run('sudo', ['rm', filepath]);\n\n              case 4:\n                fs_1.writeFileSync(filepath, contents);\n                _context4.next = 7;\n                return utils_1.run('sudo', ['chown', '0', filepath]);\n\n              case 7:\n                _context4.next = 9;\n                return utils_1.run('sudo', ['chmod', '600', filepath]);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }, {\n    key: \"isFirefoxInstalled\",\n    value: function isFirefoxInstalled() {\n      return fs_1.existsSync(this.FIREFOX_BUNDLE_PATH);\n    }\n  }, {\n    key: \"isNSSInstalled\",\n    value: function isNSSInstalled() {\n      try {\n        return utils_1.run('brew', ['list', '-1']).toString().includes('\\nnss\\n');\n      } catch (e) {\n        return false;\n      }\n    }\n  }]);\n\n  return MacOSPlatform;\n}();\n\nexports.default = MacOSPlatform;\n;","map":{"version":3,"sources":["platforms/darwin.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { writeFileSync as writeFile, existsSync as exists, readFileSync as read } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { run, sudoAppend } from '../utils';\nimport { Options } from '../index';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from './shared';\nimport { Platform } from '.';\n\nconst debug = createDebug('devcert:platforms:macos');\n\nconst getCertUtilPath = () => path.join(run('brew', ['--prefix', 'nss']).toString().trim(), 'bin', 'certutil');\n\nexport default class MacOSPlatform implements Platform {\n\n  private FIREFOX_BUNDLE_PATH = '/Applications/Firefox.app';\n  private FIREFOX_BIN_PATH = path.join(this.FIREFOX_BUNDLE_PATH, 'Contents/MacOS/firefox');\n  private FIREFOX_NSS_DIR = path.join(process.env.HOME, 'Library/Application Support/Firefox/Profiles/*');\n\n  private HOST_FILE_PATH = '/etc/hosts';\n\n  /**\n   * macOS is pretty simple - just add the certificate to the system keychain,\n   * and most applications will delegate to that for determining trusted\n   * certificates. Firefox, of course, does it's own thing. We can try to\n   * automatically install the cert with Firefox if we can use certutil via the\n   * `nss` Homebrew package, otherwise we go manual with user-facing prompts.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n\n    // Chrome, Safari, system utils\n    debug('Adding devcert root CA to macOS system keychain');\n    run('sudo', [\n      'security',\n      'add-trusted-cert',\n      '-d',\n      '-r',\n      'trustRoot',\n      '-k',\n      '/Library/Keychains/System.keychain',\n      '-p',\n      'ssl',\n      '-p',\n      'basic',\n      certificatePath\n    ]);\n\n    if (this.isFirefoxInstalled()) {\n      // Try to use certutil to install the cert automatically\n      debug('Firefox install detected. Adding devcert root CA to Firefox trust store');\n      if (!this.isNSSInstalled()) {\n        if (!options.skipCertutilInstall) {\n          if (commandExists('brew')) {\n            debug(`certutil is not already installed, but Homebrew is detected. Trying to install certutil via Homebrew...`);\n            try {\n              run('brew', ['install', 'nss'], { stdio: 'ignore' });\n            } catch (e) {\n              debug(`brew install nss failed`);\n            }\n          } else {\n            debug(`Homebrew didn't work, so we can't try to install certutil. Falling back to manual certificate install`);\n            return await openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n          }\n        } else {\n          debug(`certutil is not already installed, and skipCertutilInstall is true, so we have to fall back to a manual install`)\n          return await openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n        }\n      }\n      await closeFirefox();\n      await addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n    } else {\n      debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    debug('Removing devcert root CA from macOS system keychain');\n    try {\n      run('sudo', [\n        'security',\n        'remove-trusted-cert',\n        '-d',\n        certificatePath\n      ], {\n        stdio: 'ignore'\n      });\n    } catch(e) {\n      debug(`failed to remove ${ certificatePath } from macOS cert store, continuing. ${ e.toString() }`);\n    }\n    if (this.isFirefoxInstalled() && this.isNSSInstalled()) {\n      debug('Firefox install and certutil install detected. Trying to remove root CA from Firefox NSS databases');\n      removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    const trimDomain = domain.trim().replace(/[\\s;]/g,'')\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(trimDomain)) {\n      sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n    }\n  }\n\n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    run('sudo', ['rm', '-rf', filepath]);\n  }\n\n  async readProtectedFile(filepath: string) {\n    assertNotTouchingFiles(filepath, 'read');\n    return (await run('sudo', ['cat', filepath])).toString().trim();\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (exists(filepath)) {\n      await run('sudo', ['rm', filepath]);\n    }\n    writeFile(filepath, contents);\n    await run('sudo', ['chown', '0', filepath]);\n    await run('sudo', ['chmod', '600', filepath]);\n  }\n\n  private isFirefoxInstalled() {\n    return exists(this.FIREFOX_BUNDLE_PATH);\n  }\n\n  private isNSSInstalled() {\n    try {\n      return run('brew', ['list', '-1']).toString().includes('\\nnss\\n');\n    } catch (e) {\n      return false;\n    }\n  }\n\n};\n"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}