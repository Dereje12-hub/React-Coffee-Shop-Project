{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPackage = getPackage;\nexports.renamePackageOnDisk = renamePackageOnDisk;\nexports.renamePackageOnDiskForType = renamePackageOnDiskForType;\nexports.setPackageInBuildGradle = setPackageInBuildGradle;\nexports.setPackageInAndroidManifest = setPackageInAndroidManifest;\nexports.getApplicationIdAsync = getApplicationIdAsync;\nexports.withPackageRefactor = exports.withPackageGradle = exports.withPackageManifest = void 0;\n\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  var data = require(\"glob\");\n\n  _glob = function _glob() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n\n  _modules = function _modules() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar debug = (0, _debug().default)('config-plugins:android:package');\nvar withPackageManifest = (0, _androidPlugins().createAndroidManifestPlugin)(setPackageInAndroidManifest, 'withPackageManifest');\nexports.withPackageManifest = withPackageManifest;\n\nvar withPackageGradle = function withPackageGradle(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.package', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withPackageGradle = withPackageGradle;\n\nvar withPackageRefactor = function withPackageRefactor(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(renamePackageOnDisk(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nexports.withPackageRefactor = withPackageRefactor;\n\nfunction getPackage(config) {\n  var _config$android$packa, _config$android;\n\n  return (_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : null;\n}\n\nfunction getPackageRoot(projectRoot, type) {\n  return _path().default.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\n\nfunction getCurrentPackageName(projectRoot, packageRoot) {\n  var mainApplication = (0, _Paths().getProjectFilePath)(projectRoot, 'MainApplication');\n\n  var packagePath = _path().default.dirname(mainApplication);\n\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageForProjectFile(projectRoot, packageRoot, fileName, type) {\n  var filePath = (0, _glob().sync)(_path().default.join(projectRoot, \"android/app/src/\" + type + \"/java/**/\" + fileName + \".@(java|kt)\"))[0];\n\n  if (!filePath) {\n    return null;\n  }\n\n  var packagePath = _path().default.dirname(filePath);\n\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageNameForType(projectRoot, type) {\n  var packageRoot = getPackageRoot(projectRoot, type);\n\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\n\nfunction renamePackageOnDisk(config, projectRoot) {\n  var newPackageName, _i, _arr, type;\n\n  return _regeneratorRuntime.async(function renamePackageOnDisk$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          newPackageName = getPackage(config);\n\n          if (!(newPackageName === null)) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 3:\n          _i = 0, _arr = ['main', 'debug'];\n\n        case 4:\n          if (!(_i < _arr.length)) {\n            _context2.next = 11;\n            break;\n          }\n\n          type = _arr[_i];\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(renamePackageOnDiskForType({\n            projectRoot: projectRoot,\n            type: type,\n            packageName: newPackageName\n          }));\n\n        case 8:\n          _i++;\n          _context2.next = 4;\n          break;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction renamePackageOnDiskForType(_ref) {\n  var _path$default, _path$default2;\n\n  var projectRoot, type, packageName, currentPackageName, packageRoot, currentPackagePath, newPackagePath, oldPathParts, _path$default3, pathToCheck, files, filesToUpdate;\n\n  return _regeneratorRuntime.async(function renamePackageOnDiskForType$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          projectRoot = _ref.projectRoot, type = _ref.type, packageName = _ref.packageName;\n\n          if (packageName) {\n            _context3.next = 3;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 3:\n          currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n          debug(\"Found package \\\"\" + currentPackageName + \"\\\" for type \\\"\" + type + \"\\\"\");\n\n          if (!(!currentPackageName || currentPackageName === packageName)) {\n            _context3.next = 7;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 7:\n          debug(\"Refactor \\\"\" + currentPackageName + \"\\\" to \\\"\" + packageName + \"\\\" for type \\\"\" + type + \"\\\"\");\n          packageRoot = getPackageRoot(projectRoot, type);\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap((0, _modules().directoryExistsAsync)(packageRoot));\n\n        case 11:\n          if (_context3.sent) {\n            _context3.next = 14;\n            break;\n          }\n\n          debug(\"- skipping refactor of missing directory: \" + packageRoot);\n          return _context3.abrupt(\"return\");\n\n        case 14:\n          currentPackagePath = (_path$default = _path().default).join.apply(_path$default, [packageRoot].concat(_toConsumableArray(currentPackageName.split('.'))));\n          newPackagePath = (_path$default2 = _path().default).join.apply(_path$default2, [packageRoot].concat(_toConsumableArray(packageName.split('.'))));\n\n          _fsExtra().default.mkdirpSync(newPackagePath);\n\n          (0, _glob().sync)('**/*', {\n            cwd: currentPackagePath\n          }).forEach(function (relativePath) {\n            var filepath = _path().default.join(currentPackagePath, relativePath);\n\n            if (_fsExtra().default.lstatSync(filepath).isFile()) {\n              _fsExtra().default.moveSync(filepath, _path().default.join(newPackagePath, relativePath));\n            } else {\n              _fsExtra().default.mkdirpSync(filepath);\n            }\n          });\n          oldPathParts = currentPackageName.split('.');\n\n          while (oldPathParts.length) {\n            pathToCheck = (_path$default3 = _path().default).join.apply(_path$default3, [packageRoot].concat(_toConsumableArray(oldPathParts)));\n\n            try {\n              files = _fsExtra().default.readdirSync(pathToCheck);\n\n              if (files.length === 0) {\n                _fsExtra().default.rmdirSync(pathToCheck);\n              }\n            } finally {\n              oldPathParts.pop();\n            }\n          }\n\n          filesToUpdate = _toConsumableArray((0, _glob().sync)('**/*', {\n            cwd: newPackagePath,\n            absolute: true\n          }));\n\n          if (type === 'main') {\n            filesToUpdate.push(_path().default.join(projectRoot, 'android', 'app', 'BUCK'));\n          }\n\n          filesToUpdate.forEach(function (filepath) {\n            try {\n              if (_fsExtra().default.lstatSync(filepath).isFile()) {\n                var contents = _fsExtra().default.readFileSync(filepath).toString();\n\n                contents = contents.replace(new RegExp(currentPackageName, 'g'), packageName);\n\n                _fsExtra().default.writeFileSync(filepath, contents);\n              }\n            } catch (e) {\n              debug(\"Error updating \\\"\" + filepath + \"\\\" for type \\\"\" + type + \"\\\"\");\n            }\n          });\n\n        case 23:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction setPackageInBuildGradle(config, buildGradle) {\n  var packageName = getPackage(config);\n\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"applicationId ['\\\"].*['\\\"]\");\n  return buildGradle.replace(pattern, \"applicationId '\" + packageName + \"'\");\n}\n\nfunction setPackageInAndroidManifest(config, androidManifest) {\n  var packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nfunction getApplicationIdAsync(projectRoot) {\n  var _matchResult$, buildGradlePath, buildGradle, matchResult;\n\n  return _regeneratorRuntime.async(function getApplicationIdAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          buildGradlePath = (0, _Paths().getAppBuildGradleFilePath)(projectRoot);\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(_fsExtra().default.pathExists(buildGradlePath));\n\n        case 3:\n          if (_context4.sent) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", null);\n\n        case 5:\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(_fsExtra().default.readFile(buildGradlePath, 'utf8'));\n\n        case 7:\n          buildGradle = _context4.sent;\n          matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n          return _context4.abrupt(\"return\", (_matchResult$ = matchResult === null || matchResult === void 0 ? void 0 : matchResult[1]) !== null && _matchResult$ !== void 0 ? _matchResult$ : null);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/android/Package.ts"],"names":["debug","withPackageManifest","withPackageGradle","config","setPackageInBuildGradle","withPackageRefactor","renamePackageOnDisk","path","mainApplication","packagePath","packagePathParts","filePath","type","packageRoot","getPackageRoot","getCurrentPackageName","getCurrentPackageForProjectFile","newPackageName","getPackage","renamePackageOnDiskForType","projectRoot","packageName","currentPackageName","getCurrentPackageNameForType","currentPackagePath","newPackagePath","fs","cwd","relativePath","filepath","oldPathParts","pathToCheck","files","filesToUpdate","absolute","contents","pattern","buildGradle","androidManifest","buildGradlePath","matchResult"],"mappings":";;;;;;;;;;;;;;;;;AACA,SAAA,MAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAAA,EAAA,MAAA,GAAA,kBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAAA,EAAA,KAAA,GAAA,iBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAAA,EAAA,KAAA,GAAA,iBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGA,SAAA,eAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,8BAAA;;AAAA,EAAA,eAAA,GAAA,2BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,iBAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,+BAAA;;AAAA,EAAA,iBAAA,GAAA,6BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,oBAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,SAAA,MAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,WAAA;;AAAA,EAAA,MAAA,GAAA,kBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAEA,IAAMA,KAAK,GAAG,CAAA,GAAA,MAAA,GAAA,OAAA,EAAd,gCAAc,CAAd;AAEO,IAAMC,mBAAmB,GAAG,CAAA,GAAA,eAAA,GAAA,2BAAA,EAAA,2BAAA,EAA5B,qBAA4B,CAA5B;;;AAKA,IAAMC,iBAA+B,GAAGC,SAAlCD,iBAAkCC,CAAAA,MAAM,EAAI;AACvD,SAAO,CAAA,GAAA,eAAA,GAAA,kBAAA,EAAA,MAAA,EAA2BA,UAAAA,MAAM,EAAI;AAC1C,QAAIA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAA6C;AAC3CA,MAAAA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,GAA6BC,uBAAuB,CAAA,MAAA,EAASD,MAAM,CAANA,UAAAA,CAA7DA,QAAoD,CAApDA;AADF,KAAA,MAEO;AACL,OAAA,GAAA,SAAA,GAAA,iBAAA,EAAA,iBAAA;AAID;;AACD,WAAA,MAAA;AATF,GAAO,CAAP;AADK,CAAA;;;;AAcA,IAAME,mBAAiC,GAAGF,SAApCE,mBAAoCF,CAAAA,MAAM,EAAI;AACzD,SAAO,CAAA,GAAA,iBAAA,GAAA,gBAAA,EAAA,MAAA,EAAyB,CAAA,SAAA,EAE9B,iBAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQG,mBAAmB,CAAA,MAAA,EAASH,MAAM,CAANA,UAAAA,CAAlC,WAAyB,CAD3B;;AAAA;AAAA,6CAEE,MAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAF8B,CAAzB,CAAP;AADK,CAAA;;;;AAUA,SAAA,UAAA,CAAA,MAAA,EAAyD;AAAA,MAAA,qBAAA,EAAA,eAAA;;AAC9D,SAAA,CAAA,qBAAA,GAAA,CAAA,eAAA,GAAOA,MAAM,CAAb,OAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,eAAAA,CAAP,OAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,IAAA;AACD;;AAED,SAAA,cAAA,CAAA,WAAA,EAAA,IAAA,EAAqE;AACnE,SAAOI,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAAA,SAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,IAAAA,EAAP,MAAOA,CAAP;AACD;;AAED,SAAA,qBAAA,CAAA,WAAA,EAAA,WAAA,EAAyE;AACvE,MAAMC,eAAe,GAAG,CAAA,GAAA,MAAA,GAAA,kBAAA,EAAA,WAAA,EAAxB,iBAAwB,CAAxB;;AACA,MAAMC,WAAW,GAAGF,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAApB,eAAoBA,CAApB;;AACA,MAAMG,gBAAgB,GAAGH,KAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,WAAAA,EAAAA,WAAAA,EAAAA,KAAAA,CAA8CA,KAAAA,GAAAA,OAAAA,CAA9CA,GAAAA,EAAAA,MAAAA,CAAzB,OAAyBA,CAAzB;;AAEA,SAAOG,gBAAgB,CAAhBA,IAAAA,CAAP,GAAOA,CAAP;AACD;;AAED,SAAA,+BAAA,CAAA,WAAA,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAKE;AACA,MAAMC,QAAQ,GAAG,CAAA,GAAA,KAAA,GAAA,IAAA,EACfJ,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,WAAAA,uBAA0CK,IAA1CL,iBADe,QACfA,iBADe,EAAjB,CAAiB,CAAjB;;AAIA,MAAI,CAAJ,QAAA,EAAe;AACb,WAAA,IAAA;AACD;;AAED,MAAME,WAAW,GAAGF,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CAApB,QAAoBA,CAApB;;AACA,MAAMG,gBAAgB,GAAGH,KAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,WAAAA,EAAAA,WAAAA,EAAAA,KAAAA,CAA8CA,KAAAA,GAAAA,OAAAA,CAA9CA,GAAAA,EAAAA,MAAAA,CAAzB,OAAyBA,CAAzB;;AAEA,SAAOG,gBAAgB,CAAhBA,IAAAA,CAAP,GAAOA,CAAP;AACD;;AAED,SAAA,4BAAA,CAAA,WAAA,EAAA,IAAA,EAAwF;AACtF,MAAMG,WAAW,GAAGC,cAAc,CAAA,WAAA,EAAlC,IAAkC,CAAlC;;AAEA,MAAIF,IAAI,KAAR,MAAA,EAAqB;AACnB,WAAOG,qBAAqB,CAAA,WAAA,EAA5B,WAA4B,CAA5B;AAJoF;;AAOtF,SAAOC,+BAA+B,CAAA,WAAA,EAAA,WAAA,EAAA,GAAA,EAAtC,IAAsC,CAAtC;AAGF;;AAGO,SAAA,mBAAA,CAAA,MAAA,EAAA,WAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAICC,UAAAA,cAJD,GAIkBC,UAAU,CAAjC,MAAiC,CAJ5B;;AAAA,gBAKDD,cAAc,KAAlB,IALK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,yBASc,CAAA,MAAA,EAAnB,OAAmB,CATd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AASL,UAAA,IATK;AAAA;AAAA,2CAUGE,0BAA0B,CAAC;AAAEC,YAAAA,WAAF,EAAEA,WAAF;AAAeR,YAAAA,IAAf,EAAeA,IAAf;AAAqBS,YAAAA,WAAW,EAAEJ;AAAlC,WAAD,CAV7B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAA,0BAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA0C,UAAA,WAA1C,QAA0C,WAA1C,EAA0C,IAA1C,QAA0C,IAA1C,EAGLI,WAHK,QAGLA,WAHK;;AAAA,cASL,WATK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAaCC,UAAAA,kBAbD,GAasBC,4BAA4B,CAAA,WAAA,EAAvD,IAAuD,CAblD;AAcLvB,UAAAA,KAAK,sBAAmBsB,kBAAnB,sBAALtB,IAAK,QAALA;;AAdK,gBAeD,CAAA,kBAAA,IAAuBsB,kBAAkB,KAA7C,WAfK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAkBLtB,UAAAA,KAAK,iBAAcsB,kBAAd,gBAAyCD,WAAzC,sBAALrB,IAAK,QAALA;AACMa,UAAAA,WAnBD,GAmBeC,cAAc,CAAA,WAAA,EAXjC,IAWiC,CAnB7B;AAAA;AAAA,2CAqBO,CAAA,GAAA,QAAA,GAAA,oBAAA,EAAZ,WAAY,CArBP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBHd,UAAAA,KAAK,gDAALA,WAAK,CAALA;AAtBG;;AAAA;AA0BCwB,UAAAA,kBA1BD,GA0BsBjB,iBAAAA,KAAAA,GAAAA,OAAAA,EAAAA,IAAAA,uBAAAA,WAAAA,4BAA0Be,kBAAkB,CAAlBA,KAAAA,CAArD,GAAqDA,CAA1Bf,GA1BtB;AA2BCkB,UAAAA,cA3BD,GA2BkBlB,kBAAAA,KAAAA,GAAAA,OAAAA,EAAAA,IAAAA,wBAAAA,WAAAA,4BAA0Bc,WAAW,CAAXA,KAAAA,CAnBhD,GAmBgDA,CAA1Bd,GA3BlB;;AA8BLmB,UAAAA,QAAAA,GAAAA,OAAAA,CAAAA,UAAAA,CAtBC,cAsBDA;;AAGA,WAAA,GAAA,KAAA,GAAA,IAAA,EAAA,MAAA,EAAiB;AAAEC,YAAAA,GAAG,EAAEH;AAAP,WAAjB,EAAA,OAAA,CAAsDI,UAAAA,YAAY,EAAI;AACpE,gBAAMC,QAAQ,GAAGtB,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,kBAAAA,EAAjB,YAAiBA,CAAjB;;AACA,gBAAImB,QAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAAJ,MAAIA,EAAJ,EAAqC;AACnCA,cAAAA,QAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAAsBnB,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,cAAAA,EAAtBmB,YAAsBnB,CAAtBmB;AADF,aAAA,MAEO;AACLA,cAAAA,QAAAA,GAAAA,OAAAA,CAAAA,UAAAA,CAAAA,QAAAA;AACD;AA/BF,WAyBD;AAWMI,UAAAA,YA5CD,GA4CgBR,kBAAkB,CAAlBA,KAAAA,CAArB,GAAqBA,CA5ChB;;AA6CL,iBAAOQ,YAAY,CAAnB,MAAA,EAA4B;AACpBC,YAAAA,WADoB,GACNxB,kBAAAA,KAAAA,GAAAA,OAAAA,EAAAA,IAAAA,wBAAAA,WAAAA,4BAApB,YAAoBA,GADM;;AAE1B,gBAAI;AACIyB,cAAAA,KADJ,GACYN,QAAAA,GAAAA,OAAAA,CAAAA,WAAAA,CAAd,WAAcA,CADZ;;AAEF,kBAAIM,KAAK,CAALA,MAAAA,KAAJ,CAAA,EAAwB;AACtBN,gBAAAA,QAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,WAAAA;AACD;AAJH,aAAA,SAKU;AACRI,cAAAA,YAAY,CAAZA,GAAAA;AACD;AACF;;AAEKG,UAAAA,aAzDD,sBAyDqB,CAAA,GAAA,KAAA,GAAA,IAAA,EAAA,MAAA,EAAiB;AAAEN,YAAAA,GAAG,EAAL,cAAA;AAAuBO,YAAAA,QAAQ,EAAE;AAAjC,WAAjB,CAzDrB;;AA2DL,cAAItB,IAAI,KAAR,MAAA,EAAqB;AACnBqB,YAAAA,aAAa,CAAbA,IAAAA,CAAmB1B,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAAAA,SAAAA,EAAAA,KAAAA,EAAnB0B,MAAmB1B,CAAnB0B;AApDD;;AAuDDA,UAAAA,aAAa,CAAbA,OAAAA,CAAuBJ,UAAAA,QAAD,EAAsB;AAC1C,gBAAI;AACF,kBAAIH,QAAAA,GAAAA,OAAAA,CAAAA,SAAAA,CAAAA,QAAAA,EAAJ,MAAIA,EAAJ,EAAqC;AACnC,oBAAIS,QAAQ,GAAGT,QAAAA,GAAAA,OAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAAf,QAAeA,EAAf;;AACAS,gBAAAA,QAAQ,GAAGA,QAAQ,CAARA,OAAAA,CAAiB,IAAA,MAAA,CAAA,kBAAA,EAAjBA,GAAiB,CAAjBA,EAAXA,WAAWA,CAAXA;;AACAT,gBAAAA,QAAAA,GAAAA,OAAAA,CAAAA,aAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AACD;AALH,aAAA,CAME,OAAA,CAAA,EAAU;AACV1B,cAAAA,KAAK,uBAAoB6B,QAApB,sBAAL7B,IAAK,QAALA;AACD;AATHiC,WAAAA;;AA/DK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4EA,SAAA,uBAAA,CAAA,MAAA,EAAA,WAAA,EAA2F;AAChG,MAAMZ,WAAW,GAAGH,UAAU,CAA9B,MAA8B,CAA9B;;AACA,MAAIG,WAAW,KAAf,IAAA,EAA0B;AACxB,WAAA,WAAA;AACD;;AAED,MAAMe,OAAO,GAAG,IAAhB,MAAgB,8BAAhB;AACA,SAAOC,WAAW,CAAXA,OAAAA,CAAAA,OAAAA,sBAAP,WAAOA,OAAP;AACD;;AAEM,SAAA,2BAAA,CAAA,MAAA,EAAA,eAAA,EAGL;AACA,MAAMhB,WAAW,GAAGH,UAAU,CAA9B,MAA8B,CAA9B;;AAEA,MAAA,WAAA,EAAiB;AACfoB,IAAAA,eAAe,CAAfA,QAAAA,CAAAA,CAAAA,CAAAA,OAAAA,GAAAA,WAAAA;AADF,GAAA,MAEO;AACL,WAAOA,eAAe,CAAfA,QAAAA,CAAAA,CAAAA,CAAP,OAAA;AACD;;AAED,SAAA,eAAA;AACD;;AAEM,SAAA,qBAAA,CAAA,WAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,eADD,GACmB,CAAA,GAAA,MAAA,GAAA,yBAAA,EAAxB,WAAwB,CADnB;AAAA;AAAA,2CAEOb,QAAAA,GAAAA,OAAAA,CAAAA,UAAAA,CAAZ,eAAYA,CAFP;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4CAGH,IAHG;;AAAA;AAAA;AAAA,2CAKqBA,QAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,eAAAA,EAA1B,MAA0BA,CALrB;;AAAA;AAKCW,UAAAA,WALD;AAMCG,UAAAA,WAND,GAMeH,WAAW,CAAXA,KAAAA,CANmE,4BAMnEA,CANf;AAAA,4CAQL,CAAA,aAAA,GAAOG,WAAP,KAAA,IAAOA,IAAAA,WAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,WAAW,CAAlB,CAAkB,CAAlB,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,aAAA,GAAA,IARK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withAppBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest } from './Manifest';\nimport { getAppBuildGradleFilePath, getProjectFilePath } from './Paths';\n\nconst debug = Debug('config-plugins:android:package');\n\nexport const withPackageManifest = createAndroidManifestPlugin(\n  setPackageInAndroidManifest,\n  'withPackageManifest'\n);\n\nexport const withPackageGradle: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.package',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withPackageRefactor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPackage(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.package ?? null;\n}\n\nfunction getPackageRoot(projectRoot: string, type: 'main' | 'debug') {\n  return path.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\n\nfunction getCurrentPackageName(projectRoot: string, packageRoot: string) {\n  const mainApplication = getProjectFilePath(projectRoot, 'MainApplication');\n  const packagePath = path.dirname(mainApplication);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageForProjectFile(\n  projectRoot: string,\n  packageRoot: string,\n  fileName: string,\n  type: string\n) {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/${type}/java/**/${fileName}.@(java|kt)`)\n  )[0];\n\n  if (!filePath) {\n    return null;\n  }\n\n  const packagePath = path.dirname(filePath);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageNameForType(projectRoot: string, type: string): string | null {\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  // debug, etc..\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport async function renamePackageOnDisk(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string\n) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  for (const type of ['main', 'debug']) {\n    await renamePackageOnDiskForType({ projectRoot, type, packageName: newPackageName });\n  }\n}\n\nexport async function renamePackageOnDiskForType({\n  projectRoot,\n  type,\n  packageName,\n}: {\n  projectRoot: string;\n  type: string;\n  packageName: string;\n}) {\n  if (!packageName) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n  debug(`Found package \"${currentPackageName}\" for type \"${type}\"`);\n  if (!currentPackageName || currentPackageName === packageName) {\n    return;\n  }\n  debug(`Refactor \"${currentPackageName}\" to \"${packageName}\" for type \"${type}\"`);\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n  // Set up our paths\n  if (!(await directoryExistsAsync(packageRoot))) {\n    debug(`- skipping refactor of missing directory: ${packageRoot}`);\n    return;\n  }\n\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...packageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirpSync(newPackagePath);\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach(relativePath => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      fs.moveSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirpSync(filepath);\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [...globSync('**/*', { cwd: newPackagePath, absolute: true })];\n  // Only update the BUCK file to match the main package name\n  if (type === 'main') {\n    filesToUpdate.push(path.join(projectRoot, 'android', 'app', 'BUCK'));\n  }\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName!, 'g'), packageName);\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch (e) {\n      debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n    }\n  });\n}\n\nexport function setPackageInBuildGradle(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`applicationId ['\"].*['\"]`);\n  return buildGradle.replace(pattern, `applicationId '${packageName}'`);\n}\n\nexport function setPackageInAndroidManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nexport async function getApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  const buildGradlePath = getAppBuildGradleFilePath(projectRoot);\n  if (!(await fs.pathExists(buildGradlePath))) {\n    return null;\n  }\n  const buildGradle = await fs.readFile(buildGradlePath, 'utf8');\n  const matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n  // TODO add fallback for legacy cases to read from AndroidManifest.xml\n  return matchResult?.[1] ?? null;\n}\n"]},"metadata":{},"sourceType":"script"}