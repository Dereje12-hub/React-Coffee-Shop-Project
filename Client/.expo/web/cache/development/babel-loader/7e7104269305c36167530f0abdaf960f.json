{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSchemesFromXcodeproj = getSchemesFromXcodeproj;\nexports.getRunnableSchemesFromXcodeproj = getRunnableSchemesFromXcodeproj;\nexports.getApplicationTargetNameForSchemeAsync = getApplicationTargetNameForSchemeAsync;\nexports.getArchiveBuildConfigurationForSchemeAsync = getArchiveBuildConfigurationForSchemeAsync;\n\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n\n  _XML = function _XML() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Target() {\n  var data = require(\"./Target\");\n\n  _Target = function _Target() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction getSchemesFromXcodeproj(projectRoot) {\n  return (0, _Paths().findSchemeNames)(projectRoot);\n}\n\nfunction getRunnableSchemesFromXcodeproj(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$configuration = _ref.configuration,\n      configuration = _ref$configuration === void 0 ? 'Debug' : _ref$configuration;\n\n  var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n  return (0, _Target().findSignableTargets)(project).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        target = _ref3[1];\n\n    var osType = 'iOS';\n    var type = (0, _Xcodeproj().unquote)(target.productType);\n\n    if (type === _Target().TargetType.APPLICATION) {\n      var xcConfigurationList = project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];\n\n      if (xcConfigurationList) {\n        var buildConfiguration = xcConfigurationList.buildConfigurations.find(function (value) {\n          return value.comment === configuration;\n        }) || xcConfigurationList.buildConfigurations[0];\n\n        if (buildConfiguration !== null && buildConfiguration !== void 0 && buildConfiguration.value) {\n          var _project$hash$project;\n\n          var xcBuildConfiguration = (_project$hash$project = project.hash.project.objects.XCBuildConfiguration) === null || _project$hash$project === void 0 ? void 0 : _project$hash$project[buildConfiguration.value];\n          var buildSdkRoot = xcBuildConfiguration.buildSettings.SDKROOT;\n\n          if (buildSdkRoot === 'appletvos' || 'TVOS_DEPLOYMENT_TARGET' in xcBuildConfiguration.buildSettings) {\n            osType = 'tvOS';\n          } else if (buildSdkRoot === 'iphoneos') {\n            osType = 'iOS';\n          }\n        }\n      }\n    } else if (type === _Target().TargetType.WATCH) {\n      osType = 'watchOS';\n    }\n\n    return {\n      name: (0, _Xcodeproj().unquote)(target.name),\n      osType: osType,\n      type: (0, _Xcodeproj().unquote)(target.productType)\n    };\n  });\n}\n\nfunction readSchemeAsync(projectRoot, scheme) {\n  var allSchemePaths, re, schemePath;\n  return _regeneratorRuntime.async(function readSchemeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          allSchemePaths = (0, _Paths().findSchemePaths)(projectRoot);\n          re = new RegExp(\"/\" + scheme + \".xcscheme\", 'i');\n          schemePath = allSchemePaths.find(function (i) {\n            return re.exec(i);\n          });\n\n          if (!schemePath) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap((0, _XML().readXMLAsync)({\n            path: schemePath\n          }));\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 9:\n          throw new Error(\"scheme '\" + scheme + \"' does not exist, make sure it's marked as shared\");\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getApplicationTargetNameForSchemeAsync(projectRoot, scheme) {\n  var _schemeXML$Scheme, _schemeXML$Scheme$Bui, _schemeXML$Scheme$Bui2, _schemeXML$Scheme$Bui3, _schemeXML$Scheme$Bui4, schemeXML, buildActionEntry, targetName;\n\n  return _regeneratorRuntime.async(function getApplicationTargetNameForSchemeAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(readSchemeAsync(projectRoot, scheme));\n\n        case 2:\n          schemeXML = _context2.sent;\n          buildActionEntry = schemeXML === null || schemeXML === void 0 ? void 0 : (_schemeXML$Scheme = schemeXML.Scheme) === null || _schemeXML$Scheme === void 0 ? void 0 : (_schemeXML$Scheme$Bui = _schemeXML$Scheme.BuildAction) === null || _schemeXML$Scheme$Bui === void 0 ? void 0 : (_schemeXML$Scheme$Bui2 = _schemeXML$Scheme$Bui[0]) === null || _schemeXML$Scheme$Bui2 === void 0 ? void 0 : (_schemeXML$Scheme$Bui3 = _schemeXML$Scheme$Bui2.BuildActionEntries) === null || _schemeXML$Scheme$Bui3 === void 0 ? void 0 : (_schemeXML$Scheme$Bui4 = _schemeXML$Scheme$Bui3[0]) === null || _schemeXML$Scheme$Bui4 === void 0 ? void 0 : _schemeXML$Scheme$Bui4.BuildActionEntry;\n          targetName = (buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.length) === 1 ? getBlueprintName(buildActionEntry[0]) : getBlueprintName(buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.find(function (entry) {\n            var _entry$BuildableRefer, _entry$BuildableRefer2, _entry$BuildableRefer3, _entry$BuildableRefer4;\n\n            return (_entry$BuildableRefer = entry.BuildableReference) === null || _entry$BuildableRefer === void 0 ? void 0 : (_entry$BuildableRefer2 = _entry$BuildableRefer[0]) === null || _entry$BuildableRefer2 === void 0 ? void 0 : (_entry$BuildableRefer3 = _entry$BuildableRefer2['$']) === null || _entry$BuildableRefer3 === void 0 ? void 0 : (_entry$BuildableRefer4 = _entry$BuildableRefer3.BuildableName) === null || _entry$BuildableRefer4 === void 0 ? void 0 : _entry$BuildableRefer4.endsWith('.app');\n          }));\n\n          if (targetName) {\n            _context2.next = 7;\n            break;\n          }\n\n          throw new Error(scheme + \".xcscheme seems to be corrupted\");\n\n        case 7:\n          return _context2.abrupt(\"return\", targetName);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getArchiveBuildConfigurationForSchemeAsync(projectRoot, scheme) {\n  var _schemeXML$Scheme2, _schemeXML$Scheme2$Ar, _schemeXML$Scheme2$Ar2, _schemeXML$Scheme2$Ar3, schemeXML, buildConfiguration;\n\n  return _regeneratorRuntime.async(function getArchiveBuildConfigurationForSchemeAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(readSchemeAsync(projectRoot, scheme));\n\n        case 2:\n          schemeXML = _context3.sent;\n          buildConfiguration = schemeXML === null || schemeXML === void 0 ? void 0 : (_schemeXML$Scheme2 = schemeXML.Scheme) === null || _schemeXML$Scheme2 === void 0 ? void 0 : (_schemeXML$Scheme2$Ar = _schemeXML$Scheme2.ArchiveAction) === null || _schemeXML$Scheme2$Ar === void 0 ? void 0 : (_schemeXML$Scheme2$Ar2 = _schemeXML$Scheme2$Ar[0]) === null || _schemeXML$Scheme2$Ar2 === void 0 ? void 0 : (_schemeXML$Scheme2$Ar3 = _schemeXML$Scheme2$Ar2['$']) === null || _schemeXML$Scheme2$Ar3 === void 0 ? void 0 : _schemeXML$Scheme2$Ar3.buildConfiguration;\n\n          if (buildConfiguration) {\n            _context3.next = 6;\n            break;\n          }\n\n          throw new Error(scheme + \".xcscheme seems to be corrupted\");\n\n        case 6:\n          return _context3.abrupt(\"return\", buildConfiguration);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getBlueprintName(entry) {\n  var _entry$BuildableRefer5, _entry$BuildableRefer6, _entry$BuildableRefer7;\n\n  return entry === null || entry === void 0 ? void 0 : (_entry$BuildableRefer5 = entry.BuildableReference) === null || _entry$BuildableRefer5 === void 0 ? void 0 : (_entry$BuildableRefer6 = _entry$BuildableRefer5[0]) === null || _entry$BuildableRefer6 === void 0 ? void 0 : (_entry$BuildableRefer7 = _entry$BuildableRefer6['$']) === null || _entry$BuildableRefer7 === void 0 ? void 0 : _entry$BuildableRefer7.BlueprintName;\n}","map":{"version":3,"sources":["../../src/ios/BuildScheme.ts"],"names":["configuration","project","osType","type","target","TargetType","xcConfigurationList","buildConfiguration","value","xcBuildConfiguration","buildSdkRoot","name","allSchemePaths","re","schemePath","i","path","schemeXML","readSchemeAsync","buildActionEntry","targetName","getBlueprintName","entry"],"mappings":"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","sourcesContent":["import { readXMLAsync } from '../utils/XML';\nimport { findSchemeNames, findSchemePaths } from './Paths';\nimport { findSignableTargets, TargetType } from './Target';\nimport { getPbxproj, unquote } from './utils/Xcodeproj';\n\ninterface SchemeXML {\n  Scheme?: {\n    BuildAction?: {\n      BuildActionEntries?: {\n        BuildActionEntry?: BuildActionEntryType[];\n      }[];\n    }[];\n    ArchiveAction?: {\n      $?: {\n        buildConfiguration?: string;\n      };\n    }[];\n  };\n}\n\ninterface BuildActionEntryType {\n  BuildableReference?: {\n    $?: {\n      BlueprintName?: string;\n      BuildableName?: string;\n    };\n  }[];\n}\n\nexport function getSchemesFromXcodeproj(projectRoot: string): string[] {\n  return findSchemeNames(projectRoot);\n}\n\nexport function getRunnableSchemesFromXcodeproj(\n  projectRoot: string,\n  { configuration = 'Debug' }: { configuration?: 'Debug' | 'Release' } = {}\n): { name: string; osType: string; type: string }[] {\n  const project = getPbxproj(projectRoot);\n\n  return findSignableTargets(project).map(([, target]) => {\n    let osType = 'iOS';\n    const type = unquote(target.productType);\n\n    if (type === TargetType.APPLICATION) {\n      // Attempt to resolve the platform SDK for each target so we can filter devices.\n      const xcConfigurationList =\n        project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];\n\n      if (xcConfigurationList) {\n        const buildConfiguration =\n          xcConfigurationList.buildConfigurations.find(\n            (value: { comment: string; value: string }) => value.comment === configuration\n          ) || xcConfigurationList.buildConfigurations[0];\n        if (buildConfiguration?.value) {\n          const xcBuildConfiguration =\n            project.hash.project.objects.XCBuildConfiguration?.[buildConfiguration.value];\n\n          const buildSdkRoot = xcBuildConfiguration.buildSettings.SDKROOT;\n          if (\n            buildSdkRoot === 'appletvos' ||\n            'TVOS_DEPLOYMENT_TARGET' in xcBuildConfiguration.buildSettings\n          ) {\n            // Is a TV app...\n            osType = 'tvOS';\n          } else if (buildSdkRoot === 'iphoneos') {\n            osType = 'iOS';\n          }\n        }\n      }\n    } else if (type === TargetType.WATCH) {\n      osType = 'watchOS';\n    }\n\n    return {\n      name: unquote(target.name),\n      osType,\n      type: unquote(target.productType),\n    };\n  });\n}\n\nasync function readSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<SchemeXML | undefined> {\n  const allSchemePaths = findSchemePaths(projectRoot);\n  const re = new RegExp(`/${scheme}.xcscheme`, 'i');\n  const schemePath = allSchemePaths.find(i => re.exec(i));\n  if (schemePath) {\n    return ((await readXMLAsync({ path: schemePath })) as unknown) as SchemeXML | undefined;\n  } else {\n    throw new Error(`scheme '${scheme}' does not exist, make sure it's marked as shared`);\n  }\n}\n\nexport async function getApplicationTargetNameForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildActionEntry =\n    schemeXML?.Scheme?.BuildAction?.[0]?.BuildActionEntries?.[0]?.BuildActionEntry;\n  const targetName =\n    buildActionEntry?.length === 1\n      ? getBlueprintName(buildActionEntry[0])\n      : getBlueprintName(\n          buildActionEntry?.find(entry => {\n            return entry.BuildableReference?.[0]?.['$']?.BuildableName?.endsWith('.app');\n          })\n        );\n  if (!targetName) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return targetName;\n}\n\nexport async function getArchiveBuildConfigurationForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildConfiguration = schemeXML?.Scheme?.ArchiveAction?.[0]?.['$']?.buildConfiguration;\n  if (!buildConfiguration) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return buildConfiguration;\n}\n\nfunction getBlueprintName(entry?: BuildActionEntryType): string | undefined {\n  return entry?.BuildableReference?.[0]?.['$']?.BlueprintName;\n}\n"]},"metadata":{},"sourceType":"script"}