{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar fs_1 = require(\"fs\");\n\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar platforms_1 = tslib_1.__importDefault(require(\"./platforms\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar certificates_1 = require(\"./certificates\");\n\nvar debug = debug_1.default('devcert:certificate-authority');\n\nfunction installCertificateAuthority() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n    var rootKeyPath;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            debug(\"Uninstalling existing certificates, which will be void once any existing CA is gone\");\n            uninstall();\n            constants_1.ensureConfigDirs();\n            debug(\"Making a temp working directory for files to copied in\");\n            rootKeyPath = utils_1.mktmp();\n            debug(\"Generating the OpenSSL configuration needed to setup the certificate authority\");\n            seedConfigFiles();\n            debug(\"Generating a private key\");\n            certificates_1.generateKey(rootKeyPath);\n            debug(\"Generating a CA certificate\");\n            utils_1.openssl(['req', '-new', '-x509', '-config', constants_1.caSelfSignConfig, '-key', rootKeyPath, '-out', constants_1.rootCACertPath, '-days', '825']);\n            debug('Saving certificate authority credentials');\n            _context.next = 14;\n            return saveCertificateAuthorityCredentials(rootKeyPath);\n\n          case 14:\n            debug(\"Adding the root certificate authority to trust stores\");\n            _context.next = 17;\n            return platforms_1.default.addToTrustStores(constants_1.rootCACertPath, options);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.default = installCertificateAuthority;\n\nfunction seedConfigFiles() {\n  fs_1.writeFileSync(constants_1.caVersionFile, '2');\n  fs_1.writeFileSync(constants_1.opensslDatabaseFilePath, '');\n  fs_1.writeFileSync(constants_1.opensslSerialFilePath, '01');\n}\n\nfunction withCertificateAuthorityCredentials(cb) {\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n    var tmpCAKeyPath, caKey;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            debug(\"Retrieving devcert's certificate authority credentials\");\n            tmpCAKeyPath = utils_1.mktmp();\n            _context2.next = 4;\n            return platforms_1.default.readProtectedFile(constants_1.rootCAKeyPath);\n\n          case 4:\n            caKey = _context2.sent;\n            fs_1.writeFileSync(tmpCAKeyPath, caKey);\n            _context2.next = 8;\n            return cb({\n              caKeyPath: tmpCAKeyPath,\n              caCertPath: constants_1.rootCACertPath\n            });\n\n          case 8:\n            fs_1.unlinkSync(tmpCAKeyPath);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.withCertificateAuthorityCredentials = withCertificateAuthorityCredentials;\n\nfunction saveCertificateAuthorityCredentials(keypath) {\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n    var key;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            debug(\"Saving devcert's certificate authority credentials\");\n            key = fs_1.readFileSync(keypath, 'utf-8');\n            _context3.next = 4;\n            return platforms_1.default.writeProtectedFile(constants_1.rootCAKeyPath, key);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nfunction certErrors() {\n  try {\n    utils_1.openssl(['x509', '-in', constants_1.rootCACertPath, '-noout']);\n    return '';\n  } catch (e) {\n    return e.toString();\n  }\n}\n\nfunction ensureCACertReadable() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee4() {\n    var caFileContents, remainingErrors;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (certErrors()) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 2:\n            _context4.prev = 2;\n            _context4.next = 5;\n            return platforms_1.default.readProtectedFile(constants_1.rootCACertPath);\n\n          case 5:\n            caFileContents = _context4.sent;\n            platforms_1.default.deleteProtectedFiles(constants_1.rootCACertPath);\n            fs_1.writeFileSync(constants_1.rootCACertPath, caFileContents);\n            _context4.next = 13;\n            break;\n\n          case 10:\n            _context4.prev = 10;\n            _context4.t0 = _context4[\"catch\"](2);\n            return _context4.abrupt(\"return\", installCertificateAuthority(options));\n\n          case 13:\n            remainingErrors = certErrors();\n\n            if (!remainingErrors) {\n              _context4.next = 16;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", installCertificateAuthority(options));\n\n          case 16:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[2, 10]]);\n  }));\n}\n\nexports.ensureCACertReadable = ensureCACertReadable;\n\nfunction uninstall() {\n  platforms_1.default.removeFromTrustStores(constants_1.rootCACertPath);\n  platforms_1.default.deleteProtectedFiles(constants_1.domainsDir);\n  platforms_1.default.deleteProtectedFiles(constants_1.rootCADir);\n  platforms_1.default.deleteProtectedFiles(constants_1.getLegacyConfigDir());\n}\n\nexports.uninstall = uninstall;","map":{"version":3,"sources":["certificate-authority.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AAKA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,eAAA;;AAYA,IAAA,WAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,eAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,WAAA;;AACA,IAAA,cAAA,GAAA,OAAA,kBAAA;;AAGA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAY,+BAAZ,CAAd;;AAMA,SAAA,2BAAA,GAA+E;AAAA,MAArB,OAAqB,uEAAF,EAAE;;;;;;;AAC7E,YAAA,KAAK,uFAAL;AACA,YAAA,SAAS;AACT,YAAA,WAAA,CAAA,gBAAA;AAEA,YAAA,KAAK,0DAAL;AACI,YAAA,W,GAAc,OAAA,CAAA,KAAA,E;AAElB,YAAA,KAAK,kFAAL;AACA,YAAA,eAAe;AAEf,YAAA,KAAK,4BAAL;AACA,YAAA,cAAA,CAAA,WAAA,CAAY,WAAZ;AAEA,YAAA,KAAK,+BAAL;AACA,YAAA,OAAA,CAAA,OAAA,CAAQ,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,SAAzB,EAAoC,WAAA,CAAA,gBAApC,EAAsD,MAAtD,EAA8D,WAA9D,EAA2E,MAA3E,EAAmF,WAAA,CAAA,cAAnF,EAAmG,OAAnG,EAA4G,KAA5G,CAAR;AAEA,YAAA,KAAK,CAAC,0CAAD,CAAL;;AACA,mBAAM,mCAAmC,CAAC,WAAD,CAAzC;;;AAEA,YAAA,KAAK,yDAAL;;AACA,mBAAM,WAAA,CAAA,OAAA,CAAgB,gBAAhB,CAAiC,WAAA,CAAA,cAAjC,EAAiD,OAAjD,CAAN;;;;;;;;;AACD;;AAtBD,OAAA,CAAA,OAAA,GAAA,2BAAA;;AA4BA,SAAA,eAAA,GAAA;AAEE,EAAA,IAAA,CAAA,aAAA,CAAU,WAAA,CAAA,aAAV,EAAyB,GAAzB;AAEA,EAAA,IAAA,CAAA,aAAA,CAAU,WAAA,CAAA,uBAAV,EAAmC,EAAnC;AACA,EAAA,IAAA,CAAA,aAAA,CAAU,WAAA,CAAA,qBAAV,EAAiC,IAAjC;AACD;;AAED,SAAA,mCAAA,CAA0D,EAA1D,EAA4J;;;;;;;AAC1J,YAAA,KAAK,0DAAL;AACI,YAAA,Y,GAAe,OAAA,CAAA,KAAA,E;;AACP,mBAAM,WAAA,CAAA,OAAA,CAAgB,iBAAhB,CAAkC,WAAA,CAAA,aAAlC,CAAN;;;AAAR,YAAA,K;AACJ,YAAA,IAAA,CAAA,aAAA,CAAU,YAAV,EAAwB,KAAxB;;AACA,mBAAM,EAAE,CAAC;AAAE,cAAA,SAAS,EAAE,YAAb;AAA2B,cAAA,UAAU,EAAE,WAAA,CAAA;AAAvC,aAAD,CAAR;;;AACA,YAAA,IAAA,CAAA,UAAA,CAAG,YAAH;;;;;;;;;AACD;;AAPD,OAAA,CAAA,mCAAA,GAAA,mCAAA;;AASA,SAAA,mCAAA,CAAmD,OAAnD,EAAkE;;;;;;;AAChE,YAAA,KAAK,sDAAL;AACI,YAAA,G,GAAM,IAAA,CAAA,YAAA,CAAS,OAAT,EAAkB,OAAlB,C;;AACV,mBAAM,WAAA,CAAA,OAAA,CAAgB,kBAAhB,CAAmC,WAAA,CAAA,aAAnC,EAAkD,GAAlD,CAAN;;;;;;;;;AACD;;AAGD,SAAA,UAAA,GAAA;AACE,MAAI;AACF,IAAA,OAAA,CAAA,OAAA,CAAQ,CAAC,MAAD,EAAS,KAAT,EAAgB,WAAA,CAAA,cAAhB,EAAgC,QAAhC,CAAR;AACA,WAAO,EAAP;AACD,GAHD,CAGE,OAAO,CAAP,EAAU;AACV,WAAO,CAAC,CAAC,QAAF,EAAP;AACD;AACF;;AAYD,SAAA,oBAAA,GAAgE;AAAA,MAArB,OAAqB,uEAAF,EAAE;;;;;;;gBACzD,UAAU,E;;;;;;;;;;AASU,mBAAM,WAAA,CAAA,OAAA,CAAgB,iBAAhB,CAAkC,WAAA,CAAA,cAAlC,CAAN;;;AAAjB,YAAA,c;AACN,YAAA,WAAA,CAAA,OAAA,CAAgB,oBAAhB,CAAqC,WAAA,CAAA,cAArC;AACA,YAAA,IAAA,CAAA,aAAA,CAAU,WAAA,CAAA,cAAV,EAA0B,cAA1B;;;;;;;8CAEO,2BAA2B,CAAC,OAAD,C;;;AAI9B,YAAA,e,GAAkB,UAAU,E;;iBAC9B,e;;;;;8CACK,2BAA2B,CAAC,OAAD,C;;;;;;;;;AAErC;;AAtBD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAqCA,SAAA,SAAA,GAAA;AACE,EAAA,WAAA,CAAA,OAAA,CAAgB,qBAAhB,CAAsC,WAAA,CAAA,cAAtC;AACA,EAAA,WAAA,CAAA,OAAA,CAAgB,oBAAhB,CAAqC,WAAA,CAAA,UAArC;AACA,EAAA,WAAA,CAAA,OAAA,CAAgB,oBAAhB,CAAqC,WAAA,CAAA,SAArC;AACA,EAAA,WAAA,CAAA,OAAA,CAAgB,oBAAhB,CAAqC,WAAA,CAAA,kBAAA,EAArC;AACD;;AALD,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["import {\n  unlinkSync as rm,\n  readFileSync as readFile,\n  writeFileSync as writeFile\n} from 'fs';\nimport createDebug from 'debug';\n\nimport {\n  domainsDir,\n  rootCADir,\n  ensureConfigDirs,\n  getLegacyConfigDir,\n  rootCAKeyPath,\n  rootCACertPath,\n  caSelfSignConfig,\n  opensslSerialFilePath,\n  opensslDatabaseFilePath,\n  caVersionFile\n} from './constants';\nimport currentPlatform from './platforms';\nimport { openssl, mktmp } from './utils';\nimport { generateKey } from './certificates';\nimport { Options } from './index';\n\nconst debug = createDebug('devcert:certificate-authority');\n\n/**\n * Install the once-per-machine trusted root CA. We'll use this CA to sign\n * per-app certs.\n */\nexport default async function installCertificateAuthority(options: Options = {}): Promise<void> {\n  debug(`Uninstalling existing certificates, which will be void once any existing CA is gone`);\n  uninstall();\n  ensureConfigDirs();\n\n  debug(`Making a temp working directory for files to copied in`);\n  let rootKeyPath = mktmp();\n\n  debug(`Generating the OpenSSL configuration needed to setup the certificate authority`);\n  seedConfigFiles();\n\n  debug(`Generating a private key`);\n  generateKey(rootKeyPath);\n\n  debug(`Generating a CA certificate`);\n  openssl(['req', '-new', '-x509', '-config', caSelfSignConfig, '-key', rootKeyPath, '-out', rootCACertPath, '-days', '825']);\n\n  debug('Saving certificate authority credentials');\n  await saveCertificateAuthorityCredentials(rootKeyPath);\n\n  debug(`Adding the root certificate authority to trust stores`);\n  await currentPlatform.addToTrustStores(rootCACertPath, options);\n}\n\n/**\n * Initializes the files OpenSSL needs to sign certificates as a certificate\n * authority, as well as our CA setup version\n */\nfunction seedConfigFiles() {\n  // This is v2 of the devcert certificate authority setup\n  writeFile(caVersionFile, '2');\n  // OpenSSL CA files\n  writeFile(opensslDatabaseFilePath, '');\n  writeFile(opensslSerialFilePath, '01');\n}\n\nexport async function withCertificateAuthorityCredentials(cb: ({ caKeyPath, caCertPath }: { caKeyPath: string, caCertPath: string }) => Promise<void> | void) {\n  debug(`Retrieving devcert's certificate authority credentials`);\n  let tmpCAKeyPath = mktmp();\n  let caKey = await currentPlatform.readProtectedFile(rootCAKeyPath);\n  writeFile(tmpCAKeyPath, caKey);\n  await cb({ caKeyPath: tmpCAKeyPath, caCertPath: rootCACertPath });\n  rm(tmpCAKeyPath);\n}\n\nasync function saveCertificateAuthorityCredentials(keypath: string) {\n  debug(`Saving devcert's certificate authority credentials`);\n  let key = readFile(keypath, 'utf-8');\n  await currentPlatform.writeProtectedFile(rootCAKeyPath, key);\n}\n\n\nfunction certErrors(): string {\n  try {\n    openssl(['x509', '-in', rootCACertPath, '-noout']);\n    return '';\n  } catch (e) {\n    return e.toString();\n  }\n}\n\n// This function helps to migrate from v1.0.x to >= v1.1.0.\n/**\n * Smoothly migrate the certificate storage from v1.0.x to >= v1.1.0.\n * In v1.1.0 there are new options for retrieving the CA cert directly,\n * to help third-party Node apps trust the root CA.\n * \n * If a v1.0.x cert already exists, then devcert has written it with\n * platform.writeProtectedFile(), so an unprivileged readFile cannot access it.\n * Pre-detect and remedy this; it should only happen once per installation.\n */\nexport async function ensureCACertReadable(options: Options = {}): Promise<void> {\n  if (!certErrors()) {\n    return;\n  }\n  /**\n   * on windows, writeProtectedFile left the cert encrypted on *nix, the cert\n   * has no read permissions either way, openssl will fail and that means we\n   * have to fix it\n   */\n  try {\n    const caFileContents = await currentPlatform.readProtectedFile(rootCACertPath);\n    currentPlatform.deleteProtectedFiles(rootCACertPath);\n    writeFile(rootCACertPath, caFileContents);\n  } catch (e) {\n    return installCertificateAuthority(options);\n  }\n  \n  // double check that we have a live one\n  const remainingErrors = certErrors();\n  if (remainingErrors) {\n    return installCertificateAuthority(options);\n  }\n}\n\n/**\n * Remove as much of the devcert files and state as we can. This is necessary\n * when generating a new root certificate, and should be available to API\n * consumers as well.\n * \n * Not all of it will be removable. If certutil is not installed, we'll leave\n * Firefox alone. We try to remove files with maximum permissions, and if that\n * fails, we'll silently fail.\n * \n * It's also possible that the command to untrust will not work, and we'll\n * silently fail that as well; with no existing certificates anymore, the\n * security exposure there is minimal.\n */\nexport function uninstall(): void {\n  currentPlatform.removeFromTrustStores(rootCACertPath);\n  currentPlatform.deleteProtectedFiles(domainsDir);\n  currentPlatform.deleteProtectedFiles(rootCADir);\n  currentPlatform.deleteProtectedFiles(getLegacyConfigDir());\n}"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}