{"ast":null,"code":"\"use strict\";\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar child_process_1 = require(\"child_process\");\n\nvar tmp_1 = tslib_1.__importDefault(require(\"tmp\"));\n\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\n\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\n\nvar sudo_prompt_1 = tslib_1.__importDefault(require(\"sudo-prompt\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar debug = debug_1.default('devcert:util');\n\nfunction openssl(args) {\n  return run('openssl', args, {\n    stdio: 'pipe',\n    env: _extends({\n      RANDFILE: path_1.default.join(constants_1.configPath('.rnd'))\n    }, process.env)\n  });\n}\n\nexports.openssl = openssl;\n\nfunction run(cmd, args) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  debug(\"execFileSync: `\" + cmd + \" \" + args.join(' ') + \"`\");\n  return child_process_1.execFileSync(cmd, args, options);\n}\n\nexports.run = run;\n\nfunction sudoAppend(file, input) {\n  run('sudo', ['tee', '-a', file], {\n    input: input\n  });\n}\n\nexports.sudoAppend = sudoAppend;\n\nfunction waitForUser() {\n  return new Promise(function (resolve) {\n    process.stdin.resume();\n    process.stdin.on('data', resolve);\n  });\n}\n\nexports.waitForUser = waitForUser;\n\nfunction reportableError(message) {\n  return new Error(message + \" | This is a bug in devcert, please report the issue at https://github.com/davewasmer/devcert/issues\");\n}\n\nexports.reportableError = reportableError;\n\nfunction mktmp() {\n  return tmp_1.default.fileSync({\n    discardDescriptor: true\n  }).name;\n}\n\nexports.mktmp = mktmp;\n\nfunction sudo(cmd) {\n  return new Promise(function (resolve, reject) {\n    sudo_prompt_1.default.exec(cmd, {\n      name: 'devcert'\n    }, function (err, stdout, stderr) {\n      var error = err || typeof stderr === 'string' && stderr.trim().length > 0 && new Error(stderr);\n      error ? reject(error) : resolve(stdout);\n    });\n  });\n}\n\nexports.sudo = sudo;","map":{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { execFileSync, ExecFileSyncOptions } from 'child_process';\nimport tmp from 'tmp';\nimport createDebug from 'debug';\nimport path from 'path';\nimport sudoPrompt from 'sudo-prompt';\n\nimport { configPath } from './constants';\n\nconst debug = createDebug('devcert:util');\n\nexport function openssl(args: string[]) {\n  return run('openssl', args, {\n    stdio: 'pipe',\n    env: Object.assign({\n      RANDFILE: path.join(configPath('.rnd'))\n    }, process.env)\n  });\n}\n\nexport function run(cmd: string, args: string[], options: ExecFileSyncOptions = {}) {\n  debug(`execFileSync: \\`${ cmd } ${args.join(' ')}\\``);\n  return execFileSync(cmd, args, options);\n}\n\nexport function sudoAppend(file: string, input: ExecFileSyncOptions[\"input\"]) {\n  run('sudo', ['tee', '-a', file], {\n    input\n  });\n}\n\nexport function waitForUser() {\n  return new Promise((resolve) => {\n    process.stdin.resume();\n    process.stdin.on('data', resolve);\n  });\n}\n\nexport function reportableError(message: string) {\n  return new Error(`${message} | This is a bug in devcert, please report the issue at https://github.com/davewasmer/devcert/issues`);\n}\n\nexport function mktmp() {\n  // discardDescriptor because windows complains the file is in use if we create a tmp file\n  // and then shell out to a process that tries to use it\n  return tmp.fileSync({ discardDescriptor: true }).name;\n}\n\nexport function sudo(cmd: string): Promise<string | null> {\n  return new Promise((resolve, reject) => {\n    sudoPrompt.exec(cmd, { name: 'devcert' }, (err: Error | null, stdout: string | null, stderr: string | null) => {\n      let error = err || (typeof stderr === 'string' && stderr.trim().length > 0 && new Error(stderr)) ;\n      error ? reject(error) : resolve(stdout);\n    });\n  });\n}\n"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}