{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRunOncePlugin = createRunOncePlugin;\nexports.withRunOnce = void 0;\n\nfunction _history() {\n  var data = require(\"../utils/history\");\n\n  _history = function _history() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withRunOnce = function withRunOnce(config, _ref) {\n  var plugin = _ref.plugin,\n      name = _ref.name,\n      version = _ref.version;\n\n  if ((0, _history().getHistoryItem)(config, name)) {\n    return config;\n  }\n\n  config = (0, _history().addHistoryItem)(config, {\n    name: name,\n    version: version\n  });\n  return plugin(config);\n};\n\nexports.withRunOnce = withRunOnce;\n\nfunction createRunOncePlugin(_plugin, name, version) {\n  return function (config, props) {\n    return withRunOnce(config, {\n      plugin: function plugin(config) {\n        return _plugin(config, props);\n      },\n      name: name,\n      version: version\n    });\n  };\n}","map":{"version":3,"sources":["../../src/plugins/withRunOnce.ts"],"names":["withRunOnce","version","config","name","plugin"],"mappings":";;;;;;;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,oBAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AASO,IAAMA,WAIX,GAAG,SAJQA,WAIR,CAAA,MAAA,QAAuC;AAAA,MAA9B,MAA8B,QAA9B,MAA8B;AAAA,MAA9B,IAA8B,QAA9B,IAA8B;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAE1C,MAAI,CAAA,GAAA,QAAA,GAAA,cAAA,EAAA,MAAA,EAAJ,IAAI,CAAJ,EAAkC;AAChC,WAAA,MAAA;AAHwC;;AAO1CC,EAAAA,MAAM,GAAG,CAAA,GAAA,QAAA,GAAA,cAAA,EAAA,MAAA,EAAuB;AAAEC,IAAAA,IAAF,EAAEA,IAAF;AAAQF,IAAAA,OAAAA,EAAAA;AAAR,GAAvB,CAATC;AAEA,SAAOE,MAAM,CAAb,MAAa,CAAb;AAbK,CAAA;;;;AAqBA,SAAA,mBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAIY;AACjB,SAAO,UAAA,MAAA,EAAA,KAAA,EAAmB;AACxB,WAAOJ,WAAW,CAAA,MAAA,EAAS;AAAEI,MAAAA,MAAM,EAAEF,gBAAAA,MAAM;AAAA,eAAIE,OAAM,CAAA,MAAA,EAA1B,KAA0B,CAAV;AAAA,OAAhB;AAA2CD,MAAAA,IAA3C,EAA2CA,IAA3C;AAAiDF,MAAAA,OAAAA,EAAAA;AAAjD,KAAT,CAAlB;AADF,GAAA;AAGD","sourcesContent":["import { ConfigPlugin } from '../Plugin.types';\nimport { addHistoryItem, getHistoryItem, PluginHistoryItem } from '../utils/history';\n\n/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */\nexport const withRunOnce: ConfigPlugin<{\n  plugin: ConfigPlugin<void>;\n  name: PluginHistoryItem['name'];\n  version?: PluginHistoryItem['version'];\n}> = (config, { plugin, name, version }) => {\n  // Detect if a plugin has already been run on this config.\n  if (getHistoryItem(config, name)) {\n    return config;\n  }\n\n  // Push the history item so duplicates cannot be run.\n  config = addHistoryItem(config, { name, version });\n\n  return plugin(config);\n};\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createRunOncePlugin<T>(\n  plugin: ConfigPlugin<T>,\n  name: string,\n  version?: string\n): ConfigPlugin<T> {\n  return (config, props) => {\n    return withRunOnce(config, { plugin: config => plugin(config, props), name, version });\n  };\n}\n"]},"metadata":{},"sourceType":"script"}