{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHtmlLoaderRule = exports.getBabelLoaderRule = exports.styleLoaderRule = exports.fallbackLoaderRule = exports.imageLoaderRule = void 0;\n\nvar paths_1 = require(\"@expo/config/paths\");\n\nvar env_1 = require(\"../env\");\n\nvar createBabelLoader_1 = __importDefault(require(\"./createBabelLoader\"));\n\nvar createFontLoader_1 = __importDefault(require(\"./createFontLoader\"));\n\nvar imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\nexports.imageLoaderRule = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: require.resolve('url-loader'),\n    options: {\n      limit: imageInlineSizeLimit,\n      esModule: false,\n      name: 'static/media/[name].[hash:8].[ext]'\n    }\n  }\n};\nexports.fallbackLoaderRule = {\n  loader: require.resolve('file-loader'),\n  exclude: [/\\.(mjs|[jt]sx?)$/, /\\.html$/, /\\.json$/],\n  options: {\n    esModule: false,\n    name: 'static/media/[name].[hash:8].[ext]'\n  }\n};\nexports.styleLoaderRule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')]\n};\n\nfunction createAllLoaders(env) {\n  env.projectRoot = env.projectRoot || paths_1.getPossibleProjectRoot();\n  env.config = env.config || env_1.getConfig(env);\n  env.locations = env.locations || env_1.getPaths(env.projectRoot, env);\n  var _env$locations = env.locations,\n      root = _env$locations.root,\n      includeModule = _env$locations.includeModule,\n      template = _env$locations.template;\n  var isNative = ['ios', 'android'].includes(env.platform);\n\n  if (isNative) {\n    return [getHtmlLoaderRule(template.folder), getBabelLoaderRule(env)];\n  }\n\n  return [getHtmlLoaderRule(template.folder), exports.imageLoaderRule, getBabelLoaderRule(env), createFontLoader_1.default(root, includeModule), exports.styleLoaderRule, exports.fallbackLoaderRule].filter(Boolean);\n}\n\nexports.default = createAllLoaders;\n\nfunction getBabelLoaderRule(env) {\n  var _a;\n\n  env.projectRoot = env.projectRoot || paths_1.getPossibleProjectRoot();\n  env.config = env.config || env_1.getConfig(env);\n  env.locations = env.locations || env_1.getPaths(env.projectRoot, env);\n  var _env$config$web = env.config.web;\n  _env$config$web = _env$config$web === void 0 ? {} : _env$config$web;\n  var _env$config$web$build = _env$config$web.build;\n  _env$config$web$build = _env$config$web$build === void 0 ? {} : _env$config$web$build;\n  var _env$config$web$build2 = _env$config$web$build.babel,\n      babel = _env$config$web$build2 === void 0 ? {} : _env$config$web$build2;\n  var root = babel.root,\n      verbose = babel.verbose,\n      _babel$include = babel.include,\n      include = _babel$include === void 0 ? [] : _babel$include,\n      use = babel.use;\n  var babelProjectRoot = root || env.projectRoot;\n  return createBabelLoader_1.default({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot: babelProjectRoot,\n    verbose: verbose,\n    include: [].concat(_toConsumableArray(include), _toConsumableArray(((_a = env.babel) === null || _a === void 0 ? void 0 : _a.dangerouslyAddModulePathsToTranspile) || [])),\n    use: use\n  });\n}\n\nexports.getBabelLoaderRule = getBabelLoaderRule;\n\nfunction getHtmlLoaderRule(exclude) {\n  return {\n    test: /\\.html$/,\n    use: [require.resolve('html-loader')],\n    exclude: exclude\n  };\n}\n\nexports.getHtmlLoaderRule = getHtmlLoaderRule;","map":{"version":3,"sources":["../../src/loaders/createAllLoaders.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport { Rule } from 'webpack';\n\nimport { getConfig, getPaths } from '../env';\nimport { Environment } from '../types';\nimport createBabelLoader from './createBabelLoader';\nimport createFontLoader from './createFontLoader';\n\n// Inline resources as Base64 when there is less reason to parallelize their download. The\n// heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n// send to request the resource.\n//\n// An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n// headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n// about 1000 bytes for content to fit in a packet.\nconst imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\n\n/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */\n// TODO: Bacon: Move SVG\nexport const imageLoaderRule: Rule = {\n  test: /\\.(gif|jpe?g|png|svg)$/,\n  use: {\n    loader: require.resolve('url-loader'),\n    options: {\n      limit: imageInlineSizeLimit,\n      // Interop assets like Metro bundler\n      esModule: false,\n      name: 'static/media/[name].[hash:8].[ext]',\n    },\n  },\n};\n\n/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */\nexport const fallbackLoaderRule: Rule = {\n  loader: require.resolve('file-loader'),\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise be processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n\n  // Excludes: js, jsx, ts, tsx, html, json\n  exclude: [/\\.(mjs|[jt]sx?)$/, /\\.html$/, /\\.json$/],\n  options: {\n    // Interop assets like Metro bundler\n    esModule: false,\n    name: 'static/media/[name].[hash:8].[ext]',\n  },\n};\n\n/**\n * Default CSS loader.\n *\n * @category loaders\n */\nexport const styleLoaderRule: Rule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')],\n};\n\n/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */\nexport default function createAllLoaders(\n  env: Pick<Environment, 'projectRoot' | 'locations' | 'mode' | 'config' | 'platform' | 'babel'>\n): Rule[] {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n  // @ts-ignore\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { root, includeModule, template } = env.locations;\n  const isNative = ['ios', 'android'].includes(env.platform);\n\n  if (isNative) {\n    // TODO: Support fallback loader + assets\n    return [getHtmlLoaderRule(template.folder), getBabelLoaderRule(env)];\n  }\n\n  return [\n    getHtmlLoaderRule(template.folder),\n    imageLoaderRule,\n    getBabelLoaderRule(env),\n    createFontLoader(root, includeModule),\n    styleLoaderRule,\n    // This needs to be the last loader\n    fallbackLoaderRule,\n  ].filter(Boolean) as Rule[];\n}\n\n/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */\nexport function getBabelLoaderRule(\n  env: Pick<Environment, 'projectRoot' | 'config' | 'locations' | 'mode' | 'platform' | 'babel'>\n): Rule {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { web: { build: { babel = {} } = {} } = {} } = env.config;\n\n  // TODO: deprecate app.json method in favor of env.babel\n  const { root, verbose, include = [], use } = babel;\n\n  const babelProjectRoot = root || env.projectRoot;\n\n  return createBabelLoader({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot,\n    verbose,\n    include: [...include, ...(env.babel?.dangerouslyAddModulePathsToTranspile || [])],\n    use,\n  });\n}\n\n/**\n *\n * @param exclude\n * @category loaders\n */\nexport function getHtmlLoaderRule(exclude: string): Rule {\n  return {\n    test: /\\.html$/,\n    use: [require.resolve('html-loader')],\n    exclude,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}