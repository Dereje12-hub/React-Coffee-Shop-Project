{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loginOrRegisterAsync = loginOrRegisterAsync;\nexports.loginOrRegisterIfLoggedOutAsync = loginOrRegisterIfLoggedOutAsync;\nexports.login = login;\nexports._retryUsernamePasswordAuthWithOTPAsync = _retryUsernamePasswordAuthWithOTPAsync;\nexports.openRegistrationInBrowser = openRegistrationInBrowser;\nexports.REGISTRATION_URL = exports.UserSecondFactorDeviceMethod = void 0;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commander() {\n  var data = _interopRequireDefault(require(\"commander\"));\n\n  _commander = function _commander() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _openBrowser() {\n  var data = _interopRequireDefault(require(\"react-dev-utils/openBrowser\"));\n\n  _openBrowser = function _openBrowser() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xdl() {\n  var data = require(\"xdl\");\n\n  _xdl = function _xdl() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ApiV() {\n  var data = require(\"xdl/build/ApiV2\");\n\n  _ApiV = function _ApiV() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _CommandError() {\n  var data = _interopRequireWildcard(require(\"./CommandError\"));\n\n  _CommandError = function _CommandError() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _log() {\n  var data = _interopRequireDefault(require(\"./log\"));\n\n  _log = function _log() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _prompts() {\n  var data = _interopRequireWildcard(require(\"./prompts\"));\n\n  _prompts = function _prompts() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  var data = require(\"./utils/ora\");\n\n  _ora = function _ora() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _validators() {\n  var data = require(\"./validators\");\n\n  _validators = function _validators() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n_xdl().UserManager.initialize();\n\nvar UserSecondFactorDeviceMethod;\nexports.UserSecondFactorDeviceMethod = UserSecondFactorDeviceMethod;\n\n(function (UserSecondFactorDeviceMethod) {\n  UserSecondFactorDeviceMethod[\"AUTHENTICATOR\"] = \"authenticator\";\n  UserSecondFactorDeviceMethod[\"SMS\"] = \"sms\";\n})(UserSecondFactorDeviceMethod || (exports.UserSecondFactorDeviceMethod = UserSecondFactorDeviceMethod = {}));\n\nfunction loginOrRegisterAsync() {\n  var question, _await, action;\n\n  return _regeneratorRuntime.async(function loginOrRegisterAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _log().default.warn('An Expo user account is required to proceed.');\n\n          if (!(process.env.EXPO_CLI_USERNAME && process.env.EXPO_CLI_PASSWORD)) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", login({\n            username: process.env.EXPO_CLI_USERNAME,\n            password: process.env.EXPO_CLI_PASSWORD\n          }));\n\n        case 3:\n          if (!_commander().default.nonInteractive) {\n            _context.next = 5;\n            break;\n          }\n\n          throw new (_CommandError().default)('NOT_LOGGED_IN', \"Not logged in. Use `\" + _commander().default.name() + \" login -u username -p password` to log in.\");\n\n        case 5:\n          question = {\n            type: 'select',\n            name: 'action',\n            message: 'How would you like to authenticate?',\n            choices: [{\n              title: 'Make a new Expo account',\n              value: 'register'\n            }, {\n              title: 'Log in with an existing Expo account',\n              value: 'existingUser'\n            }, {\n              title: 'Cancel',\n              value: 'cancel'\n            }]\n          };\n          _context.next = 8;\n          return _regeneratorRuntime.awrap((0, _prompts().default)(question));\n\n        case 8:\n          _await = _context.sent;\n          action = _await.action;\n\n          if (!(action === 'register')) {\n            _context.next = 17;\n            break;\n          }\n\n          openRegistrationInBrowser();\n\n          _log().default.newLine();\n\n          _log().default.log(\"Log in with \" + _chalk().default.bold('expo login') + \" after you have created your account through the website.\");\n\n          throw new (_CommandError().SilentError)();\n\n        case 17:\n          if (!(action === 'existingUser')) {\n            _context.next = 21;\n            break;\n          }\n\n          return _context.abrupt(\"return\", login({}));\n\n        case 21:\n          throw new (_CommandError().default)('BAD_CHOICE', 'Not logged in.');\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction loginOrRegisterIfLoggedOutAsync() {\n  var user;\n  return _regeneratorRuntime.async(function loginOrRegisterIfLoggedOutAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(_xdl().UserManager.getCurrentUserOnlyAsync());\n\n        case 2:\n          user = _context2.sent;\n\n          if (!user) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", user);\n\n        case 5:\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(loginOrRegisterAsync());\n\n        case 7:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction login(options) {\n  var user, nonInteractive, action;\n  return _regeneratorRuntime.async(function login$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(_xdl().UserManager.getCurrentUserAsync());\n\n        case 2:\n          user = _context3.sent;\n\n          if (!(user !== null && user !== void 0 && user.accessToken)) {\n            _context3.next = 5;\n            break;\n          }\n\n          throw new (_CommandError().default)('ACCESS_TOKEN_ERROR', 'Please remove the EXPO_TOKEN environment var to login with a different user.');\n\n        case 5:\n          nonInteractive = options.parent && options.parent.nonInteractive;\n\n          if (nonInteractive) {\n            _context3.next = 16;\n            break;\n          }\n\n          if (!user) {\n            _context3.next = 13;\n            break;\n          }\n\n          _context3.next = 10;\n          return _regeneratorRuntime.awrap((0, _prompts().confirmAsync)({\n            message: \"You are already logged in as \" + _chalk().default.green(user.username) + \". Log in as new user?\"\n          }));\n\n        case 10:\n          action = _context3.sent;\n\n          if (action) {\n            _context3.next = 13;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", user);\n\n        case 13:\n          return _context3.abrupt(\"return\", _usernamePasswordAuth(options.username, options.password, options.otp));\n\n        case 16:\n          if (!(options.username && options.password)) {\n            _context3.next = 20;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", _usernamePasswordAuth(options.username, options.password, options.otp));\n\n        case 20:\n          if (!(options.username && process.env.EXPO_CLI_PASSWORD)) {\n            _context3.next = 24;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp));\n\n        case 24:\n          throw new (_CommandError().default)('NON_INTERACTIVE', \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\");\n\n        case 25:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _promptForOTPAsync(cancelBehavior) {\n  var enterMessage, otpQuestion, _await2, otp;\n\n  return _regeneratorRuntime.async(function _promptForOTPAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          enterMessage = cancelBehavior === 'cancel' ? \"press \" + _log().default.chalk.bold('Enter') + \" to cancel\" : \"press \" + _log().default.chalk.bold('Enter') + \" for more options\";\n          otpQuestion = {\n            type: 'text',\n            name: 'otp',\n            message: \"One-time password or backup code (\" + enterMessage + \"):\"\n          };\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap((0, _prompts().default)(otpQuestion));\n\n        case 4:\n          _await2 = _context4.sent;\n          otp = _await2.otp;\n\n          if (otp) {\n            _context4.next = 8;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", null);\n\n        case 8:\n          return _context4.abrupt(\"return\", otp);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _promptForBackupOTPAsync(username, password, secondFactorDevices) {\n  var nonPrimarySecondFactorDevices, hasAuthenticatorSecondFactorDevice, smsNonPrimarySecondFactorDevices, authenticatorChoiceSentinel, cancelChoiceSentinel, deviceChoices, question, selectedValue, device, apiAnonymous;\n  return _regeneratorRuntime.async(function _promptForBackupOTPAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          nonPrimarySecondFactorDevices = secondFactorDevices.filter(function (device) {\n            return !device.is_primary;\n          });\n\n          if (!(nonPrimarySecondFactorDevices.length === 0)) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new (_CommandError().default)('LOGIN_CANCELLED', 'No other second-factor devices set up. Ensure you have set up and certified a backup device.');\n\n        case 3:\n          hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(function (device) {\n            return device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR;\n          });\n          smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(function (device) {\n            return device.method === UserSecondFactorDeviceMethod.SMS;\n          });\n          authenticatorChoiceSentinel = -1;\n          cancelChoiceSentinel = -2;\n          deviceChoices = smsNonPrimarySecondFactorDevices.map(function (device, idx) {\n            return {\n              title: device.sms_phone_number,\n              value: idx\n            };\n          });\n\n          if (hasAuthenticatorSecondFactorDevice) {\n            deviceChoices.push({\n              title: 'Authenticator',\n              value: authenticatorChoiceSentinel\n            });\n          }\n\n          deviceChoices.push({\n            title: 'Cancel',\n            value: cancelChoiceSentinel\n          });\n          question = {\n            message: 'Select a second-factor device:',\n            choices: deviceChoices\n          };\n          _context5.next = 13;\n          return _regeneratorRuntime.awrap((0, _prompts().selectAsync)(question));\n\n        case 13:\n          selectedValue = _context5.sent;\n\n          if (!(selectedValue === cancelChoiceSentinel)) {\n            _context5.next = 18;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", null);\n\n        case 18:\n          if (!(selectedValue === authenticatorChoiceSentinel)) {\n            _context5.next = 22;\n            break;\n          }\n\n          _context5.next = 21;\n          return _regeneratorRuntime.awrap(_promptForOTPAsync('cancel'));\n\n        case 21:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 22:\n          device = smsNonPrimarySecondFactorDevices[selectedValue];\n          apiAnonymous = _xdl().ApiV2.clientForUser();\n          _context5.next = 26;\n          return _regeneratorRuntime.awrap(apiAnonymous.postAsync('auth/send-sms-otp', {\n            username: username,\n            password: password,\n            secondFactorDeviceID: device.id\n          }));\n\n        case 26:\n          _context5.next = 28;\n          return _regeneratorRuntime.awrap(_promptForOTPAsync('cancel'));\n\n        case 28:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 29:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _retryUsernamePasswordAuthWithOTPAsync(username, password, metadata) {\n  var secondFactorDevices, smsAutomaticallySent, primaryDevice, otp;\n  return _regeneratorRuntime.async(function _retryUsernamePasswordAuthWithOTPAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          secondFactorDevices = metadata.secondFactorDevices, smsAutomaticallySent = metadata.smsAutomaticallySent;\n          (0, _assert().default)(secondFactorDevices !== undefined && smsAutomaticallySent !== undefined, \"Malformed OTP error metadata: \" + metadata);\n          primaryDevice = secondFactorDevices.find(function (device) {\n            return device.is_primary;\n          });\n          otp = null;\n\n          if (!smsAutomaticallySent) {\n            _context6.next = 10;\n            break;\n          }\n\n          (0, _assert().default)(primaryDevice, 'OTP should only automatically be sent when there is a primary device');\n\n          _log().default.nested(\"One-time password was sent to the phone number ending in \" + primaryDevice.sms_phone_number + \".\");\n\n          _context6.next = 9;\n          return _regeneratorRuntime.awrap(_promptForOTPAsync('menu'));\n\n        case 9:\n          otp = _context6.sent;\n\n        case 10:\n          if (!((primaryDevice === null || primaryDevice === void 0 ? void 0 : primaryDevice.method) === UserSecondFactorDeviceMethod.AUTHENTICATOR)) {\n            _context6.next = 15;\n            break;\n          }\n\n          _log().default.nested('One-time password from authenticator required.');\n\n          _context6.next = 14;\n          return _regeneratorRuntime.awrap(_promptForOTPAsync('menu'));\n\n        case 14:\n          otp = _context6.sent;\n\n        case 15:\n          if (otp) {\n            _context6.next = 19;\n            break;\n          }\n\n          _context6.next = 18;\n          return _regeneratorRuntime.awrap(_promptForBackupOTPAsync(username, password, secondFactorDevices));\n\n        case 18:\n          otp = _context6.sent;\n\n        case 19:\n          if (otp) {\n            _context6.next = 21;\n            break;\n          }\n\n          throw new (_CommandError().default)('LOGIN_CANCELLED', 'Cancelled login');\n\n        case 21:\n          _context6.next = 23;\n          return _regeneratorRuntime.awrap(_xdl().UserManager.loginAsync('user-pass', {\n            username: username,\n            password: password,\n            otp: otp\n          }));\n\n        case 23:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 24:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction _usernamePasswordAuth(username, password, otp) {\n  var questions, answers, data, user;\n  return _regeneratorRuntime.async(function _usernamePasswordAuth$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          questions = [];\n\n          if (!username) {\n            questions.push({\n              type: 'text',\n              name: 'username',\n              message: 'Username/Email Address:',\n              format: function format(val) {\n                return val.trim();\n              },\n              validate: _validators().nonEmptyInput\n            });\n          }\n\n          if (!password) {\n            questions.push({\n              type: 'password',\n              name: 'password',\n              message: 'Password:',\n              format: function format(val) {\n                return val.trim();\n              },\n              validate: _validators().nonEmptyInput\n            });\n          }\n\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap((0, _prompts().default)(questions));\n\n        case 5:\n          answers = _context7.sent;\n          data = {\n            username: username || answers.username,\n            password: password || answers.password,\n            otp: otp || answers.otp\n          };\n          _context7.prev = 7;\n          _context7.next = 10;\n          return _regeneratorRuntime.awrap(_xdl().UserManager.loginAsync('user-pass', data));\n\n        case 10:\n          user = _context7.sent;\n          _context7.next = 22;\n          break;\n\n        case 13:\n          _context7.prev = 13;\n          _context7.t0 = _context7[\"catch\"](7);\n\n          if (!(_context7.t0 instanceof _ApiV().ApiV2Error && _context7.t0.code === 'ONE_TIME_PASSWORD_REQUIRED')) {\n            _context7.next = 21;\n            break;\n          }\n\n          _context7.next = 18;\n          return _regeneratorRuntime.awrap(_retryUsernamePasswordAuthWithOTPAsync(data.username, data.password, _context7.t0.metadata));\n\n        case 18:\n          user = _context7.sent;\n          _context7.next = 22;\n          break;\n\n        case 21:\n          throw _context7.t0;\n\n        case 22:\n          if (!user) {\n            _context7.next = 27;\n            break;\n          }\n\n          _log().default.log(\"\\nSuccess. You are now logged in as \" + _chalk().default.green(user.username) + \".\");\n\n          return _context7.abrupt(\"return\", user);\n\n        case 27:\n          throw new Error('Unexpected Error: No user returned from the API');\n\n        case 28:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[7, 13]], Promise);\n}\n\nvar REGISTRATION_URL = \"https://expo.dev/signup\";\nexports.REGISTRATION_URL = REGISTRATION_URL;\n\nfunction openRegistrationInBrowser() {\n  var spinner = (0, _ora().ora)(\"Opening \" + REGISTRATION_URL + \"...\").start();\n  var opened = (0, _openBrowser().default)(REGISTRATION_URL);\n\n  if (opened) {\n    spinner.succeed(\"Opened \" + REGISTRATION_URL + \" in your web browser.\");\n  } else {\n    spinner.fail(\"Unable to open a web browser. Please open your browser and navigate to \" + REGISTRATION_URL + \".\");\n  }\n}","map":{"version":3,"sources":["../src/accounts.ts"],"names":["UserManager","UserSecondFactorDeviceMethod","Log","process","login","username","password","EXPO_CLI_PASSWORD","program","CommandError","question","type","name","message","choices","title","value","action","openRegistrationInBrowser","chalk","SilentError","user","loginOrRegisterAsync","nonInteractive","options","_usernamePasswordAuth","enterMessage","cancelBehavior","otpQuestion","otp","nonPrimarySecondFactorDevices","secondFactorDevices","device","hasAuthenticatorSecondFactorDevice","smsNonPrimarySecondFactorDevices","authenticatorChoiceSentinel","cancelChoiceSentinel","deviceChoices","idx","selectedValue","_promptForOTPAsync","apiAnonymous","ApiV2","secondFactorDeviceID","id","smsAutomaticallySent","primaryDevice","_promptForBackupOTPAsync","questions","format","val","validate","nonEmptyInput","answers","data","e","ApiV2Error","_retryUsernamePasswordAuthWithOTPAsync","REGISTRATION_URL","spinner","opened"],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport chalk from 'chalk';\nimport program from 'commander';\nimport openBrowser from 'react-dev-utils/openBrowser';\nimport { ApiV2, User, UserManager } from 'xdl';\nimport { ApiV2Error } from 'xdl/build/ApiV2';\n\nimport CommandError, { SilentError } from './CommandError';\nimport Log from './log';\nimport promptNew, { confirmAsync, Question as NewQuestion, selectAsync } from './prompts';\nimport { ora } from './utils/ora';\nimport { nonEmptyInput } from './validators';\n\nUserManager.initialize();\n\nexport type CommandOptions = {\n  username?: string;\n  password?: string;\n  otp?: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n};\n\nexport enum UserSecondFactorDeviceMethod {\n  AUTHENTICATOR = 'authenticator',\n  SMS = 'sms',\n}\n\nexport type SecondFactorDevice = {\n  id: string;\n  method: UserSecondFactorDeviceMethod;\n  sms_phone_number: string | null;\n  is_primary: boolean;\n};\n\nexport async function loginOrRegisterAsync(): Promise<User> {\n  Log.warn('An Expo user account is required to proceed.');\n\n  // Always try to auto-login when these variables are set, even in non-interactive mode\n  if (process.env.EXPO_CLI_USERNAME && process.env.EXPO_CLI_PASSWORD) {\n    return login({\n      username: process.env.EXPO_CLI_USERNAME,\n      password: process.env.EXPO_CLI_PASSWORD,\n    });\n  }\n\n  if (program.nonInteractive) {\n    throw new CommandError(\n      'NOT_LOGGED_IN',\n      `Not logged in. Use \\`${program.name()} login -u username -p password\\` to log in.`\n    );\n  }\n\n  const question: NewQuestion = {\n    type: 'select',\n    name: 'action',\n    message: 'How would you like to authenticate?',\n    choices: [\n      {\n        title: 'Make a new Expo account',\n        value: 'register',\n      },\n      {\n        title: 'Log in with an existing Expo account',\n        value: 'existingUser',\n      },\n      {\n        title: 'Cancel',\n        value: 'cancel',\n      },\n    ],\n  };\n\n  const { action } = await promptNew(question);\n\n  if (action === 'register') {\n    openRegistrationInBrowser();\n    Log.newLine();\n    Log.log(\n      `Log in with ${chalk.bold(\n        'expo login'\n      )} after you have created your account through the website.`\n    );\n    throw new SilentError();\n  } else if (action === 'existingUser') {\n    return login({});\n  } else {\n    throw new CommandError('BAD_CHOICE', 'Not logged in.');\n  }\n}\n\nexport async function loginOrRegisterIfLoggedOutAsync(): Promise<User> {\n  const user = await UserManager.getCurrentUserOnlyAsync();\n  if (user) {\n    return user;\n  }\n  return await loginOrRegisterAsync();\n}\n\nexport async function login(options: CommandOptions): Promise<User> {\n  const user = await UserManager.getCurrentUserAsync();\n  if (user?.accessToken) {\n    throw new CommandError(\n      'ACCESS_TOKEN_ERROR',\n      'Please remove the EXPO_TOKEN environment var to login with a different user.'\n    );\n  }\n\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!nonInteractive) {\n    if (user) {\n      const action = await confirmAsync({\n        message: `You are already logged in as ${chalk.green(user.username)}. Log in as new user?`,\n      });\n      if (!action) {\n        // If user chooses to stay logged in, return\n        return user as User;\n      }\n    }\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && options.password) {\n    return _usernamePasswordAuth(options.username, options.password, options.otp);\n  } else if (options.username && process.env.EXPO_CLI_PASSWORD) {\n    return _usernamePasswordAuth(options.username, process.env.EXPO_CLI_PASSWORD, options.otp);\n  } else {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      \"Username and password not provided in non-interactive mode. Set the EXPO_CLI_PASSWORD environment variable if you don't want to pass in passwords through the command line.\"\n    );\n  }\n}\n\n/**\n * Prompt for an OTP with the option to cancel the question by answering empty (pressing return key).\n */\nasync function _promptForOTPAsync(cancelBehavior: 'cancel' | 'menu'): Promise<string | null> {\n  const enterMessage =\n    cancelBehavior === 'cancel'\n      ? `press ${Log.chalk.bold('Enter')} to cancel`\n      : `press ${Log.chalk.bold('Enter')} for more options`;\n  const otpQuestion: NewQuestion = {\n    type: 'text',\n    name: 'otp',\n    message: `One-time password or backup code (${enterMessage}):`,\n  };\n\n  const { otp } = await promptNew(otpQuestion);\n  if (!otp) {\n    return null;\n  }\n\n  return otp;\n}\n\n/**\n * Prompt for user to choose a backup OTP method. If selected method is SMS, a request\n * for a new OTP will be sent to that method. Then, prompt for the OTP, and retry the user login.\n */\nasync function _promptForBackupOTPAsync(\n  username: string,\n  password: string,\n  secondFactorDevices: SecondFactorDevice[]\n): Promise<string | null> {\n  const nonPrimarySecondFactorDevices = secondFactorDevices.filter(device => !device.is_primary);\n\n  if (nonPrimarySecondFactorDevices.length === 0) {\n    throw new CommandError(\n      'LOGIN_CANCELLED',\n      'No other second-factor devices set up. Ensure you have set up and certified a backup device.'\n    );\n  }\n\n  const hasAuthenticatorSecondFactorDevice = nonPrimarySecondFactorDevices.find(\n    device => device.method === UserSecondFactorDeviceMethod.AUTHENTICATOR\n  );\n\n  const smsNonPrimarySecondFactorDevices = nonPrimarySecondFactorDevices.filter(\n    device => device.method === UserSecondFactorDeviceMethod.SMS\n  );\n\n  const authenticatorChoiceSentinel = -1;\n  const cancelChoiceSentinel = -2;\n\n  const deviceChoices = smsNonPrimarySecondFactorDevices.map((device, idx) => ({\n    title: device.sms_phone_number!,\n    value: idx,\n  }));\n\n  if (hasAuthenticatorSecondFactorDevice) {\n    deviceChoices.push({\n      title: 'Authenticator',\n      value: authenticatorChoiceSentinel,\n    });\n  }\n\n  deviceChoices.push({\n    title: 'Cancel',\n    value: cancelChoiceSentinel,\n  });\n\n  const question = {\n    message: 'Select a second-factor device:',\n    choices: deviceChoices,\n  };\n\n  const selectedValue = await selectAsync(question);\n  if (selectedValue === cancelChoiceSentinel) {\n    return null;\n  } else if (selectedValue === authenticatorChoiceSentinel) {\n    return await _promptForOTPAsync('cancel');\n  }\n\n  const device = smsNonPrimarySecondFactorDevices[selectedValue];\n\n  const apiAnonymous = ApiV2.clientForUser();\n  await apiAnonymous.postAsync('auth/send-sms-otp', {\n    username,\n    password,\n    secondFactorDeviceID: device.id,\n  });\n\n  return await _promptForOTPAsync('cancel');\n}\n\n/**\n * Handle the special case error indicating that a second-factor is required for\n * authentication.\n *\n * There are three cases we need to handle:\n * 1. User's primary second-factor device was SMS, OTP was automatically sent by the server to that\n *    device already. In this case we should just prompt for the SMS OTP (or backup code), which the\n *    user should be receiving shortly. We should give the user a way to cancel and the prompt and move\n *    to case 3 below.\n * 2. User's primary second-factor device is authenticator. In this case we should prompt for authenticator\n *    OTP (or backup code) and also give the user a way to cancel and move to case 3 below.\n * 3. User doesn't have a primary device or doesn't have access to their primary device. In this case\n *    we should show a picker of the SMS devices that they can have an OTP code sent to, and when\n *    the user picks one we show a prompt() for the sent OTP.\n */\nexport async function _retryUsernamePasswordAuthWithOTPAsync(\n  username: string,\n  password: string,\n  metadata: {\n    secondFactorDevices?: SecondFactorDevice[];\n    smsAutomaticallySent?: boolean;\n  }\n): Promise<User> {\n  const { secondFactorDevices, smsAutomaticallySent } = metadata;\n  assert(\n    secondFactorDevices !== undefined && smsAutomaticallySent !== undefined,\n    `Malformed OTP error metadata: ${metadata}`\n  );\n\n  const primaryDevice = secondFactorDevices.find(device => device.is_primary);\n  let otp: string | null = null;\n\n  if (smsAutomaticallySent) {\n    assert(primaryDevice, 'OTP should only automatically be sent when there is a primary device');\n    Log.nested(\n      `One-time password was sent to the phone number ending in ${primaryDevice.sms_phone_number}.`\n    );\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  if (primaryDevice?.method === UserSecondFactorDeviceMethod.AUTHENTICATOR) {\n    Log.nested('One-time password from authenticator required.');\n    otp = await _promptForOTPAsync('menu');\n  }\n\n  // user bailed on case 1 or 2, wants to move to case 3\n  if (!otp) {\n    otp = await _promptForBackupOTPAsync(username, password, secondFactorDevices);\n  }\n\n  if (!otp) {\n    throw new CommandError('LOGIN_CANCELLED', 'Cancelled login');\n  }\n\n  return await UserManager.loginAsync('user-pass', {\n    username,\n    password,\n    otp,\n  });\n}\n\nasync function _usernamePasswordAuth(\n  username?: string,\n  password?: string,\n  otp?: string\n): Promise<User> {\n  const questions: NewQuestion[] = [];\n  if (!username) {\n    questions.push({\n      type: 'text',\n      name: 'username',\n      message: 'Username/Email Address:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  if (!password) {\n    questions.push({\n      type: 'password',\n      name: 'password',\n      message: 'Password:',\n      format: val => val.trim(),\n      validate: nonEmptyInput,\n    });\n  }\n\n  const answers = await promptNew(questions);\n\n  const data = {\n    username: username || answers.username,\n    password: password || answers.password,\n    otp: otp || answers.otp,\n  };\n\n  let user: User;\n  try {\n    user = await UserManager.loginAsync('user-pass', data);\n  } catch (e) {\n    if (e instanceof ApiV2Error && e.code === 'ONE_TIME_PASSWORD_REQUIRED') {\n      user = await _retryUsernamePasswordAuthWithOTPAsync(\n        data.username,\n        data.password,\n        e.metadata as any\n      );\n    } else {\n      throw e;\n    }\n  }\n\n  if (user) {\n    Log.log(`\\nSuccess. You are now logged in as ${chalk.green(user.username)}.`);\n    return user;\n  } else {\n    throw new Error('Unexpected Error: No user returned from the API');\n  }\n}\n\nexport const REGISTRATION_URL = `https://expo.dev/signup`;\n\nexport function openRegistrationInBrowser() {\n  const spinner = ora(`Opening ${REGISTRATION_URL}...`).start();\n  const opened = openBrowser(REGISTRATION_URL);\n\n  if (opened) {\n    spinner.succeed(`Opened ${REGISTRATION_URL} in your web browser.`);\n  } else {\n    spinner.fail(\n      `Unable to open a web browser. Please open your browser and navigate to ${REGISTRATION_URL}.`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}