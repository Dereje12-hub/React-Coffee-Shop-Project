{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fieldPathToSchema = exports.schemaPointerToFieldPath = exports.fieldPathToSchemaPath = void 0;\n\nvar fill_1 = __importDefault(require(\"lodash/fill\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar get_1 = __importDefault(require(\"lodash/get\"));\n\nvar zip_1 = __importDefault(require(\"lodash/zip\"));\n\nvar fieldPathToSchemaPath = function fieldPathToSchemaPath(fieldPath) {\n  var newPath = zip_1.default(fill_1.default(fieldPath.split('.'), 'properties'), fieldPath.split('.'));\n  return flatten_1.default(newPath).join('.');\n};\n\nexports.fieldPathToSchemaPath = fieldPathToSchemaPath;\n\nvar schemaPointerToFieldPath = function schemaPointerToFieldPath(jsonPointer) {\n  return jsonPointer.split('/').slice(2).filter(function (e) {\n    return e !== 'properties';\n  }).join('.');\n};\n\nexports.schemaPointerToFieldPath = schemaPointerToFieldPath;\n\nvar fieldPathToSchema = function fieldPathToSchema(schema, fieldPath) {\n  return get_1.default(schema, exports.fieldPathToSchemaPath(fieldPath));\n};\n\nexports.fieldPathToSchema = fieldPathToSchema;","map":{"version":3,"sources":["../src/Util.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAEO,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,SAAD,EAAsB;AACzD,MAAM,OAAO,GAAG,KAAA,CAAA,OAAA,CAAI,MAAA,CAAA,OAAA,CAAK,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAL,EAA2B,YAA3B,CAAJ,EAA8C,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAA9C,CAAhB;AACA,SAAO,SAAA,CAAA,OAAA,CAAQ,OAAR,EAAiB,IAAjB,CAAsB,GAAtB,CAAP;AACD,CAHM;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB;;AAKN,IAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CAAC,WAAD,EAAwB;AAC9D,SAAO,WAAW,CACf,KADI,CACE,GADF,EAEJ,KAFI,CAEE,CAFF,EAGJ,MAHI,CAGG,UAAA,CAAC;AAAA,WAAI,CAAC,KAAK,YAAV;AAAA,GAHJ,EAIJ,IAJI,CAIC,GAJD,CAAP;AAKD,CANM;;AAAM,OAAA,CAAA,wBAAA,GAAwB,wBAAxB;;AAQN,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,MAAD,EAAiB,SAAjB,EAAsC;AACrE,SAAO,KAAA,CAAA,OAAA,CAAI,MAAJ,EAAY,OAAA,CAAA,qBAAA,CAAsB,SAAtB,CAAZ,CAAP;AACD,CAFM;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB","sourcesContent":["import fill from 'lodash/fill';\nimport flatten from 'lodash/flatten';\nimport get from 'lodash/get';\nimport zip from 'lodash/zip';\n\nexport const fieldPathToSchemaPath = (fieldPath: string) => {\n  const newPath = zip(fill(fieldPath.split('.'), 'properties'), fieldPath.split('.'));\n  return flatten(newPath).join('.');\n};\n// Assumption: used only for jsonPointer returned from traverse\nexport const schemaPointerToFieldPath = (jsonPointer: string) => {\n  return jsonPointer\n    .split('/')\n    .slice(2)\n    .filter(e => e !== 'properties')\n    .join('.');\n};\n\nexport const fieldPathToSchema = (schema: object, fieldPath: string) => {\n  return get(schema, fieldPathToSchemaPath(fieldPath));\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}