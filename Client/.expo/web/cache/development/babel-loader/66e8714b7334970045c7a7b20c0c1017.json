{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar path = require('path');\n\nvar childProcess = require('child_process');\n\nvar fs = require('fs');\n\nvar isWsl = require('is-wsl');\n\nvar pAccess = promisify(fs.access);\nvar pExecFile = promisify(childProcess.execFile);\nvar localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nvar wslToWindowsPath = function wslToWindowsPath(path) {\n  var _await$pExecFile, stdout;\n\n  return _regeneratorRuntime.async(function wslToWindowsPath$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(pExecFile('wslpath', ['-w', path]));\n\n        case 2:\n          _await$pExecFile = _context.sent;\n          stdout = _await$pExecFile.stdout;\n          return _context.abrupt(\"return\", stdout.trim());\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = function _callee(target, options) {\n  var command, appArguments, cliArguments, childProcessOptions, windowsPath, isBundled, exeLocalXdgOpen, useSystemXdgOpen, subprocess;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!(typeof target !== 'string')) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new TypeError('Expected a `target`');\n\n        case 2:\n          options = _objectSpread({\n            wait: false,\n            background: false\n          }, options);\n          appArguments = [];\n          cliArguments = [];\n          childProcessOptions = {};\n\n          if (Array.isArray(options.app)) {\n            appArguments = options.app.slice(1);\n            options.app = options.app[0];\n          }\n\n          if (!(process.platform === 'darwin')) {\n            _context2.next = 14;\n            break;\n          }\n\n          command = 'open';\n\n          if (options.wait) {\n            cliArguments.push('--wait-apps');\n          }\n\n          if (options.background) {\n            cliArguments.push('--background');\n          }\n\n          if (options.app) {\n            cliArguments.push('-a', options.app);\n          }\n\n          _context2.next = 47;\n          break;\n\n        case 14:\n          if (!(process.platform === 'win32' || isWsl)) {\n            _context2.next = 29;\n            break;\n          }\n\n          command = 'cmd' + (isWsl ? '.exe' : '');\n          cliArguments.push('/c', 'start', '\"\"', '/b');\n          target = target.replace(/&/g, '^&');\n\n          if (options.wait) {\n            cliArguments.push('/wait');\n          }\n\n          if (!options.app) {\n            _context2.next = 26;\n            break;\n          }\n\n          if (!(isWsl && options.app.startsWith('/mnt/'))) {\n            _context2.next = 25;\n            break;\n          }\n\n          _context2.next = 23;\n          return _regeneratorRuntime.awrap(wslToWindowsPath(options.app));\n\n        case 23:\n          windowsPath = _context2.sent;\n          options.app = windowsPath;\n\n        case 25:\n          cliArguments.push(options.app);\n\n        case 26:\n          if (appArguments.length > 0) {\n            cliArguments.push.apply(cliArguments, _toConsumableArray(appArguments));\n          }\n\n          _context2.next = 47;\n          break;\n\n        case 29:\n          if (!options.app) {\n            _context2.next = 33;\n            break;\n          }\n\n          command = options.app;\n          _context2.next = 45;\n          break;\n\n        case 33:\n          isBundled = !__dirname || __dirname === '/';\n          exeLocalXdgOpen = false;\n          _context2.prev = 35;\n          _context2.next = 38;\n          return _regeneratorRuntime.awrap(pAccess(localXdgOpenPath, fs.constants.X_OK));\n\n        case 38:\n          exeLocalXdgOpen = true;\n          _context2.next = 43;\n          break;\n\n        case 41:\n          _context2.prev = 41;\n          _context2.t0 = _context2[\"catch\"](35);\n\n        case 43:\n          useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n          command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\n        case 45:\n          if (appArguments.length > 0) {\n            cliArguments.push.apply(cliArguments, _toConsumableArray(appArguments));\n          }\n\n          if (!options.wait) {\n            childProcessOptions.stdio = 'ignore';\n            childProcessOptions.detached = true;\n          }\n\n        case 47:\n          cliArguments.push(target);\n\n          if (process.platform === 'darwin' && appArguments.length > 0) {\n            cliArguments.push.apply(cliArguments, ['--args'].concat(_toConsumableArray(appArguments)));\n          }\n\n          subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n          if (!options.wait) {\n            _context2.next = 52;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n            subprocess.once('error', reject);\n            subprocess.once('close', function (exitCode) {\n              if (exitCode > 0) {\n                reject(new Error(\"Exited with code \" + exitCode));\n                return;\n              }\n\n              resolve(subprocess);\n            });\n          }));\n\n        case 52:\n          subprocess.unref();\n          return _context2.abrupt(\"return\", subprocess);\n\n        case 54:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[35, 41]], Promise);\n};","map":{"version":3,"sources":["C:/Users/Dereje/node_modules/@react-native-community/cli-tools/node_modules/open/index.js"],"names":["require","promisify","path","childProcess","fs","isWsl","pAccess","access","pExecFile","execFile","localXdgOpenPath","join","__dirname","wslToWindowsPath","stdout","trim","module","exports","target","options","TypeError","wait","background","appArguments","cliArguments","childProcessOptions","Array","isArray","app","slice","process","platform","command","push","replace","startsWith","windowsPath","length","isBundled","exeLocalXdgOpen","constants","X_OK","useSystemXdgOpen","versions","electron","stdio","detached","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref"],"mappings":"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","sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` → `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(options.app)) {\n\t\tappArguments = options.app.slice(1);\n\t\toptions.app = options.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tcliArguments.push('-a', options.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcommand = 'cmd' + (isWsl ? '.exe' : '');\n\t\tcliArguments.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('/wait');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tif (isWsl && options.app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(options.app);\n\t\t\t\toptions.app = windowsPath;\n\t\t\t}\n\n\t\t\tcliArguments.push(options.app);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\t} else {\n\t\tif (options.app) {\n\t\t\tcommand = options.app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (error) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"]},"metadata":{},"sourceType":"script"}