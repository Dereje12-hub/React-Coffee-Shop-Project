{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withInternal = exports.EXPO_DEBUG = void 0;\n\nfunction _getenv() {\n  var data = require(\"getenv\");\n\n  _getenv = function _getenv() {\n    return data;\n  };\n\n  return data;\n}\n\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nexports.EXPO_DEBUG = EXPO_DEBUG;\n\nvar withInternal = function withInternal(config, internals) {\n  if (!config._internal) {\n    config._internal = {};\n  }\n\n  config._internal = _objectSpread(_objectSpread({\n    isDebug: EXPO_DEBUG\n  }, config._internal), internals);\n  return config;\n};\n\nexports.withInternal = withInternal;","map":{"version":3,"sources":["../../src/plugins/withInternal.ts"],"names":["EXPO_DEBUG","withInternal","config","isDebug","internals"],"mappings":";;;;;;;;;;;;;AACA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAIO,IAAMA,UAAU,GAAG,CAAA,GAAA,OAAA,GAAA,OAAA,EAAA,YAAA,EAAnB,KAAmB,CAAnB;;;AAQA,IAAMC,YAEZ,GAAG,SAFSA,YAET,CAAA,MAAA,EAAA,SAAA,EAAuB;AACzB,MAAI,CAACC,MAAM,CAAX,SAAA,EAAuB;AACrBA,IAAAA,MAAM,CAANA,SAAAA,GAAAA,EAAAA;AACD;;AAEDA,EAAAA,MAAM,CAANA,SAAAA;AACEC,IAAAA,OAAO,EADU;AAAnBD,KAEKA,MAAM,CAFQ,SAAnBA,GAGKE,SAHLF;AAMA,SAAA,MAAA;AAbK,CAAA","sourcesContent":["import { ConfigPlugin } from '@expo/config-plugins';\nimport { boolish } from 'getenv';\n\nimport { ConfigFilePaths } from '../Config.types';\n\nexport const EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n/**\n * Adds the _internal object.\n *\n * @param config\n * @param projectRoot\n */\nexport const withInternal: ConfigPlugin<\n  { projectRoot: string; packageJsonPath?: string } & Partial<ConfigFilePaths>\n> = (config, internals) => {\n  if (!config._internal) {\n    config._internal = {};\n  }\n\n  config._internal = {\n    isDebug: EXPO_DEBUG,\n    ...config._internal,\n    ...internals,\n  };\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"script"}