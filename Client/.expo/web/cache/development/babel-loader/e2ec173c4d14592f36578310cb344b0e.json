{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.importHermesCommandFromProject = exports.importExpoMetroConfigFromProject = exports.importInspectorProxyServerFromProject = exports.importMetroServerFromProject = exports.importMetroLibAttachWebsocketServerFromProject = exports.importMetroHmrServerFromProject = exports.importMetroFromProject = exports.importMetroConfigFromProject = exports.importMetroSourceMapComposeSourceMapsFromProject = void 0;\n\nvar os_1 = __importDefault(require(\"os\"));\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar MetroImportError = function (_Error) {\n  _inherits(MetroImportError, _Error);\n\n  var _super = _createSuper(MetroImportError);\n\n  function MetroImportError(projectRoot, moduleId) {\n    _classCallCheck(this, MetroImportError);\n\n    return _super.call(this, \"Missing package \\\"\" + moduleId + \"\\\" in the project at: \" + projectRoot + \"\\n\" + 'This usually means `react-native` is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + 'and run `yarn` or `npm install`.');\n  }\n\n  return _createClass(MetroImportError);\n}(_wrapNativeSuper(Error));\n\nfunction resolveFromProject(projectRoot, moduleId) {\n  var resolvedPath = resolve_from_1.default.silent(projectRoot, moduleId);\n\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot, moduleId) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nfunction importMetroSourceMapComposeSourceMapsFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\n\nexports.importMetroSourceMapComposeSourceMapsFromProject = importMetroSourceMapComposeSourceMapsFromProject;\n\nfunction importMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nexports.importMetroConfigFromProject = importMetroConfigFromProject;\n\nfunction importMetroFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro');\n}\n\nexports.importMetroFromProject = importMetroFromProject;\n\nfunction importMetroHmrServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro/src/HmrServer');\n}\n\nexports.importMetroHmrServerFromProject = importMetroHmrServerFromProject;\n\nfunction importMetroLibAttachWebsocketServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro/src/lib/attachWebsocketServer');\n}\n\nexports.importMetroLibAttachWebsocketServerFromProject = importMetroLibAttachWebsocketServerFromProject;\n\nfunction importMetroServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\n\nexports.importMetroServerFromProject = importMetroServerFromProject;\n\nfunction importInspectorProxyServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\nexports.importInspectorProxyServerFromProject = importInspectorProxyServerFromProject;\n\nfunction importExpoMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, '@expo/metro-config');\n}\n\nexports.importExpoMetroConfigFromProject = importExpoMetroConfigFromProject;\n\nfunction importHermesCommandFromProject(projectRoot) {\n  var platformExecutable = getHermesCommandPlatform();\n  return resolveFromProject(projectRoot, \"hermes-engine/\" + platformExecutable);\n}\n\nexports.importHermesCommandFromProject = importHermesCommandFromProject;\n\nfunction getHermesCommandPlatform() {\n  switch (os_1.default.platform()) {\n    case 'darwin':\n      return 'osx-bin/hermesc';\n\n    case 'linux':\n      return 'linux64-bin/hermesc';\n\n    case 'win32':\n      return 'win64-bin/hermesc.exe';\n\n    default:\n      throw new Error(\"Unsupported host platform for Hermes compiler: \" + os_1.default.platform());\n  }\n}","map":{"version":3,"sources":["../../src/metro/importMetroFromProject.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;IAEM,gB;;;;;AACJ,4BAAY,WAAZ,EAAiC,QAAjC,EAAiD;AAAA;;AAAA,6BAE7C,uBAAoB,QAApB,8BAAoD,WAApD,UACE,sDADF,GAEE,yEAFF,GAGE,kCAL2C;AAOhD;;;mBAR4B,K;;AAW/B,SAAS,kBAAT,CAA4B,WAA5B,EAAiD,QAAjD,EAAiE;AAC/D,MAAM,YAAY,GAAG,cAAA,CAAA,OAAA,CAAY,MAAZ,CAAmB,WAAnB,EAAgC,QAAhC,CAArB;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB,UAAM,IAAI,gBAAJ,CAAqB,WAArB,EAAkC,QAAlC,CAAN;AACD;;AACD,SAAO,YAAP;AACD;;AAED,SAAS,iBAAT,CAA2B,WAA3B,EAAgD,QAAhD,EAAgE;AAC9D,SAAO,OAAO,CAAC,kBAAkB,CAAC,WAAD,EAAc,QAAd,CAAnB,CAAd;AACD;;AAED,SAAgB,gDAAhB,CACE,WADF,EACqB;AAEnB,SAAO,iBAAiB,CAAC,WAAD,EAAc,wCAAd,CAAxB;AACD;;AAJD,OAAA,CAAA,gDAAA,GAAA,gDAAA;;AAMA,SAAgB,4BAAhB,CAA6C,WAA7C,EAAgE;AAC9D,SAAO,iBAAiB,CAAC,WAAD,EAAc,cAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAIA,SAAgB,sBAAhB,CAAuC,WAAvC,EAA0D;AACxD,SAAO,iBAAiB,CAAC,WAAD,EAAc,OAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAIA,SAAgB,+BAAhB,CAAgD,WAAhD,EAAmE;AACjE,SAAO,iBAAiB,CAAC,WAAD,EAAc,qBAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,+BAAA,GAAA,+BAAA;;AAIA,SAAgB,8CAAhB,CAA+D,WAA/D,EAAkF;AAChF,SAAO,iBAAiB,CAAC,WAAD,EAAc,qCAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,8CAAA,GAAA,8CAAA;;AAIA,SAAgB,4BAAhB,CAA6C,WAA7C,EAAgE;AAC9D,SAAO,iBAAiB,CAAC,WAAD,EAAc,kBAAd,CAAxB;AACD;;AAFD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAIA,SAAgB,qCAAhB,CACE,WADF,EACqB;AAEnB,SAAO,iBAAiB,CAAC,WAAD,EAAc,uBAAd,CAAxB;AACD;;AAJD,OAAA,CAAA,qCAAA,GAAA,qCAAA;;AAMA,SAAgB,gCAAhB,CACE,WADF,EACqB;AAEnB,SAAO,iBAAiB,CAAC,WAAD,EAAc,oBAAd,CAAxB;AACD;;AAJD,OAAA,CAAA,gCAAA,GAAA,gCAAA;;AAMA,SAAgB,8BAAhB,CAA+C,WAA/C,EAAkE;AAChE,MAAM,kBAAkB,GAAG,wBAAwB,EAAnD;AACA,SAAO,kBAAkB,CAAC,WAAD,qBAA+B,kBAA/B,CAAzB;AACD;;AAHD,OAAA,CAAA,8BAAA,GAAA,8BAAA;;AAKA,SAAS,wBAAT,GAAiC;AAC/B,UAAQ,IAAA,CAAA,OAAA,CAAG,QAAH,EAAR;AACE,SAAK,QAAL;AACE,aAAO,iBAAP;;AACF,SAAK,OAAL;AACE,aAAO,qBAAP;;AACF,SAAK,OAAL;AACE,aAAO,uBAAP;;AACF;AACE,YAAM,IAAI,KAAJ,qDAA4D,IAAA,CAAA,OAAA,CAAG,QAAH,EAA5D,CAAN;AARJ;AAUD","sourcesContent":["import type Metro from 'metro';\nimport type MetroConfig from 'metro-config';\nimport type { composeSourceMaps } from 'metro-source-map';\nimport os from 'os';\nimport resolveFrom from 'resolve-from';\n\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot: string, moduleId: string) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nexport function importMetroSourceMapComposeSourceMapsFromProject(\n  projectRoot: string\n): typeof composeSourceMaps {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\n\nexport function importMetroConfigFromProject(projectRoot: string): typeof MetroConfig {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nexport function importMetroFromProject(projectRoot: string): typeof Metro {\n  return importFromProject(projectRoot, 'metro');\n}\n\nexport function importMetroHmrServerFromProject(projectRoot: string): any {\n  return importFromProject(projectRoot, 'metro/src/HmrServer');\n}\n\nexport function importMetroLibAttachWebsocketServerFromProject(projectRoot: string): any {\n  return importFromProject(projectRoot, 'metro/src/lib/attachWebsocketServer');\n}\n\nexport function importMetroServerFromProject(projectRoot: string): typeof Metro.Server {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\n\nexport function importInspectorProxyServerFromProject(\n  projectRoot: string\n): { InspectorProxy: any } {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\nexport function importExpoMetroConfigFromProject(\n  projectRoot: string\n): typeof import('@expo/metro-config') {\n  return importFromProject(projectRoot, '@expo/metro-config');\n}\n\nexport function importHermesCommandFromProject(projectRoot: string): string {\n  const platformExecutable = getHermesCommandPlatform();\n  return resolveFromProject(projectRoot, `hermes-engine/${platformExecutable}`);\n}\n\nfunction getHermesCommandPlatform(): string {\n  switch (os.platform()) {\n    case 'darwin':\n      return 'osx-bin/hermesc';\n    case 'linux':\n      return 'linux64-bin/hermesc';\n    case 'win32':\n      return 'win64-bin/hermesc.exe';\n    default:\n      throw new Error(`Unsupported host platform for Hermes compiler: ${os.platform()}`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}