{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDevServer = exports.isDevConfig = void 0;\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar crypto_1 = __importDefault(require(\"crypto\"));\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar getenv_1 = require(\"getenv\");\n\nvar path = __importStar(require(\"path\"));\n\nvar errorOverlayMiddleware_1 = __importDefault(require(\"react-dev-utils/errorOverlayMiddleware\"));\n\nvar evalSourceMapMiddleware_1 = __importDefault(require(\"react-dev-utils/evalSourceMapMiddleware\"));\n\nvar ignoredFiles_1 = __importDefault(require(\"react-dev-utils/ignoredFiles\"));\n\nvar noopServiceWorkerMiddleware_1 = __importDefault(require(\"react-dev-utils/noopServiceWorkerMiddleware\"));\n\nvar redirectServedPathMiddleware_1 = __importDefault(require(\"react-dev-utils/redirectServedPathMiddleware\"));\n\nvar env_1 = require(\"../env\");\n\nfunction validateKeyAndCerts(_ref) {\n  var cert = _ref.cert,\n      key = _ref.key,\n      keyFile = _ref.keyFile,\n      crtFile = _ref.crtFile;\n  var encrypted;\n\n  try {\n    encrypted = crypto_1.default.publicEncrypt(cert, Buffer.from('test'));\n  } catch (err) {\n    return false;\n  }\n\n  try {\n    crypto_1.default.privateDecrypt(key, encrypted);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction readEnvFile(file, type) {\n  if (!fs_extra_1.default.existsSync(file)) {\n    throw new Error(\"You specified \" + chalk_1.default.cyan(type) + \" in your env, but the file \\\"\" + chalk_1.default.yellow(file) + \"\\\" can't be found.\");\n  }\n\n  return fs_extra_1.default.readFileSync(file);\n}\n\nfunction getHttpsConfig(projectRoot, isHttps) {\n  var _process$env = process.env,\n      SSL_CRT_FILE = _process$env.SSL_CRT_FILE,\n      SSL_KEY_FILE = _process$env.SSL_KEY_FILE;\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    var crtFile = path.resolve(projectRoot, SSL_CRT_FILE);\n    var keyFile = path.resolve(projectRoot, SSL_KEY_FILE);\n    var config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE')\n    };\n\n    if (validateKeyAndCerts(_objectSpread(_objectSpread({}, config), {}, {\n      keyFile: keyFile,\n      crtFile: crtFile\n    }))) {\n      return config;\n    } else {\n      console.log(chalk_1.default.yellow(\"\\u203A Failed to self-sign SSL certificates for HTTPS. Falling back to insecure https. You can re run with `--no-https` to disable HTTPS, or delete the `.expo` folder and try again.\"));\n      return true;\n    }\n  }\n\n  return isHttps;\n}\n\nvar host = process.env.HOST || '0.0.0.0';\nvar sockHost = process.env.WDS_SOCKET_HOST;\nvar sockPath = process.env.WDS_SOCKET_PATH;\nvar sockPort = process.env.WDS_SOCKET_PORT;\n\nfunction isDevConfig(input) {\n  return input && input.mode === 'development';\n}\n\nexports.isDevConfig = isDevConfig;\n\nfunction withDevServer(webpackConfig, env) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (isDevConfig(webpackConfig)) {\n    webpackConfig.devServer = createDevServer(env, options);\n  }\n\n  return webpackConfig;\n}\n\nexports.default = withDevServer;\n\nfunction createDevServer(env) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      allowedHost = _ref2.allowedHost,\n      proxy = _ref2.proxy;\n\n  var _env$https = env.https,\n      https = _env$https === void 0 ? false : _env$https;\n  var locations = env.locations || env_1.getPaths(env.projectRoot, env);\n  var isNative = ['ios', 'android'].includes(env.platform);\n\n  var _env_1$getPublicPaths = env_1.getPublicPaths(env),\n      publicUrlOrPath = _env_1$getPublicPaths.publicPath;\n\n  var mimeTypes = isNative ? {\n    typeMap: {\n      'application/javascript': ['bundle']\n    },\n    force: true\n  } : undefined;\n  return {\n    disableHostCheck: !proxy || getenv_1.boolish('DANGEROUSLY_DISABLE_HOST_CHECK', false),\n    compress: true,\n    clientLogLevel: 'silent',\n    contentBase: locations.template.folder,\n    contentBasePublicPath: publicUrlOrPath,\n    watchContentBase: true,\n    hot: true,\n    transportMode: 'ws',\n    injectClient: false,\n    sockHost: sockHost,\n    sockPath: sockPath,\n    sockPort: sockPort,\n    publicPath: '/',\n    noInfo: true,\n    stats: 'none',\n    watchOptions: {\n      ignored: ignoredFiles_1.default(locations.root)\n    },\n    https: getHttpsConfig(env.projectRoot, https),\n    host: host,\n    overlay: false,\n    historyApiFallback: {\n      disableDotRule: true,\n      index: publicUrlOrPath\n    },\n    public: allowedHost,\n    proxy: proxy,\n    before: function before(app, server) {\n      if (isNative) {\n        return;\n      }\n\n      app.use(evalSourceMapMiddleware_1.default(server));\n      app.use(errorOverlayMiddleware_1.default());\n      app.use(noopServiceWorkerMiddleware_1.default(publicUrlOrPath));\n    },\n    after: function after(app) {\n      app.use(redirectServedPathMiddleware_1.default(publicUrlOrPath));\n    },\n    inline: !isNative,\n    mimeTypes: mimeTypes\n  };\n}\n\nexports.createDevServer = createDevServer;","map":{"version":3,"sources":["../../src/addons/withDevServer.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport { boolish } from 'getenv';\nimport * as path from 'path';\nimport errorOverlayMiddleware from 'react-dev-utils/errorOverlayMiddleware';\n// @ts-ignore\nimport evalSourceMapMiddleware from 'react-dev-utils/evalSourceMapMiddleware';\nimport ignoredFiles from 'react-dev-utils/ignoredFiles';\nimport noopServiceWorkerMiddleware from 'react-dev-utils/noopServiceWorkerMiddleware';\nimport redirectServedPath from 'react-dev-utils/redirectServedPathMiddleware';\nimport {\n  ProxyConfigArray,\n  ProxyConfigMap,\n  Configuration as WebpackDevServerConfiguration,\n} from 'webpack-dev-server';\n\nimport { getPaths, getPublicPaths } from '../env';\nimport { AnyConfiguration, DevConfiguration, Environment } from '../types';\n\n// Ensure the certificate and key provided are valid and if not\n// throw an easy to debug error\nfunction validateKeyAndCerts({ cert, key, keyFile, crtFile }: any): boolean {\n  let encrypted;\n  try {\n    // publicEncrypt will throw an error with an invalid cert\n    encrypted = crypto.publicEncrypt(cert, Buffer.from('test'));\n  } catch (err) {\n    return false;\n  }\n\n  try {\n    // privateDecrypt will throw an error with an invalid key\n    crypto.privateDecrypt(key, encrypted);\n  } catch (err) {\n    return false;\n  }\n  return true;\n}\n\n// Read file and throw an error if it doesn't exist\nfunction readEnvFile(file: string, type: string): any {\n  if (!fs.existsSync(file)) {\n    throw new Error(\n      `You specified ${chalk.cyan(type)} in your env, but the file \"${chalk.yellow(\n        file\n      )}\" can't be found.`\n    );\n  }\n  return fs.readFileSync(file);\n}\n\n// Get the https config\n// Return cert files if provided in env, otherwise just true or false\nfunction getHttpsConfig(projectRoot: string, isHttps: boolean): any {\n  const { SSL_CRT_FILE, SSL_KEY_FILE } = process.env;\n\n  if (isHttps && SSL_CRT_FILE && SSL_KEY_FILE) {\n    const crtFile = path.resolve(projectRoot, SSL_CRT_FILE);\n    const keyFile = path.resolve(projectRoot, SSL_KEY_FILE);\n    const config = {\n      cert: readEnvFile(crtFile, 'SSL_CRT_FILE'),\n      key: readEnvFile(keyFile, 'SSL_KEY_FILE'),\n    };\n\n    if (validateKeyAndCerts({ ...config, keyFile, crtFile })) {\n      return config;\n    } else {\n      console.log(\n        chalk.yellow(\n          `\\u203A Failed to self-sign SSL certificates for HTTPS. Falling back to insecure https. You can re run with \\`--no-https\\` to disable HTTPS, or delete the \\`.expo\\` folder and try again.`\n        )\n      );\n      return true;\n    }\n  }\n  return isHttps;\n}\n\n// @ts-ignore\nconst host = process.env.HOST || '0.0.0.0';\nconst sockHost = process.env.WDS_SOCKET_HOST;\nconst sockPath = process.env.WDS_SOCKET_PATH; // default: '/sockjs-node'\nconst sockPort = process.env.WDS_SOCKET_PORT;\n\n/**\n *\n * @param input\n * @internal\n */\nexport function isDevConfig(input: AnyConfiguration): input is DevConfiguration {\n  return input && input.mode === 'development';\n}\n\ntype SelectiveEnv = Pick<Environment, 'mode' | 'locations' | 'projectRoot' | 'https' | 'platform'>;\n\ntype DevServerOptions = {\n  allowedHost?: string;\n  proxy?: ProxyConfigMap | ProxyConfigArray;\n};\n\n/**\n * Add a valid dev server to the provided Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @category addons\n */\nexport default function withDevServer(\n  webpackConfig: AnyConfiguration,\n  env: SelectiveEnv,\n  options: DevServerOptions = {}\n): AnyConfiguration {\n  if (isDevConfig(webpackConfig)) {\n    webpackConfig.devServer = createDevServer(env, options);\n  }\n  return webpackConfig;\n}\n\n/**\n * Create a valid Webpack dev server config.\n *\n * @param env locations, projectRoot, and https options.\n * @param options Configure how the dev server is setup.\n * @internal\n */\nexport function createDevServer(\n  env: SelectiveEnv,\n  { allowedHost, proxy }: DevServerOptions = {}\n): WebpackDevServerConfiguration {\n  const { https = false } = env;\n  const locations = env.locations || getPaths(env.projectRoot, env);\n  const isNative = ['ios', 'android'].includes(env.platform);\n  const { publicPath: publicUrlOrPath } = getPublicPaths(env);\n  // Because native React runtimes uses .bundle we must make\n  // the .bundle extension be served as javascript.\n  const mimeTypes: any = isNative\n    ? {\n        typeMap: { 'application/javascript': ['bundle'] },\n        force: true,\n      }\n    : undefined;\n\n  // Attempt to keep this as close to create-react-native app as possible.\n  // https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpackDevServer.config.js\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebook/create-react-app/issues/2271\n    // https://github.com/facebook/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck: !proxy || boolish('DANGEROUSLY_DISABLE_HOST_CHECK', false),\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'silent',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files won’t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %WEB_PUBLIC_URL%:\n    // <link rel=\"icon\" href=\"%WEB_PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.WEB_PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: locations.template.folder,\n    contentBasePublicPath: publicUrlOrPath,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide WDS_SOCKET_PATH endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // Use 'ws' instead of 'sockjs-node' on server since we're using native\n    // websockets in `webpackHotDevClient`.\n    transportMode: 'ws',\n    // Prevent a WS client from getting injected as we're already including\n    // `webpackHotDevClient`.\n    injectClient: false,\n    // Enable custom sockjs pathname for websocket connection to hot reloading server.\n    // Enable custom sockjs hostname, pathname and port for websocket connection\n    // to hot reloading server.\n    sockHost,\n    sockPath,\n    sockPort,\n    // It is important to tell WebpackDevServer to use the same \"publicPath\" path as\n    // we specified in the webpack config. When homepage is '.', default to serving\n    // from the root.\n    // remove last slash so user can land on `/test` instead of `/test/`\n    publicPath: '/',\n    // Hide `ℹ ｢wds｣: Project is running at`\n    noInfo: true,\n    stats: 'none',\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebook/create-react-app/issues/293\n    // src/node_modules is not ignored to support absolute imports\n    // https://github.com/facebook/create-react-app/issues/1065\n    watchOptions: {\n      ignored: ignoredFiles(locations.root),\n    },\n    https: getHttpsConfig(env.projectRoot, https),\n    host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebook/create-react-app/issues/387.\n      disableDotRule: true,\n      index: publicUrlOrPath,\n    },\n    public: allowedHost,\n    // `proxy` is run between `before` and `after` `webpack-dev-server` hooks\n    proxy,\n    before(app, server) {\n      // Everything we add here is for web support\n      if (isNative) {\n        return;\n      }\n      // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`\n      // middlewares before `redirectServedPath` otherwise will not have any effect\n      // This lets us fetch source contents from webpack for the error overlay\n      app.use(evalSourceMapMiddleware(server));\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware(publicUrlOrPath));\n    },\n    after(app) {\n      // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match\n      app.use(redirectServedPath(publicUrlOrPath));\n    },\n    // Without disabling this on native, you get the error `Can't find variable self`.\n    inline: !isNative,\n    // Specify the mimetypes for hosting native bundles.\n    mimeTypes,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}