{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRuntimeVersionNullable = getRuntimeVersionNullable;\nexports.getSDKVersion = getSDKVersion;\nexports.getUpdatesEnabled = getUpdatesEnabled;\nexports.getUpdatesTimeout = getUpdatesTimeout;\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.getBundleReactNativePhase = getBundleReactNativePhase;\nexports.ensureBundleReactNativePhaseContainsConfigurationScript = ensureBundleReactNativePhaseContainsConfigurationScript;\nexports.isShellScriptBuildPhaseConfigured = isShellScriptBuildPhaseConfigured;\nexports.isPlistConfigurationSet = isPlistConfigurationSet;\nexports.isPlistConfigurationSynced = isPlistConfigurationSynced;\nexports.isPlistVersionConfigurationSynced = isPlistVersionConfigurationSynced;\nexports.withUpdates = exports.Config = void 0;\n\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n\n  path = function path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n\n  _Updates = function _Updates() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\nvar Config;\nexports.Config = Config;\n\n(function (Config) {\n  Config[\"ENABLED\"] = \"EXUpdatesEnabled\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"EXUpdatesCheckOnLaunch\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"EXUpdatesLaunchWaitMs\";\n  Config[\"RUNTIME_VERSION\"] = \"EXUpdatesRuntimeVersion\";\n  Config[\"SDK_VERSION\"] = \"EXUpdatesSDKVersion\";\n  Config[\"UPDATE_URL\"] = \"EXUpdatesURL\";\n  Config[\"RELEASE_CHANNEL\"] = \"EXUpdatesReleaseChannel\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"EXUpdatesRequestHeaders\";\n})(Config || (exports.Config = Config = {}));\n\nfunction getRuntimeVersionNullable(config) {\n  try {\n    return (0, _Updates().getRuntimeVersion)(config, 'ios');\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nfunction getUpdatesEnabled(config) {\n  var _config$updates;\n\n  return ((_config$updates = config.updates) === null || _config$updates === void 0 ? void 0 : _config$updates.enabled) !== false;\n}\n\nfunction getUpdatesTimeout(config) {\n  var _config$updates$fallb, _config$updates2;\n\n  return (_config$updates$fallb = (_config$updates2 = config.updates) === null || _config$updates2 === void 0 ? void 0 : _config$updates2.fallbackToCacheTimeout) !== null && _config$updates$fallb !== void 0 ? _config$updates$fallb : 0;\n}\n\nfunction getUpdatesCheckOnLaunch(config) {\n  var _config$updates3, _config$updates4;\n\n  if (((_config$updates3 = config.updates) === null || _config$updates3 === void 0 ? void 0 : _config$updates3.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (((_config$updates4 = config.updates) === null || _config$updates4 === void 0 ? void 0 : _config$updates4.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n\n  return 'ALWAYS';\n}\n\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _iosPlugins().withExpoPlist)(config, function (config) {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexports.withUpdates = withUpdates;\n\nfunction setUpdatesConfig(config, expoPlist, username) {\n  var _objectSpread2;\n\n  var newExpoPlist = _objectSpread(_objectSpread({}, expoPlist), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, Config.ENABLED, getUpdatesEnabled(config)), _defineProperty(_objectSpread2, Config.CHECK_ON_LAUNCH, getUpdatesCheckOnLaunch(config)), _defineProperty(_objectSpread2, Config.LAUNCH_WAIT_MS, getUpdatesTimeout(config)), _objectSpread2));\n\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nfunction setVersionsConfig(config, expoPlist) {\n  var newExpoPlist = _objectSpread({}, expoPlist);\n\n  var runtimeVersion = getRuntimeVersionNullable(config);\n  var sdkVersion = getSDKVersion(config);\n\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot) {\n  var buildScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n\n  var relativePath = path().relative(path().join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\nfunction getBundleReactNativePhase(project) {\n  var shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase;\n  var bundleReactNative = Object.values(shellScriptBuildPhase).find(function (buildPhase) {\n    return buildPhase.name === '\"Bundle React Native code and images\"';\n  });\n\n  if (!bundleReactNative) {\n    throw new Error(\"Couldn't find a build phase \\\"Bundle React Native code and images\\\"\");\n  }\n\n  return bundleReactNative;\n}\n\nfunction ensureBundleReactNativePhaseContainsConfigurationScript(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(new RegExp(\"(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/\" + CREATE_MANIFEST_IOS_PATH), '');\n    }\n\n    bundleReactNative.shellScript = \"\" + bundleReactNative.shellScript.replace(/\"$/, '') + buildPhaseShellScriptPath + \"\\\\n\\\"\";\n  }\n\n  return project;\n}\n\nfunction isShellScriptBuildPhaseConfigured(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nfunction isPlistConfigurationSet(expoPlist) {\n  return Boolean(expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion));\n}\n\nfunction isPlistConfigurationSynced(config, expoPlist, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === expoPlist.EXUpdatesURL && getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled && getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs && getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch && isPlistVersionConfigurationSynced(config, expoPlist);\n}\n\nfunction isPlistVersionConfigurationSynced(config, expoPlist) {\n  var _expoPlist$EXUpdatesR, _expoPlist$EXUpdatesS;\n\n  var expectedRuntimeVersion = getRuntimeVersionNullable(config);\n  var expectedSdkVersion = getSDKVersion(config);\n  var currentRuntimeVersion = (_expoPlist$EXUpdatesR = expoPlist.EXUpdatesRuntimeVersion) !== null && _expoPlist$EXUpdatesR !== void 0 ? _expoPlist$EXUpdatesR : null;\n  var currentSdkVersion = (_expoPlist$EXUpdatesS = expoPlist.EXUpdatesSDKVersion) !== null && _expoPlist$EXUpdatesS !== void 0 ? _expoPlist$EXUpdatesS : null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/ios/Updates.ts"],"names":["CREATE_MANIFEST_IOS_PATH","Config","config","withUpdates","expoUsername","setUpdatesConfig","newExpoPlist","getUpdatesEnabled","getUpdatesCheckOnLaunch","getUpdatesTimeout","updateUrl","setVersionsConfig","expoPlist","runtimeVersion","getRuntimeVersionNullable","sdkVersion","getSDKVersion","buildScriptPath","resolveFrom","relativePath","path","process","shellScriptBuildPhase","project","bundleReactNative","Object","buildPhase","getBundleReactNativePhase","buildPhaseShellScriptPath","formatConfigurationScriptPath","isShellScriptBuildPhaseConfigured","Boolean","isPlistVersionConfigurationSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport { ExpoConfigUpdates, getRuntimeVersion, getUpdateUrl } from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n}\n\n/**\n * runtime version maybe null in projects using classic updates. In that\n * case we use SDK version\n */\nexport function getRuntimeVersionNullable(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion'>\n): string | null {\n  try {\n    return getRuntimeVersion(config, 'ios');\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>) {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): 'NEVER' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, config => {\n    config.modResults = setUpdatesConfig(config, config.modResults, expoUsername);\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config);\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    buildPhase => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config);\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}