{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getXCBuildConfigurationFromPbxproj = getXCBuildConfigurationFromPbxproj;\nexports.findApplicationTargetWithDependenciesAsync = findApplicationTargetWithDependenciesAsync;\nexports.isTargetOfType = isTargetOfType;\nexports.getNativeTargets = getNativeTargets;\nexports.findSignableTargets = findSignableTargets;\nexports.findFirstNativeTarget = findFirstNativeTarget;\nexports.findNativeTargetByName = findNativeTargetByName;\nexports.TargetType = void 0;\n\nfunction _BuildScheme() {\n  var data = require(\"./BuildScheme\");\n\n  _BuildScheme = function _BuildScheme() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nvar TargetType;\nexports.TargetType = TargetType;\n\n(function (TargetType) {\n  TargetType[\"APPLICATION\"] = \"com.apple.product-type.application\";\n  TargetType[\"EXTENSION\"] = \"com.apple.product-type.app-extension\";\n  TargetType[\"WATCH\"] = \"com.apple.product-type.application.watchapp\";\n  TargetType[\"STICKER_PACK_EXTENSION\"] = \"com.apple.product-type.app-extension.messages-sticker-pack\";\n  TargetType[\"OTHER\"] = \"other\";\n})(TargetType || (exports.TargetType = TargetType = {}));\n\nfunction getXCBuildConfigurationFromPbxproj(project) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      targetName = _ref.targetName,\n      _ref$buildConfigurati = _ref.buildConfiguration,\n      buildConfiguration = _ref$buildConfigurati === void 0 ? 'Release' : _ref$buildConfigurati;\n\n  var _ref2 = targetName ? findNativeTargetByName(project, targetName) : findFirstNativeTarget(project),\n      _ref3 = _slicedToArray(_ref2, 2),\n      nativeTarget = _ref3[1];\n\n  var _ref4 = (0, _Xcodeproj().getBuildConfigurationForListIdAndName)(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration: buildConfiguration\n  }),\n      _ref5 = _slicedToArray(_ref4, 2),\n      xcBuildConfiguration = _ref5[1];\n\n  return xcBuildConfiguration !== null && xcBuildConfiguration !== void 0 ? xcBuildConfiguration : null;\n}\n\nfunction findApplicationTargetWithDependenciesAsync(projectRoot, scheme) {\n  var applicationTargetName, project, _findNativeTargetByNa, _findNativeTargetByNa2, applicationTarget, dependencies;\n\n  return _regeneratorRuntime.async(function findApplicationTargetWithDependenciesAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap((0, _BuildScheme().getApplicationTargetNameForSchemeAsync)(projectRoot, scheme));\n\n        case 2:\n          applicationTargetName = _context.sent;\n          project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n          _findNativeTargetByNa = findNativeTargetByName(project, applicationTargetName), _findNativeTargetByNa2 = _slicedToArray(_findNativeTargetByNa, 2), applicationTarget = _findNativeTargetByNa2[1];\n          dependencies = applicationTarget.dependencies.map(function (_ref6) {\n            var value = _ref6.value;\n\n            var _project$getPBXGroupB = project.getPBXGroupByKeyAndType(value, 'PBXTargetDependency'),\n                targetId = _project$getPBXGroupB.target;\n\n            var _findNativeTargetById = findNativeTargetById(project, targetId),\n                _findNativeTargetById2 = _slicedToArray(_findNativeTargetById, 2),\n                target = _findNativeTargetById2[1];\n\n            var type = isTargetOfType(target, TargetType.EXTENSION) ? TargetType.EXTENSION : TargetType.OTHER;\n            return {\n              name: target.name,\n              type: type\n            };\n          });\n          return _context.abrupt(\"return\", {\n            name: applicationTarget.name,\n            type: TargetType.APPLICATION,\n            dependencies: dependencies\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isTargetOfType(target, targetType) {\n  return target.productType === targetType || target.productType === \"\\\"\" + targetType + \"\\\"\";\n}\n\nfunction getNativeTargets(project) {\n  var section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(_Xcodeproj().isNotComment);\n}\n\nfunction findSignableTargets(project) {\n  var targets = getNativeTargets(project);\n  var applicationTargets = targets.filter(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        target = _ref8[1];\n\n    return isTargetOfType(target, TargetType.APPLICATION) || isTargetOfType(target, TargetType.EXTENSION) || isTargetOfType(target, TargetType.WATCH) || isTargetOfType(target, TargetType.STICKER_PACK_EXTENSION);\n  });\n\n  if (applicationTargets.length === 0) {\n    throw new Error(\"Could not find any signable targets in project.pbxproj\");\n  }\n\n  return applicationTargets;\n}\n\nfunction findFirstNativeTarget(project) {\n  var targets = getNativeTargets(project);\n  var applicationTargets = targets.filter(function (_ref9) {\n    var _ref10 = _slicedToArray(_ref9, 2),\n        target = _ref10[1];\n\n    return isTargetOfType(target, TargetType.APPLICATION);\n  });\n\n  if (applicationTargets.length === 0) {\n    throw new Error(\"Could not find any application target in project.pbxproj\");\n  }\n\n  return applicationTargets[0];\n}\n\nfunction findNativeTargetByName(project, targetName) {\n  var nativeTargets = getNativeTargets(project);\n  var nativeTargetEntry = nativeTargets.find(function (_ref11) {\n    var _ref12 = _slicedToArray(_ref11, 2),\n        i = _ref12[1];\n\n    return i.name === targetName || i.name === \"\\\"\" + targetName + \"\\\"\";\n  });\n\n  if (!nativeTargetEntry) {\n    throw new Error(\"Could not find target '\" + targetName + \"' in project.pbxproj\");\n  }\n\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project, targetId) {\n  var nativeTargets = getNativeTargets(project);\n  var nativeTargetEntry = nativeTargets.find(function (_ref13) {\n    var _ref14 = _slicedToArray(_ref13, 1),\n        key = _ref14[0];\n\n    return key === targetId;\n  });\n\n  if (!nativeTargetEntry) {\n    throw new Error(\"Could not find target with id '\" + targetId + \"' in project.pbxproj\");\n  }\n\n  return nativeTargetEntry;\n}","map":{"version":3,"sources":["../../src/ios/Target.ts"],"names":["TargetType","buildConfiguration","targetName","findNativeTargetByName","findFirstNativeTarget","configurationListId","nativeTarget","xcBuildConfiguration","applicationTargetName","project","dependencies","value","target","targetId","findNativeTargetById","type","isTargetOfType","name","applicationTarget","section","Object","isNotComment","targets","getNativeTargets","applicationTargets","nativeTargets","nativeTargetEntry","i","key"],"mappings":"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","sourcesContent":["import { PBXNativeTarget, PBXTargetDependency, XCBuildConfiguration, XcodeProject } from 'xcode';\n\nimport { getApplicationTargetNameForSchemeAsync } from './BuildScheme';\nimport {\n  getBuildConfigurationForListIdAndName,\n  getPbxproj,\n  isNotComment,\n  NativeTargetSectionEntry,\n} from './utils/Xcodeproj';\n\nexport enum TargetType {\n  APPLICATION = 'com.apple.product-type.application',\n  EXTENSION = 'com.apple.product-type.app-extension',\n  WATCH = 'com.apple.product-type.application.watchapp',\n  STICKER_PACK_EXTENSION = 'com.apple.product-type.app-extension.messages-sticker-pack',\n  OTHER = 'other',\n}\n\nexport interface Target {\n  name: string;\n  type: TargetType;\n  dependencies?: Target[];\n}\n\nexport function getXCBuildConfigurationFromPbxproj(\n  project: XcodeProject,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): XCBuildConfiguration | null {\n  const [, nativeTarget] = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [, xcBuildConfiguration] = getBuildConfigurationForListIdAndName(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration,\n  });\n  return xcBuildConfiguration ?? null;\n}\n\nexport async function findApplicationTargetWithDependenciesAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<Target> {\n  const applicationTargetName = await getApplicationTargetNameForSchemeAsync(projectRoot, scheme);\n  const project = getPbxproj(projectRoot);\n  const [, applicationTarget] = findNativeTargetByName(project, applicationTargetName);\n\n  const dependencies: Target[] = applicationTarget.dependencies.map(({ value }) => {\n    const { target: targetId } = project.getPBXGroupByKeyAndType(\n      value,\n      'PBXTargetDependency'\n    ) as PBXTargetDependency;\n\n    const [, target] = findNativeTargetById(project, targetId);\n\n    const type = isTargetOfType(target, TargetType.EXTENSION)\n      ? TargetType.EXTENSION\n      : TargetType.OTHER;\n    return {\n      name: target.name,\n      type,\n    };\n  });\n\n  return {\n    name: applicationTarget.name,\n    type: TargetType.APPLICATION,\n    dependencies,\n  };\n}\n\nexport function isTargetOfType(target: PBXNativeTarget, targetType: TargetType): boolean {\n  return target.productType === targetType || target.productType === `\"${targetType}\"`;\n}\n\nexport function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(isNotComment);\n}\n\nexport function findSignableTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(\n    ([, target]) =>\n      isTargetOfType(target, TargetType.APPLICATION) ||\n      isTargetOfType(target, TargetType.EXTENSION) ||\n      isTargetOfType(target, TargetType.WATCH) ||\n      isTargetOfType(target, TargetType.STICKER_PACK_EXTENSION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any signable targets in project.pbxproj`);\n  }\n  return applicationTargets;\n}\n\nexport function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(([, target]) =>\n    isTargetOfType(target, TargetType.APPLICATION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any application target in project.pbxproj`);\n  }\n  return applicationTargets[0];\n}\n\nexport function findNativeTargetByName(\n  project: XcodeProject,\n  targetName: string\n): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(\n    ([, i]) => i.name === targetName || i.name === `\"${targetName}\"`\n  );\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target '${targetName}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project: XcodeProject, targetId: string): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(([key]) => key === targetId);\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target with id '${targetId}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n"]},"metadata":{},"sourceType":"script"}