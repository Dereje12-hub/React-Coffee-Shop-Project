{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readStylesXMLAsync = readStylesXMLAsync;\nexports.getProjectStylesXMLPathAsync = getProjectStylesXMLPathAsync;\nexports.getStyleParent = getStyleParent;\nexports.getStylesItem = getStylesItem;\nexports.setStylesItem = setStylesItem;\nexports.removeStylesItem = removeStylesItem;\nexports.getAppThemeLightNoActionBarGroup = getAppThemeLightNoActionBarGroup;\nexports.assignStylesValue = assignStylesValue;\nexports.getStylesGroupAsObject = getStylesGroupAsObject;\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Resources() {\n  var data = require(\"./Resources\");\n\n  _Resources = function _Resources() {\n    return data;\n  };\n\n  return data;\n}\n\nvar fallbackResourceString = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><resources xmlns:tools=\\\"http://schemas.android.com/tools\\\"></resources>\";\n\nfunction readStylesXMLAsync(_ref) {\n  var path, _ref$fallback, fallback;\n\n  return _regeneratorRuntime.async(function readStylesXMLAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          path = _ref.path, _ref$fallback = _ref.fallback, fallback = _ref$fallback === void 0 ? fallbackResourceString : _ref$fallback;\n          return _context.abrupt(\"return\", (0, _Resources().readResourcesXMLAsync)({\n            path: path,\n            fallback: fallback\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getProjectStylesXMLPathAsync(projectRoot) {\n  var _ref2,\n      kind,\n      _args2 = arguments;\n\n  return _regeneratorRuntime.async(function getProjectStylesXMLPathAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref2 = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, kind = _ref2.kind;\n          return _context2.abrupt(\"return\", (0, _Paths().getResourceXMLPathAsync)(projectRoot, {\n            kind: kind,\n            name: 'styles'\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction ensureDefaultStyleResourceXML(xml) {\n  var _xml, _xml$resources;\n\n  xml = (0, _Resources().ensureDefaultResourceXML)(xml);\n\n  if (!Array.isArray((_xml = xml) === null || _xml === void 0 ? void 0 : (_xml$resources = _xml.resources) === null || _xml$resources === void 0 ? void 0 : _xml$resources.style)) {\n    xml.resources.style = [];\n  }\n\n  return xml;\n}\n\nfunction getStyleParent(xml, group) {\n  return (0, _Resources().findResourceGroup)(xml.resources.style, group);\n}\n\nfunction getStylesItem(_ref3) {\n  var name = _ref3.name,\n      xml = _ref3.xml,\n      parent = _ref3.parent;\n  xml = ensureDefaultStyleResourceXML(xml);\n  var appTheme = getStyleParent(xml, parent);\n\n  if (!appTheme) {\n    return null;\n  }\n\n  if (appTheme.item) {\n    var existingItem = appTheme.item.filter(function (_ref4) {\n      var head = _ref4.$;\n      return head.name === name;\n    })[0];\n\n    if (existingItem) {\n      return existingItem;\n    }\n  }\n\n  return null;\n}\n\nfunction setStylesItem(_ref5) {\n  var item = _ref5.item,\n      xml = _ref5.xml,\n      parent = _ref5.parent;\n  xml = ensureDefaultStyleResourceXML(xml);\n  var appTheme = getStyleParent(xml, parent);\n\n  if (!appTheme) {\n    appTheme = (0, _Resources().buildResourceGroup)(parent);\n    xml.resources.style.push(appTheme);\n  }\n\n  if (appTheme.item) {\n    var existingItem = appTheme.item.filter(function (_ref6) {\n      var head = _ref6.$;\n      return head.name === item.$.name;\n    })[0];\n\n    if (existingItem) {\n      existingItem._ = item._;\n      existingItem.$ = item.$;\n    } else {\n      appTheme.item.push(item);\n    }\n  } else {\n    appTheme.item = [item];\n  }\n\n  return xml;\n}\n\nfunction removeStylesItem(_ref7) {\n  var name = _ref7.name,\n      xml = _ref7.xml,\n      parent = _ref7.parent;\n  xml = ensureDefaultStyleResourceXML(xml);\n  var appTheme = getStyleParent(xml, parent);\n\n  if (appTheme !== null && appTheme !== void 0 && appTheme.item) {\n    var index = appTheme.item.findIndex(function (_ref8) {\n      var head = _ref8.$;\n      return head.name === name;\n    });\n\n    if (index > -1) {\n      appTheme.item.splice(index, 1);\n    }\n  }\n\n  return xml;\n}\n\nfunction getAppThemeLightNoActionBarGroup() {\n  return {\n    name: 'AppTheme',\n    parent: 'Theme.AppCompat.Light.NoActionBar'\n  };\n}\n\nfunction assignStylesValue(xml, _ref9) {\n  var add = _ref9.add,\n      value = _ref9.value,\n      targetApi = _ref9.targetApi,\n      name = _ref9.name,\n      parent = _ref9.parent;\n\n  if (add) {\n    return setStylesItem({\n      xml: xml,\n      parent: parent,\n      item: (0, _Resources().buildResourceItem)({\n        name: name,\n        targetApi: targetApi,\n        value: value\n      })\n    });\n  }\n\n  return removeStylesItem({\n    xml: xml,\n    parent: parent,\n    name: name\n  });\n}\n\nfunction getStylesGroupAsObject(xml, group) {\n  var xmlGroup = getStyleParent(xml, group);\n  return xmlGroup !== null && xmlGroup !== void 0 && xmlGroup.item ? (0, _Resources().getResourceItemsAsObject)(xmlGroup.item) : null;\n}","map":{"version":3,"sources":["../../src/android/Styles.ts"],"names":["fallbackResourceString","fallback","path","kind","name","xml","Array","parent","ensureDefaultStyleResourceXML","appTheme","getStyleParent","existingItem","$","head","item","index","setStylesItem","targetApi","value","removeStylesItem","xmlGroup"],"mappings":"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","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport {\n  buildResourceGroup,\n  buildResourceItem,\n  ensureDefaultResourceXML,\n  findResourceGroup,\n  getResourceItemsAsObject,\n  readResourcesXMLAsync,\n  ResourceGroupXML,\n  ResourceItemXML,\n  ResourceKind,\n  ResourceXML,\n} from './Resources';\n\n// Adds support for `tools:x`\nconst fallbackResourceString = `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`;\n\nexport async function readStylesXMLAsync({\n  path,\n  fallback = fallbackResourceString,\n}: {\n  path: string;\n  fallback?: string | null;\n}): Promise<ResourceXML> {\n  return readResourcesXMLAsync({ path, fallback });\n}\n\nexport async function getProjectStylesXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n): Promise<string> {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'styles' });\n}\n\nfunction ensureDefaultStyleResourceXML(xml: ResourceXML): ResourceXML {\n  xml = ensureDefaultResourceXML(xml);\n  if (!Array.isArray(xml?.resources?.style)) {\n    xml.resources.style = [];\n  }\n  return xml;\n}\n\nexport function getStyleParent(\n  xml: ResourceXML,\n  group: { name: string; parent?: string }\n): ResourceGroupXML | null {\n  return findResourceGroup(xml.resources.style, group);\n}\n\nexport function getStylesItem({\n  name,\n  xml,\n  parent,\n}: {\n  name: string;\n  xml: ResourceXML;\n  parent: { name: string; parent?: string };\n}): ResourceItemXML | null {\n  xml = ensureDefaultStyleResourceXML(xml);\n\n  const appTheme = getStyleParent(xml, parent);\n\n  if (!appTheme) {\n    return null;\n  }\n\n  if (appTheme.item) {\n    const existingItem = appTheme.item.filter(({ $: head }) => head.name === name)[0];\n\n    // Don't want to 2 of the same item, so if one exists, we overwrite it\n    if (existingItem) {\n      return existingItem;\n    }\n  }\n  return null;\n}\n\nexport function setStylesItem({\n  item,\n  xml,\n  parent,\n}: {\n  item: ResourceItemXML;\n  xml: ResourceXML;\n  parent: { name: string; parent: string };\n}): ResourceXML {\n  xml = ensureDefaultStyleResourceXML(xml);\n\n  let appTheme = getStyleParent(xml, parent);\n\n  if (!appTheme) {\n    appTheme = buildResourceGroup(parent);\n    xml.resources!.style!.push(appTheme);\n  }\n\n  if (appTheme.item) {\n    const existingItem = appTheme.item.filter(({ $: head }) => head.name === item.$.name)[0];\n\n    // Don't want to 2 of the same item, so if one exists, we overwrite it\n    if (existingItem) {\n      existingItem._ = item._;\n      existingItem.$ = item.$;\n    } else {\n      appTheme.item.push(item);\n    }\n  } else {\n    appTheme.item = [item];\n  }\n  return xml;\n}\n\nexport function removeStylesItem({\n  name,\n  xml,\n  parent,\n}: {\n  name: string;\n  xml: ResourceXML;\n  parent: { name: string; parent: string };\n}): ResourceXML {\n  xml = ensureDefaultStyleResourceXML(xml);\n  const appTheme = getStyleParent(xml, parent);\n  if (appTheme?.item) {\n    const index = appTheme.item.findIndex(({ $: head }: ResourceItemXML) => head.name === name);\n    if (index > -1) {\n      appTheme.item.splice(index, 1);\n    }\n  }\n  return xml;\n}\n\n// This is a very common theme so make it reusable.\nexport function getAppThemeLightNoActionBarGroup() {\n  return { name: 'AppTheme', parent: 'Theme.AppCompat.Light.NoActionBar' };\n}\n\nexport function assignStylesValue(\n  xml: ResourceXML,\n  {\n    add,\n    value,\n    targetApi,\n    name,\n    parent,\n  }: {\n    add: boolean;\n    value: string;\n    targetApi?: string;\n    name: string;\n    parent: { name: string; parent: string };\n  }\n): ResourceXML {\n  if (add) {\n    return setStylesItem({\n      xml,\n      parent,\n      item: buildResourceItem({\n        name,\n        targetApi,\n        value,\n      }),\n    });\n  }\n  return removeStylesItem({\n    xml,\n    parent,\n    name,\n  });\n}\n\n/**\n * Helper to convert a styles.xml parent's children into a simple k/v pair.\n * Added for testing purposes.\n *\n * @param xml\n * @returns\n */\nexport function getStylesGroupAsObject(\n  xml: ResourceXML,\n  group: { name: string; parent?: string }\n): Record<string, string> | null {\n  const xmlGroup = getStyleParent(xml, group);\n  return xmlGroup?.item ? getResourceItemsAsObject(xmlGroup.item) : null;\n}\n"]},"metadata":{},"sourceType":"script"}