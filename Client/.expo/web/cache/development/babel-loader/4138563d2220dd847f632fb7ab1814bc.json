{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ora = ora;\nexports.logNewSection = logNewSection;\n\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n\n  _chalk = function _chalk() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commander() {\n  var data = _interopRequireDefault(require(\"commander\"));\n\n  _commander = function _commander() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ora() {\n  var data = _interopRequireDefault(require(\"ora\"));\n\n  _ora = function _ora() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _log() {\n  var data = _interopRequireDefault(require(\"../log\"));\n\n  _log = function _log() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar logReal = console.log;\nvar infoReal = console.info;\nvar warnReal = console.warn;\nvar errorReal = console.error;\n\nfunction ora(options) {\n  var inputOptions = typeof options === 'string' ? {\n    text: options\n  } : options || {};\n\n  var disabled = _commander().default.nonInteractive || _log().default.isDebug;\n\n  var spinner = (0, _ora().default)(_objectSpread({\n    isEnabled: !disabled,\n    stream: disabled ? process.stdout : process.stderr\n  }, inputOptions));\n  var oraStart = spinner.start.bind(spinner);\n  var oraStop = spinner.stop.bind(spinner);\n  var oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n\n  var logWrap = function logWrap(method, args) {\n    oraStop();\n    method.apply(void 0, _toConsumableArray(args));\n    spinner.start();\n  };\n\n  var wrapNativeLogs = function wrapNativeLogs() {\n    console.log = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return logWrap(logReal, args);\n    };\n\n    console.info = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return logWrap(infoReal, args);\n    };\n\n    console.warn = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return logWrap(warnReal, args);\n    };\n\n    console.error = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return logWrap(errorReal, args);\n    };\n  };\n\n  var resetNativeLogs = function resetNativeLogs() {\n    console.log = logReal;\n    console.info = logReal;\n    console.warn = warnReal;\n    console.error = errorReal;\n  };\n\n  spinner.start = function (text) {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n\n  spinner.stopAndPersist = function (options) {\n    var result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n\n  spinner.stop = function () {\n    var result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n\n  _log().default.setSpinner(spinner);\n\n  return spinner;\n}\n\nfunction logNewSection(title) {\n  var spinner = ora(_chalk().default.bold(title));\n  spinner.start();\n  return spinner;\n}","map":{"version":3,"sources":["../../src/utils/ora.ts"],"names":["logReal","console","infoReal","warnReal","errorReal","inputOptions","text","options","disabled","program","Log","spinner","isEnabled","stream","process","oraStart","oraStop","oraStopAndPersist","logWrap","method","wrapNativeLogs","resetNativeLogs","result","ora","chalk"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport program from 'commander';\nimport oraReal, { Ora } from 'ora';\n\nimport Log from '../log';\n\n// eslint-disable-next-line no-console\nconst logReal = console.log;\n// eslint-disable-next-line no-console\nconst infoReal = console.info;\n// eslint-disable-next-line no-console\nconst warnReal = console.warn;\n// eslint-disable-next-line no-console\nconst errorReal = console.error;\n\n/**\n * A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\n *\n * @param options\n * @returns\n */\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = program.nonInteractive || Log.isDebug;\n  const spinner = oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n\n  const oraStart = spinner.start.bind(spinner);\n  const oraStop = spinner.stop.bind(spinner);\n  const oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n\n  const logWrap = (method: any, args: any[]): void => {\n    oraStop();\n    method(...args);\n    spinner.start();\n  };\n\n  const wrapNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = (...args: any) => logWrap(logReal, args);\n    // eslint-disable-next-line no-console\n    console.info = (...args: any) => logWrap(infoReal, args);\n    // eslint-disable-next-line no-console\n    console.warn = (...args: any) => logWrap(warnReal, args);\n    // eslint-disable-next-line no-console\n    console.error = (...args: any) => logWrap(errorReal, args);\n  };\n\n  const resetNativeLogs = (): void => {\n    // eslint-disable-next-line no-console\n    console.log = logReal;\n    // eslint-disable-next-line no-console\n    console.info = logReal;\n    // eslint-disable-next-line no-console\n    console.warn = warnReal;\n    // eslint-disable-next-line no-console\n    console.error = errorReal;\n  };\n\n  spinner.start = (text): Ora => {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n\n  spinner.stopAndPersist = (options): Ora => {\n    const result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n\n  spinner.stop = (): Ora => {\n    const result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n\n  // Always make the central logging module aware of the current spinner\n  Log.setSpinner(spinner);\n\n  return spinner;\n}\n\n/**\n * Create a unified section spinner.\n *\n * @param title\n * @returns\n */\nexport function logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  // Prevent the spinner from clashing with debug logs\n  spinner.start();\n  return spinner;\n}\n"]},"metadata":{},"sourceType":"script"}