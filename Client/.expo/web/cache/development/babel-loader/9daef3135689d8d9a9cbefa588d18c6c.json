{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortObject = sortObject;\nexports.sortObjWithOrder = sortObjWithOrder;\nexports.sortWithOrder = sortWithOrder;\nexports.reverseSortString = void 0;\n\nfunction sortObject(obj, compareFn) {\n  return Object.keys(obj).sort(compareFn).reduce(function (acc, key) {\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, obj[key]));\n  }, {});\n}\n\nfunction sortObjWithOrder(obj, order) {\n  var sorted = sortWithOrder(Object.keys(obj), order);\n  return sorted.reduce(function (acc, key) {\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, obj[key]));\n  }, {});\n}\n\nfunction sortWithOrder(obj, order) {\n  var groupOrder = _toConsumableArray(new Set(order.concat(obj)));\n\n  var sorted = [];\n\n  while (groupOrder.length) {\n    var key = groupOrder.shift();\n    var index = obj.indexOf(key);\n\n    if (index > -1) {\n      var _obj$splice = obj.splice(index, 1),\n          _obj$splice2 = _slicedToArray(_obj$splice, 1),\n          item = _obj$splice2[0];\n\n      sorted.push(item);\n    }\n  }\n\n  return sorted;\n}\n\nvar reverseSortString = function reverseSortString(a, b) {\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n\nexports.reverseSortString = reverseSortString;","map":{"version":3,"sources":["../../src/utils/sortObject.ts"],"names":["obj","sorted","sortWithOrder","Object","groupOrder","order","key","index","reverseSortString","a"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAO,SAAA,UAAA,CAAA,GAAA,EAAA,SAAA,EAGF;AACH,SAAO,MAAM,CAAN,IAAA,CAAA,GAAA,EAAA,IAAA,CAAA,SAAA,EAAA,MAAA,CAGH,UAAA,GAAA,EAAA,GAAA;AAAA,2CAAe,GAAf,2BAEE,GAFF,EAESA,GAAG,CAAA,GAAA,CAFZ;AAAA,GAHG,EAAP,EAAO,CAAP;AASD;;AAEM,SAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,EAGF;AACH,MAAMC,MAAM,GAAGC,aAAa,CAACC,MAAM,CAANA,IAAAA,CAAD,GAACA,CAAD,EAA5B,KAA4B,CAA5B;AAEA,SAAO,MAAM,CAAN,MAAA,CACL,UAAA,GAAA,EAAA,GAAA;AAAA,2CAAe,GAAf,2BAEE,GAFF,EAESH,GAAG,CAAA,GAAA,CAFZ;AAAA,GADK,EAAP,EAAO,CAAP;AAOD;;AAEM,SAAA,aAAA,CAAA,GAAA,EAAA,KAAA,EAAiE;AACtE,MAAMI,UAAU,sBAAO,IAAA,GAAA,CAAQC,KAAK,CAALA,MAAAA,CAA/B,GAA+BA,CAAR,CAAP,CAAhB;;AACA,MAAMJ,MAAgB,GAAtB,EAAA;;AAEA,SAAOG,UAAU,CAAjB,MAAA,EAA0B;AACxB,QAAME,GAAG,GAAGF,UAAU,CAAtB,KAAYA,EAAZ;AACA,QAAMG,KAAK,GAAGP,GAAG,CAAHA,OAAAA,CAAd,GAAcA,CAAd;;AACA,QAAIO,KAAK,GAAG,CAAZ,CAAA,EAAgB;AACd,wBAAeP,GAAG,CAAHA,MAAAA,CAAAA,KAAAA,EAAf,CAAeA,CAAf;AAAA;AAAA,UAAM,IAAN;;AACAC,MAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACD;AACF;;AAED,SAAA,MAAA;AACD;;AAEM,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,CAAA,EAAA,CAAA,EAA0B;AACzD,MAAIC,CAAC,GAAL,CAAA,EAAW,OAAA,CAAA;AACX,MAAIA,CAAC,GAAL,CAAA,EAAW,OAAO,CAAP,CAAA;AACX,SAAA,CAAA;AAHK,CAAA","sourcesContent":["export function sortObject<T extends Record<string, any> = Record<string, any>>(\n  obj: T,\n  compareFn?: (a: string, b: string) => number\n): T {\n  return Object.keys(obj)\n    .sort(compareFn)\n    .reduce(\n      (acc, key) => ({\n        ...acc,\n        [key]: obj[key],\n      }),\n      {}\n    ) as T;\n}\n\nexport function sortObjWithOrder<T extends Record<string, any> = Record<string, any>>(\n  obj: T,\n  order: string[]\n): T {\n  const sorted = sortWithOrder(Object.keys(obj), order);\n\n  return sorted.reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: obj[key],\n    }),\n    {}\n  ) as T;\n}\n\nexport function sortWithOrder(obj: string[], order: string[]): string[] {\n  const groupOrder = [...new Set(order.concat(obj))];\n  const sorted: string[] = [];\n\n  while (groupOrder.length) {\n    const key = groupOrder.shift()!;\n    const index = obj.indexOf(key);\n    if (index > -1) {\n      const [item] = obj.splice(index, 1);\n      sorted.push(item);\n    }\n  }\n\n  return sorted;\n}\n\nexport const reverseSortString = (a: string, b: string) => {\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n"]},"metadata":{},"sourceType":"script"}