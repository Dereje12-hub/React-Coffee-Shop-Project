{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _excluded = [\"providers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortAndroidManifest = sortAndroidManifest;\nexports.withAndroidBaseMods = withAndroidBaseMods;\nexports.getAndroidModFileProviders = getAndroidModFileProviders;\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _android() {\n  var data = require(\"../android\");\n\n  _android = function _android() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n\n  _XML = function _XML() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n\n  _sortObject = function _sortObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _fs$promises = _fs().promises,\n    readFile = _fs$promises.readFile,\n    writeFile = _fs$promises.writeFile;\n\nfunction getAndroidManifestTemplate(config) {\n  var _config$android$packa, _config$android;\n\n  return (0, _XML().parseXMLAsync)(\"\\n  <manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" package=\\\"\" + ((_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : 'com.placeholder.appid') + \"\\\">\\n\\n    <uses-permission android:name=\\\"android.permission.INTERNET\\\"/>\\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\\n    <uses-permission android:name=\\\"android.permission.SYSTEM_ALERT_WINDOW\\\"/>\\n    <uses-permission android:name=\\\"android.permission.READ_PHONE_STATE\\\"/>\\n    <uses-permission android:name=\\\"android.permission.VIBRATE\\\"/>\\n    <uses-permission android:name=\\\"android.permission.MODIFY_AUDIO_SETTINGS\\\"/>\\n    <!-- These require runtime permissions on M -->\\n    <uses-permission android:name=\\\"android.permission.READ_EXTERNAL_STORAGE\\\"/>\\n    <uses-permission android:name=\\\"android.permission.WRITE_EXTERNAL_STORAGE\\\"/>\\n    <!-- END OPTIONAL PERMISSIONS -->\\n\\n    <queries>\\n      <!-- Support checking for http(s) links via the Linking API -->\\n      <intent>\\n        <action android:name=\\\"android.intent.action.VIEW\\\" />\\n        <category android:name=\\\"android.intent.category.BROWSABLE\\\" />\\n        <data android:scheme=\\\"https\\\" />\\n      </intent>\\n    </queries>\\n\\n    <application\\n      android:name=\\\".MainApplication\\\"\\n      android:label=\\\"@string/app_name\\\"\\n      android:icon=\\\"@mipmap/ic_launcher\\\"\\n      android:roundIcon=\\\"@mipmap/ic_launcher_round\\\"\\n      android:allowBackup=\\\"false\\\"\\n      android:theme=\\\"@style/AppTheme\\\"\\n      android:usesCleartextTraffic=\\\"true\\\"\\n    >\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_UPDATE_URL\\\" android:value=\\\"YOUR-APP-URL-HERE\\\"/>\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_SDK_VERSION\\\" android:value=\\\"YOUR-APP-SDK-VERSION-HERE\\\"/>\\n      <activity\\n        android:name=\\\".MainActivity\\\"\\n        android:label=\\\"@string/app_name\\\"\\n        android:configChanges=\\\"keyboard|keyboardHidden|orientation|screenSize|uiMode\\\"\\n        android:launchMode=\\\"singleTask\\\"\\n        android:windowSoftInputMode=\\\"adjustResize\\\"\\n        android:theme=\\\"@style/Theme.App.SplashScreen\\\"\\n      >\\n        <intent-filter>\\n          <action android:name=\\\"android.intent.action.MAIN\\\"/>\\n          <category android:name=\\\"android.intent.category.LAUNCHER\\\"/>\\n        </intent-filter>\\n      </activity>\\n      <activity android:name=\\\"com.facebook.react.devsupport.DevSettingsActivity\\\"/>\\n    </application>\\n  </manifest>\\n  \");\n}\n\nfunction sortAndroidManifest(obj) {\n  if (obj.manifest) {\n    obj.manifest = (0, _sortObject().sortObject)(obj.manifest, _sortObject().reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      obj.manifest['uses-permission'].sort(function (a, b) {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      obj.manifest.application = obj.manifest.application.map(function (application) {\n        application = (0, _sortObject().sortObjWithOrder)(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          application['meta-data'].sort(function (a, b) {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n\n        return application;\n      });\n    }\n  }\n\n  return obj;\n}\n\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function read() {\n      return function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {\n                  filePath: '',\n                  modResults: {}\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write() {\n      return function _callee2() {\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  manifest: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref) {\n      var platformProjectRoot = _ref.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    read: function read(filePath, config) {\n      return function _callee3() {\n        return _regeneratorRuntime.async(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(_android().Manifest.readAndroidManifestAsync(filePath));\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (config.modRequest.introspect) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                throw _context3.t0;\n\n              case 10:\n                _context3.next = 12;\n                return _regeneratorRuntime.awrap(getAndroidManifestTemplate(config));\n\n              case 12:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, [[0, 6]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref2) {\n      return function _callee4() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                modResults = _ref2.modResults, introspect = _ref2.modRequest.introspect;\n\n                if (!introspect) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                _context4.next = 5;\n                return _regeneratorRuntime.awrap(_android().Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults)));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  gradleProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var platformProjectRoot = _ref3.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'gradle.properties');\n    },\n    read: function read(filePath, config) {\n      return function _callee5() {\n        return _regeneratorRuntime.async(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.t0 = _regeneratorRuntime;\n                _context5.t1 = _android().Properties;\n                _context5.next = 5;\n                return _regeneratorRuntime.awrap(readFile(filePath, 'utf8'));\n\n              case 5:\n                _context5.t2 = _context5.sent;\n                _context5.t3 = _context5.t1.parsePropertiesFile.call(_context5.t1, _context5.t2);\n                _context5.next = 9;\n                return _context5.t0.awrap.call(_context5.t0, _context5.t3);\n\n              case 9:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t4 = _context5[\"catch\"](0);\n\n                if (config.modRequest.introspect) {\n                  _context5.next = 16;\n                  break;\n                }\n\n                throw _context5.t4;\n\n              case 16:\n                return _context5.abrupt(\"return\", []);\n\n              case 17:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, [[0, 12]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref4) {\n      return function _callee6() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                modResults = _ref4.modResults, introspect = _ref4.modRequest.introspect;\n\n                if (!introspect) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                _context6.next = 5;\n                return _regeneratorRuntime.awrap(writeFile(filePath, _android().Properties.propertiesListToString(modResults)));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  strings: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref5) {\n      return function _callee7() {\n        var _ref5$modRequest, projectRoot, introspect;\n\n        return _regeneratorRuntime.async(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref5$modRequest = _ref5.modRequest, projectRoot = _ref5$modRequest.projectRoot, introspect = _ref5$modRequest.introspect;\n                _context7.prev = 1;\n                _context7.next = 4;\n                return _regeneratorRuntime.awrap(_android().Strings.getProjectStringsXMLPathAsync(projectRoot));\n\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](1);\n\n                if (introspect) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                throw _context7.t0;\n\n              case 11:\n                return _context7.abrupt(\"return\", '');\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    read: function read(filePath, config) {\n      return function _callee8() {\n        return _regeneratorRuntime.async(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return _regeneratorRuntime.awrap(_android().Resources.readResourcesXMLAsync({\n                  path: filePath\n                }));\n\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 6:\n                _context8.prev = 6;\n                _context8.t0 = _context8[\"catch\"](0);\n\n                if (config.modRequest.introspect) {\n                  _context8.next = 10;\n                  break;\n                }\n\n                throw _context8.t0;\n\n              case 10:\n                return _context8.abrupt(\"return\", {\n                  resources: {}\n                });\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, [[0, 6]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref6) {\n      return function _callee9() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                modResults = _ref6.modResults, introspect = _ref6.modRequest.introspect;\n\n                if (!introspect) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 3:\n                _context9.next = 5;\n                return _regeneratorRuntime.awrap((0, _XML().writeXMLAsync)({\n                  path: filePath,\n                  xml: modResults\n                }));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  colors: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref7) {\n      return function _callee10() {\n        var _ref7$modRequest, projectRoot, introspect;\n\n        return _regeneratorRuntime.async(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _ref7$modRequest = _ref7.modRequest, projectRoot = _ref7$modRequest.projectRoot, introspect = _ref7$modRequest.introspect;\n                _context10.prev = 1;\n                _context10.next = 4;\n                return _regeneratorRuntime.awrap(_android().Colors.getProjectColorsXMLPathAsync(projectRoot));\n\n              case 4:\n                return _context10.abrupt(\"return\", _context10.sent);\n\n              case 7:\n                _context10.prev = 7;\n                _context10.t0 = _context10[\"catch\"](1);\n\n                if (introspect) {\n                  _context10.next = 11;\n                  break;\n                }\n\n                throw _context10.t0;\n\n              case 11:\n                return _context10.abrupt(\"return\", '');\n\n              case 12:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    read: function read(filePath, _ref8) {\n      return function _callee11() {\n        var introspect;\n        return _regeneratorRuntime.async(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                introspect = _ref8.modRequest.introspect;\n                _context11.prev = 1;\n                _context11.next = 4;\n                return _regeneratorRuntime.awrap(_android().Resources.readResourcesXMLAsync({\n                  path: filePath\n                }));\n\n              case 4:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 7:\n                _context11.prev = 7;\n                _context11.t0 = _context11[\"catch\"](1);\n\n                if (introspect) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                throw _context11.t0;\n\n              case 11:\n                return _context11.abrupt(\"return\", {\n                  resources: {}\n                });\n\n              case 12:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref9) {\n      return function _callee12() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                modResults = _ref9.modResults, introspect = _ref9.modRequest.introspect;\n\n                if (!introspect) {\n                  _context12.next = 3;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\");\n\n              case 3:\n                _context12.next = 5;\n                return _regeneratorRuntime.awrap((0, _XML().writeXMLAsync)({\n                  path: filePath,\n                  xml: modResults\n                }));\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  colorsNight: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref10) {\n      return function _callee13() {\n        var _ref10$modRequest, projectRoot, introspect;\n\n        return _regeneratorRuntime.async(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _ref10$modRequest = _ref10.modRequest, projectRoot = _ref10$modRequest.projectRoot, introspect = _ref10$modRequest.introspect;\n                _context13.prev = 1;\n                _context13.next = 4;\n                return _regeneratorRuntime.awrap(_android().Colors.getProjectColorsXMLPathAsync(projectRoot, {\n                  kind: 'values-night'\n                }));\n\n              case 4:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 7:\n                _context13.prev = 7;\n                _context13.t0 = _context13[\"catch\"](1);\n\n                if (introspect) {\n                  _context13.next = 11;\n                  break;\n                }\n\n                throw _context13.t0;\n\n              case 11:\n                return _context13.abrupt(\"return\", '');\n\n              case 12:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    read: function read(filePath, config) {\n      return function _callee14() {\n        return _regeneratorRuntime.async(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _context14.next = 3;\n                return _regeneratorRuntime.awrap(_android().Resources.readResourcesXMLAsync({\n                  path: filePath\n                }));\n\n              case 3:\n                return _context14.abrupt(\"return\", _context14.sent);\n\n              case 6:\n                _context14.prev = 6;\n                _context14.t0 = _context14[\"catch\"](0);\n\n                if (config.modRequest.introspect) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                throw _context14.t0;\n\n              case 10:\n                return _context14.abrupt(\"return\", {\n                  resources: {}\n                });\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, null, null, [[0, 6]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref11) {\n      return function _callee15() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                modResults = _ref11.modResults, introspect = _ref11.modRequest.introspect;\n\n                if (!introspect) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\");\n\n              case 3:\n                _context15.next = 5;\n                return _regeneratorRuntime.awrap((0, _XML().writeXMLAsync)({\n                  path: filePath,\n                  xml: modResults\n                }));\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  styles: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref12) {\n      return function _callee16() {\n        var _ref12$modRequest, projectRoot, introspect;\n\n        return _regeneratorRuntime.async(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _ref12$modRequest = _ref12.modRequest, projectRoot = _ref12$modRequest.projectRoot, introspect = _ref12$modRequest.introspect;\n                _context16.prev = 1;\n                _context16.next = 4;\n                return _regeneratorRuntime.awrap(_android().Styles.getProjectStylesXMLPathAsync(projectRoot));\n\n              case 4:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 7:\n                _context16.prev = 7;\n                _context16.t0 = _context16[\"catch\"](1);\n\n                if (introspect) {\n                  _context16.next = 11;\n                  break;\n                }\n\n                throw _context16.t0;\n\n              case 11:\n                return _context16.abrupt(\"return\", '');\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    read: function read(filePath, config) {\n      return function _callee17() {\n        var _styles$resources$$, styles;\n\n        return _regeneratorRuntime.async(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                styles = {\n                  resources: {}\n                };\n                _context17.prev = 1;\n                _context17.next = 4;\n                return _regeneratorRuntime.awrap(_android().Resources.readResourcesXMLAsync({\n                  path: filePath,\n                  fallback: \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><resources xmlns:tools=\\\"http://schemas.android.com/tools\\\"></resources>\"\n                }));\n\n              case 4:\n                styles = _context17.sent;\n                _context17.next = 11;\n                break;\n\n              case 7:\n                _context17.prev = 7;\n                _context17.t0 = _context17[\"catch\"](1);\n\n                if (config.modRequest.introspect) {\n                  _context17.next = 11;\n                  break;\n                }\n\n                throw _context17.t0;\n\n              case 11:\n                if (!styles.resources.$) {\n                  styles.resources.$ = {};\n                }\n\n                if (!((_styles$resources$$ = styles.resources.$) !== null && _styles$resources$$ !== void 0 && _styles$resources$$['xmlns:tools'])) {\n                  styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n                }\n\n                return _context17.abrupt(\"return\", styles);\n\n              case 14:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref13) {\n      return function _callee18() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                modResults = _ref13.modResults, introspect = _ref13.modRequest.introspect;\n\n                if (!introspect) {\n                  _context18.next = 3;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\");\n\n              case 3:\n                _context18.next = 5;\n                return _regeneratorRuntime.awrap((0, _XML().writeXMLAsync)({\n                  path: filePath,\n                  xml: modResults\n                }));\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  projectBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref14) {\n      var projectRoot = _ref14.modRequest.projectRoot;\n      return _android().Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    read: function read(filePath) {\n      return function _callee19() {\n        return _regeneratorRuntime.async(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt(\"return\", _android().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref15) {\n      return function _callee20() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                contents = _ref15.modResults.contents;\n                _context20.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  settingsGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref16) {\n      var projectRoot = _ref16.modRequest.projectRoot;\n      return _android().Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    read: function read(filePath) {\n      return function _callee21() {\n        return _regeneratorRuntime.async(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                return _context21.abrupt(\"return\", _android().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref17) {\n      return function _callee22() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                contents = _ref17.modResults.contents;\n                _context22.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  appBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref18) {\n      var projectRoot = _ref18.modRequest.projectRoot;\n      return _android().Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    read: function read(filePath) {\n      return function _callee23() {\n        return _regeneratorRuntime.async(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                return _context23.abrupt(\"return\", _android().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref19) {\n      return function _callee24() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                contents = _ref19.modResults.contents;\n                _context24.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  mainActivity: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref20) {\n      var projectRoot = _ref20.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    read: function read(filePath) {\n      return function _callee25() {\n        return _regeneratorRuntime.async(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                return _context25.abrupt(\"return\", _android().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref21) {\n      return function _callee26() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                contents = _ref21.modResults.contents;\n                _context26.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  mainApplication: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref22) {\n      var projectRoot = _ref22.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    read: function read(filePath) {\n      return function _callee27() {\n        return _regeneratorRuntime.async(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                return _context27.abrupt(\"return\", _android().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref23) {\n      return function _callee28() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                contents = _ref23.modResults.contents;\n                _context28.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  })\n};\n\nfunction withAndroidBaseMods(config) {\n  var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var providers = _ref24.providers,\n      props = _objectWithoutProperties(_ref24, _excluded);\n\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'android',\n    providers: providers !== null && providers !== void 0 ? providers : getAndroidModFileProviders()\n  }));\n}\n\nfunction getAndroidModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"sources":["../../src/plugins/withAndroidBaseMods.ts"],"names":["writeFile","promises","config","obj","reverseSortString","Array","a","b","application","defaultProviders","dangerous","getFilePath","filePath","modResults","manifest","isIntrospective","modRequest","platformProjectRoot","path","Manifest","getAndroidManifestTemplate","introspect","sortAndroidManifest","gradleProperties","Properties","readFile","strings","Strings","resources","xml","colors","Colors","colorsNight","kind","styles","Styles","fallback","projectBuildGradle","projectRoot","Paths","contents","settingsGradle","appBuildGradle","mainActivity","mainApplication","props","platform","providers","getAndroidModFileProviders"],"mappings":"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","sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nfunction getAndroidManifestTemplate(config: ExportedConfig) {\n  // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n  // TODO: Read from remote template when possible\n  return parseXMLAsync(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n    config.android?.package ?? 'com.placeholder.appid'\n  }\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/>\n    <uses-permission android:name=\"android.permission.VIBRATE\"/>\n    <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `) as Promise<AndroidManifest>;\n}\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map(application => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath, config) {\n      try {\n        return await Manifest.readAndroidManifestAsync(filePath);\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return await getAndroidManifestTemplate(config);\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath, config) {\n      try {\n        return await Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return [];\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Strings.getProjectStringsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Styles.getProjectStylesXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      let styles: Resources.ResourceXML = { resources: {} };\n\n      try {\n        // Adds support for `tools:x`\n        styles = await Resources.readResourcesXMLAsync({\n          path: filePath,\n          fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n        });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainApplication: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n"]},"metadata":{},"sourceType":"script"}