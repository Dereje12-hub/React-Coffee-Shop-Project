{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitizeNameForGradle = sanitizeNameForGradle;\nexports.getName = getName;\nexports.applyNameSettingsGradle = applyNameSettingsGradle;\nexports.withNameSettingsGradle = exports.withName = void 0;\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Resources() {\n  var data = require(\"./Resources\");\n\n  _Resources = function _Resources() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Strings() {\n  var data = require(\"./Strings\");\n\n  _Strings = function _Strings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction sanitizeNameForGradle(name) {\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nvar withName = (0, _androidPlugins().createStringsXmlPlugin)(applyNameFromConfig, 'withName');\nexports.withName = withName;\n\nvar withNameSettingsGradle = function withNameSettingsGradle(config) {\n  return (0, _androidPlugins().withSettingsGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('name', \"Cannot automatically configure settings.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withNameSettingsGradle = withNameSettingsGradle;\n\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction applyNameFromConfig(config, stringsJSON) {\n  var name = getName(config);\n\n  if (name) {\n    return (0, _Strings().setStringItem)([(0, _Resources().buildResourceItem)({\n      name: 'app_name',\n      value: name\n    })], stringsJSON);\n  }\n\n  return (0, _Strings().removeStringItem)('app_name', stringsJSON);\n}\n\nfunction applyNameSettingsGradle(config, settingsGradle) {\n  var _getName;\n\n  var name = sanitizeNameForGradle((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : '');\n  return settingsGradle.replace(/rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, \"rootProject.name = '\" + name.replace(/'/g, \"\\\\'\") + \"'\");\n}","map":{"version":3,"sources":["../../src/android/Name.ts"],"names":["name","withName","withNameSettingsGradle","config","applyNameSettingsGradle","getName","value","sanitizeNameForGradle","settingsGradle"],"mappings":";;;;;;;;;;AAGA,SAAA,eAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,8BAAA;;AAAA,EAAA,eAAA,GAAA,2BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,UAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,eAAA;;AAAA,EAAA,UAAA,GAAA,sBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,aAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAQO,SAAA,qBAAA,CAAA,IAAA,EAAqD;AAG1D,SAAOA,IAAI,CAAJA,OAAAA,CAAAA,2BAAAA,EAAP,EAAOA,CAAP;AACD;;AAEM,IAAMC,QAAQ,GAAG,CAAA,GAAA,eAAA,GAAA,sBAAA,EAAA,mBAAA,EAAjB,UAAiB,CAAjB;;;AAEA,IAAMC,sBAAoC,GAAGC,SAAvCD,sBAAuCC,CAAAA,MAAM,EAAI;AAC5D,SAAO,CAAA,GAAA,eAAA,GAAA,kBAAA,EAAA,MAAA,EAA2BA,UAAAA,MAAM,EAAI;AAC1C,QAAIA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAA6C;AAC3CA,MAAAA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,GAA6BC,uBAAuB,CAAA,MAAA,EAASD,MAAM,CAANA,UAAAA,CAA7DA,QAAoD,CAApDA;AADF,KAAA,MAEO;AACL,OAAA,GAAA,SAAA,GAAA,iBAAA,EAAA,MAAA;AAID;;AACD,WAAA,MAAA;AATF,GAAO,CAAP;AADK,CAAA;;;;AAcA,SAAA,OAAA,CAAA,MAAA,EAAmD;AACxD,SAAO,OAAOA,MAAM,CAAb,IAAA,KAAA,QAAA,GAAkCA,MAAM,CAAxC,IAAA,GAAP,IAAA;AACD;;AAED,SAAA,mBAAA,CAAA,MAAA,EAAA,WAAA,EAGe;AACb,MAAMH,IAAI,GAAGK,OAAO,CAApB,MAAoB,CAApB;;AACA,MAAA,IAAA,EAAU;AACR,WAAO,CAAA,GAAA,QAAA,GAAA,aAAA,EAAc,CAAC,CAAA,GAAA,UAAA,GAAA,iBAAA,EAAkB;AAAEL,MAAAA,IAAI,EAAN,UAAA;AAAoBM,MAAAA,KAAK,EAAEN;AAA3B,KAAlB,CAAD,CAAd,EAAP,WAAO,CAAP;AACD;;AACD,SAAO,CAAA,GAAA,QAAA,GAAA,gBAAA,EAAA,UAAA,EAAP,WAAO,CAAP;AACD;;AAQM,SAAA,uBAAA,CAAA,MAAA,EAAA,cAAA,EAA2F;AAAA,MAAA,QAAA;;AAChG,MAAMA,IAAI,GAAGO,qBAAqB,CAAA,CAAA,QAAA,GAACF,OAAO,CAAR,MAAQ,CAAR,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,QAAA,GAD8D,EAC9D,CAAlC;AAGA,SAAOG,cAAc,CAAdA,OAAAA,CAAAA,oDAAAA,2BAEkBR,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,EAFzB,KAEyBA,CAFlBQ,OAAP;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed https://bit.ly/3l6xqKL\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = config => {\n  return withSettingsGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'name',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name.replace(/'/g, \"\\\\'\")}'`\n  );\n}\n"]},"metadata":{},"sourceType":"script"}