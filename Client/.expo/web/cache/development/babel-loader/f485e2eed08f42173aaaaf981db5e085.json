{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEasBuildGradlePath = getEasBuildGradlePath;\nexports.configureEasBuildAsync = configureEasBuildAsync;\nexports.isEasBuildGradleConfiguredAsync = isEasBuildGradleConfiguredAsync;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _EasBuildGradleScript() {\n  var data = _interopRequireDefault(require(\"./EasBuildGradleScript\"));\n\n  _EasBuildGradleScript = function _EasBuildGradleScript() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"./Paths\"));\n\n  Paths = function Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content, applyLine) {\n  return content.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === applyLine || line === applyLine.replace(/\"/g, \"'\");\n  });\n}\n\nfunction getEasBuildGradlePath(projectRoot) {\n  return _path().default.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nfunction configureEasBuildAsync(projectRoot) {\n  var buildGradlePath, easGradlePath, buildGradleContent, hasEasGradleApply;\n  return _regeneratorRuntime.async(function configureEasBuildAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          buildGradlePath = Paths().getAppBuildGradleFilePath(projectRoot);\n          easGradlePath = getEasBuildGradlePath(projectRoot);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(_fsExtra().default.writeFile(easGradlePath, _EasBuildGradleScript().default));\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(_fsExtra().default.readFile(_path().default.join(buildGradlePath), 'utf8'));\n\n        case 6:\n          buildGradleContent = _context.sent;\n          hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n          if (hasEasGradleApply) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(_fsExtra().default.writeFile(buildGradlePath, buildGradleContent.trim() + \"\\n\" + APPLY_EAS_GRADLE + \"\\n\"));\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isEasBuildGradleConfiguredAsync(projectRoot) {\n  var buildGradlePath, easGradlePath, hasEasGradleFile, buildGradleContent, hasEasGradleApply;\n  return _regeneratorRuntime.async(function isEasBuildGradleConfiguredAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          buildGradlePath = Paths().getAppBuildGradleFilePath(projectRoot);\n          easGradlePath = getEasBuildGradlePath(projectRoot);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(_fsExtra().default.pathExists(easGradlePath));\n\n        case 4:\n          hasEasGradleFile = _context2.sent;\n          _context2.next = 7;\n          return _regeneratorRuntime.awrap(_fsExtra().default.readFile(_path().default.join(buildGradlePath), 'utf8'));\n\n        case 7:\n          buildGradleContent = _context2.sent;\n          hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n          return _context2.abrupt(\"return\", hasEasGradleApply && hasEasGradleFile);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/android/EasBuild.ts"],"names":["APPLY_EAS_GRADLE","line","applyLine","path","buildGradlePath","Paths","easGradlePath","getEasBuildGradlePath","fs","gradleScript","buildGradleContent","hasEasGradleApply","hasApplyLine","hasEasGradleFile"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`);\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.pathExists(easGradlePath);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"]},"metadata":{},"sourceType":"script"}