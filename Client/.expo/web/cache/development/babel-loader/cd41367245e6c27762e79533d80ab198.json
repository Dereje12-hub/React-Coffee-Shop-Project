{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePropertiesFile = parsePropertiesFile;\nexports.propertiesListToString = propertiesListToString;\n\nfunction parsePropertiesFile(contents) {\n  var propertiesList = [];\n  var lines = contents.split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n\n    if (!line) {\n      propertiesList.push({\n        type: 'empty'\n      });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({\n        type: 'comment',\n        value: line.substring(1).trimStart()\n      });\n    } else {\n      var eok = line.indexOf('=');\n      var key = line.slice(0, eok);\n      var value = line.slice(eok + 1, line.length);\n      propertiesList.push({\n        type: 'property',\n        key: key,\n        value: value\n      });\n    }\n  }\n\n  return propertiesList;\n}\n\nfunction propertiesListToString(props) {\n  var output = '';\n\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += prop.key + \"=\" + prop.value;\n    } else {\n      throw new Error(\"Invalid properties type \\\"\" + prop.type + \"\\\"\");\n    }\n\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["../../src/android/Properties.ts"],"names":["propertiesList","lines","contents","i","line","type","value","eok","key","output","props","prop"],"mappings":";;;;;;;;AAcO,SAAA,mBAAA,CAAA,QAAA,EAAiE;AACtE,MAAMA,cAAgC,GAAtC,EAAA;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAARA,KAAAA,CAAd,IAAcA,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,KAAK,CAAzB,MAAA,EAAkCE,CAAlC,EAAA,EAAuC;AACrC,QAAMC,IAAI,GAAGH,KAAK,CAALA,CAAK,CAALA,CAAb,IAAaA,EAAb;;AACA,QAAI,CAAJ,IAAA,EAAW;AACTD,MAAAA,cAAc,CAAdA,IAAAA,CAAoB;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAApBL;AADF,KAAA,MAEO,IAAII,IAAI,CAAJA,UAAAA,CAAJ,GAAIA,CAAJ,EAA0B;AAC/BJ,MAAAA,cAAc,CAAdA,IAAAA,CAAoB;AAAEK,QAAAA,IAAI,EAAN,SAAA;AAAmBC,QAAAA,KAAK,EAAEF,IAAI,CAAJA,SAAAA,CAAAA,CAAAA,EAAAA,SAAAA;AAA1B,OAApBJ;AADK,KAAA,MAEA;AACL,UAAMO,GAAG,GAAGH,IAAI,CAAJA,OAAAA,CAAZ,GAAYA,CAAZ;AACA,UAAMI,GAAG,GAAGJ,IAAI,CAAJA,KAAAA,CAAAA,CAAAA,EAAZ,GAAYA,CAAZ;AACA,UAAME,KAAK,GAAGF,IAAI,CAAJA,KAAAA,CAAWG,GAAG,GAAdH,CAAAA,EAAoBA,IAAI,CAAtC,MAAcA,CAAd;AACAJ,MAAAA,cAAc,CAAdA,IAAAA,CAAoB;AAAEK,QAAAA,IAAI,EAAN,UAAA;AAAoBG,QAAAA,GAApB,EAAoBA,GAApB;AAAyBF,QAAAA,KAAAA,EAAAA;AAAzB,OAApBN;AACD;AACF;;AAED,SAAA,cAAA;AACD;;AAEM,SAAA,sBAAA,CAAA,KAAA,EAAiE;AACtE,MAAIS,MAAM,GAAV,EAAA;;AACA,OAAK,IAAIN,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGO,KAAK,CAAzB,MAAA,EAAkCP,CAAlC,EAAA,EAAuC;AACrC,QAAMQ,IAAI,GAAGD,KAAK,CAAlB,CAAkB,CAAlB;;AACA,QAAIC,IAAI,CAAJA,IAAAA,KAAJ,OAAA,EAA2B;AACzBF,MAAAA,MAAM,IAANA,EAAAA;AADF,KAAA,MAEO,IAAIE,IAAI,CAAJA,IAAAA,KAAJ,SAAA,EAA6B;AAClCF,MAAAA,MAAM,IAAI,OAAOE,IAAI,CAArBF,KAAAA;AADK,KAAA,MAEA,IAAIE,IAAI,CAAJA,IAAAA,KAAJ,UAAA,EAA8B;AACnCF,MAAAA,MAAM,IAAOE,IAAI,CAACH,GAAZ,SAAmBG,IAAI,CAA7BF,KAAAA;AADK,KAAA,MAEA;AAEL,YAAM,IAAA,KAAA,gCAAsCE,IAAI,CAAhD,IAAM,QAAN;AACD;;AACD,QAAIR,CAAC,GAAGO,KAAK,CAALA,MAAAA,GAAR,CAAA,EAA0B;AACxBD,MAAAA,MAAM,IAANA,IAAAA;AACD;AACF;;AACD,SAAA,MAAA;AACD","sourcesContent":["export type PropertiesItem =\n  | {\n      type: 'comment';\n      value: string;\n    }\n  | {\n      type: 'empty';\n    }\n  | {\n      type: 'property';\n      key: string;\n      value: string;\n    };\n\nexport function parsePropertiesFile(contents: string): PropertiesItem[] {\n  const propertiesList: PropertiesItem[] = [];\n  const lines = contents.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) {\n      propertiesList.push({ type: 'empty' });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({ type: 'comment', value: line.substring(1).trimStart() });\n    } else {\n      const eok = line.indexOf('=');\n      const key = line.slice(0, eok);\n      const value = line.slice(eok + 1, line.length);\n      propertiesList.push({ type: 'property', key, value });\n    }\n  }\n\n  return propertiesList;\n}\n\nexport function propertiesListToString(props: PropertiesItem[]): string {\n  let output = '';\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += `${prop.key}=${prop.value}`;\n    } else {\n      // @ts-ignore: assertion\n      throw new Error(`Invalid properties type \"${prop.type}\"`);\n    }\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n  return output;\n}\n"]},"metadata":{},"sourceType":"script"}