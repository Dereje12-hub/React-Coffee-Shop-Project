{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\n\nvar fs_1 = require(\"fs\");\n\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\n\nvar command_exists_1 = require(\"command-exists\");\n\nvar shared_1 = require(\"./shared\");\n\nvar utils_1 = require(\"../utils\");\n\nvar user_interface_1 = tslib_1.__importDefault(require(\"../user-interface\"));\n\nvar debug = debug_1.default('devcert:platforms:linux');\n\nvar LinuxPlatform = function () {\n  function LinuxPlatform() {\n    _classCallCheck(this, LinuxPlatform);\n\n    this.FIREFOX_NSS_DIR = path_1.default.join(process.env.HOME, '.mozilla/firefox/*');\n    this.CHROME_NSS_DIR = path_1.default.join(process.env.HOME, '.pki/nssdb');\n    this.FIREFOX_BIN_PATH = '/usr/bin/firefox';\n    this.CHROME_BIN_PATH = '/usr/bin/google-chrome';\n    this.HOST_FILE_PATH = '/etc/hosts';\n  }\n\n  _createClass(LinuxPlatform, [{\n    key: \"addToTrustStores\",\n    value: function addToTrustStores(certificatePath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                debug('Adding devcert root CA to Linux system-wide trust stores');\n                utils_1.run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n                utils_1.run('sudo', ['update-ca-certificates']);\n\n                if (!this.isFirefoxInstalled()) {\n                  _context.next = 20;\n                  break;\n                }\n\n                debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n\n                if (command_exists_1.sync('certutil')) {\n                  _context.next = 18;\n                  break;\n                }\n\n                if (!options.skipCertutilInstall) {\n                  _context.next = 11;\n                  break;\n                }\n\n                debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n                shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n                _context.next = 18;\n                break;\n\n              case 11:\n                debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n                utils_1.run('sudo', ['apt', 'install', 'libnss3-tools']);\n                debug('Installing certificate into Firefox trust stores using NSS tooling');\n                _context.next = 16;\n                return shared_1.closeFirefox();\n\n              case 16:\n                _context.next = 18;\n                return shared_1.addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n\n              case 18:\n                _context.next = 21;\n                break;\n\n              case 20:\n                debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n\n              case 21:\n                if (!this.isChromeInstalled()) {\n                  _context.next = 33;\n                  break;\n                }\n\n                debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n\n                if (command_exists_1.sync('certutil')) {\n                  _context.next = 27;\n                  break;\n                }\n\n                user_interface_1.default.warnChromeOnLinuxWithoutCertutil();\n                _context.next = 31;\n                break;\n\n              case 27:\n                _context.next = 29;\n                return shared_1.closeFirefox();\n\n              case 29:\n                _context.next = 31;\n                return shared_1.addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n\n              case 31:\n                _context.next = 34;\n                break;\n\n              case 33:\n                debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      try {\n        utils_1.run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n        utils_1.run('sudo', ['update-ca-certificates']);\n      } catch (e) {\n        debug(\"failed to remove \" + certificatePath + \" from /usr/local/share/ca-certificates, continuing. \" + e.toString());\n      }\n\n      if (command_exists_1.sync('certutil')) {\n        if (this.isFirefoxInstalled()) {\n          shared_1.removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n\n        if (this.isChromeInstalled()) {\n          shared_1.removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function addDomainToHostFileIfMissing(domain) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n        var trimDomain, hostsFileContents;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                trimDomain = domain.trim().replace(/[\\s;]/g, '');\n                hostsFileContents = fs_1.readFileSync(this.HOST_FILE_PATH, 'utf8');\n\n                if (!hostsFileContents.includes(trimDomain)) {\n                  utils_1.sudoAppend(this.HOST_FILE_PATH, \"127.0.0.1 \" + trimDomain + \"\\n\");\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      shared_1.assertNotTouchingFiles(filepath, 'delete');\n      utils_1.run('sudo', ['rm', '-rf', filepath]);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function readProtectedFile(filepath) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                shared_1.assertNotTouchingFiles(filepath, 'read');\n                _context3.next = 3;\n                return utils_1.run('sudo', ['cat', filepath]);\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent.toString().trim());\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }, {\n    key: \"writeProtectedFile\",\n    value: function writeProtectedFile(filepath, contents) {\n      return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                shared_1.assertNotTouchingFiles(filepath, 'write');\n\n                if (!fs_1.existsSync(filepath)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return utils_1.run('sudo', ['rm', filepath]);\n\n              case 4:\n                fs_1.writeFileSync(filepath, contents);\n                _context4.next = 7;\n                return utils_1.run('sudo', ['chown', '0', filepath]);\n\n              case 7:\n                _context4.next = 9;\n                return utils_1.run('sudo', ['chmod', '600', filepath]);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }, {\n    key: \"isFirefoxInstalled\",\n    value: function isFirefoxInstalled() {\n      return fs_1.existsSync(this.FIREFOX_BIN_PATH);\n    }\n  }, {\n    key: \"isChromeInstalled\",\n    value: function isChromeInstalled() {\n      return fs_1.existsSync(this.CHROME_BIN_PATH);\n    }\n  }]);\n\n  return LinuxPlatform;\n}();\n\nexports.default = LinuxPlatform;","map":{"version":3,"sources":["platforms/linux.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { existsSync as exists, readFileSync as read, writeFileSync as writeFile } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from './shared';\nimport { run, sudoAppend } from '../utils';\nimport { Options } from '../index';\nimport UI from '../user-interface';\nimport { Platform } from '.';\n\nconst debug = createDebug('devcert:platforms:linux');\n\nexport default class LinuxPlatform implements Platform {\n\n  private FIREFOX_NSS_DIR = path.join(process.env.HOME, '.mozilla/firefox/*');\n  private CHROME_NSS_DIR = path.join(process.env.HOME, '.pki/nssdb');\n  private FIREFOX_BIN_PATH = '/usr/bin/firefox';\n  private CHROME_BIN_PATH = '/usr/bin/google-chrome';\n\n  private HOST_FILE_PATH = '/etc/hosts';\n\n  /**\n   * Linux is surprisingly difficult. There seems to be multiple system-wide\n   * repositories for certs, so we copy ours to each. However, Firefox does it's\n   * usual separate trust store. Plus Chrome relies on the NSS tooling (like\n   * Firefox), but uses the user's NSS database, unlike Firefox (which uses a\n   * separate Mozilla one). And since Chrome doesn't prompt the user with a GUI\n   * flow when opening certs, if we can't use certutil to install our certificate\n   * into the user's NSS database, we're out of luck.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n\n    debug('Adding devcert root CA to Linux system-wide trust stores');\n    // run(`sudo cp ${ certificatePath } /etc/ssl/certs/devcert.crt`);\n    run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n    // run(`sudo bash -c \"cat ${ certificatePath } >> /etc/ssl/certs/ca-certificates.crt\"`);\n    run('sudo', ['update-ca-certificates']);\n\n    if (this.isFirefoxInstalled()) {\n      // Firefox\n      debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n      if (!commandExists('certutil')) {\n        if (options.skipCertutilInstall) {\n          debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n          openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n        } else {\n          debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n          run('sudo',  ['apt', 'install', 'libnss3-tools']);\n          debug('Installing certificate into Firefox trust stores using NSS tooling');\n          await closeFirefox();\n          await addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    } else {\n      debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n    }\n\n    if (this.isChromeInstalled()) {\n      debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n      if (!commandExists('certutil')) {\n        UI.warnChromeOnLinuxWithoutCertutil();\n      } else {\n        await closeFirefox();\n        await addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    } else {\n      debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    try {\n      run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n      run('sudo', ['update-ca-certificates']);\n    } catch (e) {\n      debug(`failed to remove ${ certificatePath } from /usr/local/share/ca-certificates, continuing. ${ e.toString() }`);\n    }\n    if (commandExists('certutil')) {\n      if (this.isFirefoxInstalled()) {\n        removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n      }\n      if (this.isChromeInstalled()) {\n        removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    const trimDomain = domain.trim().replace(/[\\s;]/g,'')\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(trimDomain)) {\n      sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n    }\n  }\n\n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    run('sudo', ['rm', '-rf', filepath]);\n  }\n\n  async readProtectedFile(filepath: string) {\n    assertNotTouchingFiles(filepath, 'read');\n    return (await run('sudo', ['cat', filepath])).toString().trim();\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (exists(filepath)) {\n      await run('sudo', ['rm', filepath]);\n    }\n    writeFile(filepath, contents);\n    await run('sudo', ['chown', '0', filepath]);\n    await run('sudo', ['chmod', '600', filepath]);\n  }\n\n  private isFirefoxInstalled() {\n    return exists(this.FIREFOX_BIN_PATH);\n  }\n\n  private isChromeInstalled() {\n    return exists(this.CHROME_BIN_PATH);\n  }\n\n}"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}