{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _excluded = [\"providers\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withIosBaseMods = withIosBaseMods;\nexports.getIosModFileProviders = getIosModFileProviders;\n\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n\n  _plist = function _plist() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _ios() {\n  var data = require(\"../ios\");\n\n  _ios = function _ios() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getInfoPlistPath() {\n  var data = require(\"../ios/utils/getInfoPlistPath\");\n\n  _getInfoPlistPath = function _getInfoPlistPath() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n\n  _modules = function _modules() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n\n  _sortObject = function _sortObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _fs$promises = _fs().promises,\n    readFile = _fs$promises.readFile,\n    writeFile = _fs$promises.writeFile;\n\nfunction getEntitlementsPlistTemplate() {\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true\n        }\n      }\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault'\n  };\n}\n\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function read() {\n      return function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {});\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write() {\n      return function _callee2() {\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  appDelegate: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref) {\n      var projectRoot = _ref.modRequest.projectRoot;\n      return _ios().Paths.getAppDelegateFilePath(projectRoot);\n    },\n    read: function read(filePath) {\n      return function _callee3() {\n        return _regeneratorRuntime.async(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", _ios().Paths.getFileInfo(filePath));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref2) {\n      return function _callee4() {\n        var contents;\n        return _regeneratorRuntime.async(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                contents = _ref2.modResults.contents;\n                _context4.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, contents));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  expoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var _ref3$modRequest = _ref3.modRequest,\n          platformProjectRoot = _ref3$modRequest.platformProjectRoot,\n          projectName = _ref3$modRequest.projectName;\n\n      var supportingDirectory = _path().default.join(platformProjectRoot, projectName, 'Supporting');\n\n      return _path().default.resolve(supportingDirectory, 'Expo.plist');\n    },\n    read: function read(filePath, _ref4) {\n      return function _callee5() {\n        var introspect;\n        return _regeneratorRuntime.async(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                introspect = _ref4.modRequest.introspect;\n                _context5.prev = 1;\n                _context5.t0 = _plist().default;\n                _context5.next = 5;\n                return _regeneratorRuntime.awrap(readFile(filePath, 'utf8'));\n\n              case 5:\n                _context5.t1 = _context5.sent;\n                return _context5.abrupt(\"return\", _context5.t0.parse.call(_context5.t0, _context5.t1));\n\n              case 9:\n                _context5.prev = 9;\n                _context5.t2 = _context5[\"catch\"](1);\n\n                if (!introspect) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {});\n\n              case 13:\n                throw _context5.t2;\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, [[1, 9]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref5) {\n      return function _callee6() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                modResults = _ref5.modResults, introspect = _ref5.modRequest.introspect;\n\n                if (!introspect) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                _context6.next = 5;\n                return _regeneratorRuntime.awrap(writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(modResults))));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  xcodeproj: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref6) {\n      var projectRoot = _ref6.modRequest.projectRoot;\n      return _ios().Paths.getPBXProjectPath(projectRoot);\n    },\n    read: function read(filePath) {\n      return function _callee7() {\n        var project;\n        return _regeneratorRuntime.async(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                project = _xcode().default.project(filePath);\n                project.parseSync();\n                return _context7.abrupt(\"return\", project);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    },\n    write: function write(filePath, _ref7) {\n      return function _callee8() {\n        var modResults;\n        return _regeneratorRuntime.async(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                modResults = _ref7.modResults;\n                _context8.next = 3;\n                return _regeneratorRuntime.awrap(writeFile(filePath, modResults.writeSync()));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  infoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(config) {\n      return function _callee9() {\n        var project, infoPlistBuildProperty, infoPlistPath;\n        return _regeneratorRuntime.async(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                project = null;\n\n                try {\n                  project = (0, _Xcodeproj().getPbxproj)(config.modRequest.projectRoot);\n                } catch (_unused) {}\n\n                if (!project) {\n                  _context9.next = 12;\n                  break;\n                }\n\n                infoPlistBuildProperty = (0, _getInfoPlistPath().getInfoPlistPathFromPbxproj)(project);\n\n                if (!infoPlistBuildProperty) {\n                  _context9.next = 11;\n                  break;\n                }\n\n                infoPlistPath = _path().default.join(config.modRequest.platformProjectRoot, infoPlistBuildProperty);\n\n                if (!(0, _modules().fileExists)(infoPlistPath)) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", infoPlistPath);\n\n              case 8:\n                (0, _warnings().addWarningIOS)('mods.ios.infoPlist', \"Info.plist file linked to Xcode project does not exist: \" + infoPlistPath);\n                _context9.next = 12;\n                break;\n\n              case 11:\n                (0, _warnings().addWarningIOS)('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n\n              case 12:\n                _context9.prev = 12;\n                _context9.next = 15;\n                return _regeneratorRuntime.awrap(_ios().Paths.getInfoPlistPath(config.modRequest.projectRoot));\n\n              case 15:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 18:\n                _context9.prev = 18;\n                _context9.t0 = _context9[\"catch\"](12);\n\n                if (!config.modRequest.introspect) {\n                  _context9.next = 22;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", '');\n\n              case 22:\n                throw _context9.t0;\n\n              case 23:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, null, null, [[12, 18]], Promise);\n      }();\n    },\n    read: function read(filePath, config) {\n      return function _callee10() {\n        var modResults, contents;\n        return _regeneratorRuntime.async(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!config.ios) config.ios = {};\n                if (!config.ios.infoPlist) config.ios.infoPlist = {};\n                _context10.prev = 2;\n                _context10.next = 5;\n                return _regeneratorRuntime.awrap(readFile(filePath, 'utf8'));\n\n              case 5:\n                contents = _context10.sent;\n                (0, _assert().default)(contents, 'Info.plist is empty');\n                modResults = _plist().default.parse(contents);\n                _context10.next = 15;\n                break;\n\n              case 10:\n                _context10.prev = 10;\n                _context10.t0 = _context10[\"catch\"](2);\n\n                if (config.modRequest.introspect) {\n                  _context10.next = 14;\n                  break;\n                }\n\n                throw _context10.t0;\n\n              case 14:\n                modResults = getInfoPlistTemplate();\n\n              case 15:\n                config.ios.infoPlist = _objectSpread(_objectSpread({}, modResults || {}), config.ios.infoPlist);\n                return _context10.abrupt(\"return\", config.ios.infoPlist);\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, null, null, [[2, 10]], Promise);\n      }();\n    },\n    write: function write(filePath, config) {\n      return function _callee11() {\n        return _regeneratorRuntime.async(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!config.ios) {\n                  config.ios = {};\n                }\n\n                config.ios.infoPlist = config.modResults;\n\n                if (!config.modRequest.introspect) {\n                  _context11.next = 4;\n                  break;\n                }\n\n                return _context11.abrupt(\"return\");\n\n              case 4:\n                _context11.next = 6;\n                return _regeneratorRuntime.awrap(writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults))));\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  entitlements: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(config) {\n      return function _callee12() {\n        return _regeneratorRuntime.async(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.prev = 0;\n                _context12.next = 3;\n                return _regeneratorRuntime.awrap(_ios().Entitlements.getEntitlementsPath(config.modRequest.projectRoot));\n\n              case 3:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 6:\n                _context12.prev = 6;\n                _context12.t0 = _context12[\"catch\"](0);\n\n                if (!config.modRequest.introspect) {\n                  _context12.next = 10;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", '');\n\n              case 10:\n                throw _context12.t0;\n\n              case 11:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, null, null, [[0, 6]], Promise);\n      }();\n    },\n    read: function read(filePath, config) {\n      return function _callee13() {\n        var modResults, contents;\n        return _regeneratorRuntime.async(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return _regeneratorRuntime.awrap(readFile(filePath, 'utf8'));\n\n              case 3:\n                contents = _context13.sent;\n                (0, _assert().default)(contents, 'Entitlements plist is empty');\n                modResults = _plist().default.parse(contents);\n                _context13.next = 13;\n                break;\n\n              case 8:\n                _context13.prev = 8;\n                _context13.t0 = _context13[\"catch\"](0);\n\n                if (config.modRequest.introspect) {\n                  _context13.next = 12;\n                  break;\n                }\n\n                throw _context13.t0;\n\n              case 12:\n                modResults = getEntitlementsPlistTemplate();\n\n              case 13:\n                if (!config.ios) config.ios = {};\n                if (!config.ios.entitlements) config.ios.entitlements = {};\n                config.ios.entitlements = _objectSpread(_objectSpread({}, modResults || {}), config.ios.entitlements);\n                return _context13.abrupt(\"return\", config.ios.entitlements);\n\n              case 17:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, null, null, [[0, 8]], Promise);\n      }();\n    },\n    write: function write(filePath, config) {\n      return function _callee14() {\n        return _regeneratorRuntime.async(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (!config.ios) {\n                  config.ios = {};\n                }\n\n                config.ios.entitlements = config.modResults;\n\n                if (!config.modRequest.introspect) {\n                  _context14.next = 4;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\");\n\n              case 4:\n                _context14.next = 6;\n                return _regeneratorRuntime.awrap(writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults))));\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  }),\n  podfileProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref8) {\n      var platformProjectRoot = _ref8.modRequest.platformProjectRoot;\n      return _path().default.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    read: function read(filePath) {\n      return function _callee15() {\n        var results;\n        return _regeneratorRuntime.async(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                results = {};\n                _context15.prev = 1;\n                _context15.next = 4;\n                return _regeneratorRuntime.awrap(_jsonFile().default.readAsync(filePath));\n\n              case 4:\n                results = _context15.sent;\n                _context15.next = 9;\n                break;\n\n              case 7:\n                _context15.prev = 7;\n                _context15.t0 = _context15[\"catch\"](1);\n\n              case 9:\n                return _context15.abrupt(\"return\", results);\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, null, null, [[1, 7]], Promise);\n      }();\n    },\n    write: function write(filePath, _ref9) {\n      return function _callee16() {\n        var modResults, introspect;\n        return _regeneratorRuntime.async(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                modResults = _ref9.modResults, introspect = _ref9.modRequest.introspect;\n\n                if (!introspect) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\");\n\n              case 3:\n                _context16.next = 5;\n                return _regeneratorRuntime.awrap(_jsonFile().default.writeAsync(filePath, modResults));\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }();\n    }\n  })\n};\n\nfunction withIosBaseMods(config) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var providers = _ref10.providers,\n      props = _objectWithoutProperties(_ref10, _excluded);\n\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'ios',\n    providers: providers !== null && providers !== void 0 ? providers : getIosModFileProviders()\n  }));\n}\n\nfunction getIosModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"sources":["../../src/plugins/withIosBaseMods.ts"],"names":["writeFile","promises","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","defaultProviders","dangerous","getFilePath","appDelegate","modRequest","projectRoot","Paths","modResults","contents","expoPlist","isIntrospective","projectName","supportingDirectory","path","introspect","plist","readFile","xcodeproj","project","xcode","infoPlist","config","infoPlistBuildProperty","infoPlistPath","getInfoPlistTemplate","entitlements","Entitlements","getEntitlementsPlistTemplate","podfileProperties","platformProjectRoot","results","JsonFile","props","platform","providers","getIosModFileProviders"],"mappings":"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","sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        // Fallback on glob...\n        return await Entitlements.getEntitlementsPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Entitlements plist is empty');\n        modResults = plist.parse(contents);\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, string>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, string> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch (e) {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"]},"metadata":{},"sourceType":"script"}