{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _taggedTemplateLiteralLoose = require(\"@babel/runtime/helpers/taggedTemplateLiteralLoose\");\n\nvar _excluded = [\"reporter\"],\n    _excluded2 = [\"reporter\", \"target\"];\n\nvar _templateObject;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadAsync = exports.getDefaultConfig = exports.INTERNAL_CALLSITES_REGEX = exports.EXPO_DEBUG = void 0;\n\nvar config_1 = require(\"@expo/config\");\n\nvar paths_1 = require(\"@expo/config/paths\");\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar getenv_1 = require(\"getenv\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar getModulesPaths_1 = require(\"./getModulesPaths\");\n\nvar getWatchFolders_1 = require(\"./getWatchFolders\");\n\nvar importMetroFromProject_1 = require(\"./importMetroFromProject\");\n\nexports.EXPO_DEBUG = getenv_1.boolish('EXPO_DEBUG', false);\nvar EXPO_USE_EXOTIC = getenv_1.boolish('EXPO_USE_EXOTIC', false);\nexports.INTERNAL_CALLSITES_REGEX = new RegExp(['/Libraries/Renderer/implementations/.+\\\\.js$', '/Libraries/BatchedBridge/MessageQueue\\\\.js$', '/Libraries/YellowBox/.+\\\\.js$', '/Libraries/LogBox/.+\\\\.js$', '/Libraries/Core/Timers/.+\\\\.js$', 'node_modules/react-devtools-core/.+\\\\.js$', 'node_modules/react-refresh/.+\\\\.js$', 'node_modules/scheduler/.+\\\\.js$', '/metro/.*/polyfills/require.js$', '/metro/.*/lib/bundle-modules/.+\\\\.js$', '/metro/.*/lib/bundle-modules/.+\\\\.js$', 'node_modules/react-native/Libraries/Utilities/HMRClient.js$', 'node_modules/eventemitter3/index.js', 'node_modules/event-target-shim/dist/.+\\\\.js$', '/expo/build/environment/react-native-logs.fx.js$', '/src/environment/react-native-logs.fx.ts$', '/expo/build/logs/RemoteConsole.js$', 'node_modules/invariant/.+\\\\.js$', 'node_modules/regenerator-runtime/.+\\\\.js$', 'node_modules/promise/setimmediate/.+\\\\.js$', 'node_modules/@babel/runtime/.+\\\\.js$', \"\\\\[native code\\\\]\"].join('|'));\n\nfunction readIsLegacyImportsEnabled(projectRoot) {\n  var config = config_1.getConfig(projectRoot, {\n    skipSDKVersionRequirement: true\n  });\n  return config_1.isLegacyImportsEnabled(config.exp);\n}\n\nfunction getProjectBabelConfigFile(projectRoot) {\n  return resolve_from_1.default.silent(projectRoot, './babel.config.js') || resolve_from_1.default.silent(projectRoot, './.babelrc') || resolve_from_1.default.silent(projectRoot, './.babelrc.js');\n}\n\nfunction getAssetPlugins(projectRoot) {\n  var assetPlugins = [];\n  var hashAssetFilesPath;\n\n  try {\n    hashAssetFilesPath = resolve_from_1.default(projectRoot, 'expo-asset/tools/hashAssetFiles');\n  } catch (_unused) {}\n\n  if (hashAssetFilesPath) {\n    assetPlugins.push(hashAssetFilesPath);\n  }\n\n  return assetPlugins;\n}\n\nvar hasWarnedAboutExotic = false;\n\nfunction getDefaultConfig(projectRoot) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isExotic = options.mode === 'exotic' || EXPO_USE_EXOTIC;\n\n  if (isExotic && !hasWarnedAboutExotic) {\n    hasWarnedAboutExotic = true;\n    console.log(chalk_1.default.gray(\"\\u203A Unstable feature \" + chalk_1.default.bold(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"EXPO_USE_EXOTIC\"]))) + \" is enabled. Bundling may not work as expected, and is subject to breaking changes.\"));\n  }\n\n  var MetroConfig = importMetroFromProject_1.importMetroConfigFromProject(projectRoot);\n  var reactNativePath = path_1.default.dirname(resolve_from_1.default(projectRoot, 'react-native/package.json'));\n\n  try {\n    var babelPresetFbjsPath = resolve_from_1.default(projectRoot, 'babel-preset-fbjs/package.json');\n    process.env.EXPO_METRO_CACHE_KEY_VERSION = String(require(babelPresetFbjsPath).version);\n  } catch (_unused2) {}\n\n  var isLegacy = readIsLegacyImportsEnabled(projectRoot);\n\n  if (options.target) {\n    if (!isLegacy) {\n      console.warn(chalk_1.default.yellow(\"The target option is deprecated. Learn more: http://expo.fyi/expo-extension-migration\"));\n      delete options.target;\n    }\n  } else if (process.env.EXPO_TARGET) {\n    console.error('EXPO_TARGET is deprecated. Learn more: http://expo.fyi/expo-extension-migration');\n\n    if (isLegacy) {\n      options.target = process.env.EXPO_TARGET;\n    }\n  } else if (isLegacy) {\n    options.target = config_1.getDefaultTarget(projectRoot);\n  }\n\n  if (!options.target) {\n    options.target = 'bare';\n  }\n\n  var target = options.target;\n\n  if (!(target === 'managed' || target === 'bare')) {\n    throw new Error(\"Invalid target: '\" + target + \"'. Debug info: \\n\" + JSON.stringify({\n      'options.target': options.target,\n      default: config_1.getDefaultTarget(projectRoot)\n    }, null, 2));\n  }\n\n  var sourceExtsConfig = {\n    isTS: true,\n    isReact: true,\n    isModern: false\n  };\n  var sourceExts = target === 'bare' ? paths_1.getBareExtensions([], sourceExtsConfig) : paths_1.getManagedExtensions([], sourceExtsConfig);\n\n  if (isExotic) {\n    sourceExts.push('cjs');\n  }\n\n  var babelConfigPath = getProjectBabelConfigFile(projectRoot);\n  var isCustomBabelConfigDefined = !!babelConfigPath;\n  var resolverMainFields = [];\n\n  if (!isExotic) {\n    resolverMainFields.push('react-native');\n  }\n\n  resolverMainFields.push('browser', 'main');\n  var watchFolders = getWatchFolders_1.getWatchFolders(projectRoot);\n  var nodeModulesPaths = getModulesPaths_1.getModulesPaths(projectRoot);\n\n  if (exports.EXPO_DEBUG) {\n    console.log();\n    console.log(\"Expo Metro config:\");\n\n    try {\n      console.log(\"- Version: \" + require(\"../package.json\").version);\n    } catch (_unused3) {}\n\n    console.log(\"- Bundler target: \" + target);\n    console.log(\"- Legacy: \" + isLegacy);\n    console.log(\"- Extensions: \" + sourceExts.join(', '));\n    console.log(\"- React Native: \" + reactNativePath);\n    console.log(\"- Babel config: \" + (babelConfigPath || 'babel-preset-expo (default)'));\n    console.log(\"- Resolver Fields: \" + resolverMainFields.join(', '));\n    console.log(\"- Watch Folders: \" + watchFolders.join(', '));\n    console.log(\"- Node Module Paths: \" + nodeModulesPaths.join(', '));\n    console.log(\"- Exotic: \" + isExotic);\n    console.log();\n  }\n\n  var _MetroConfig$getDefau = MetroConfig.getDefaultConfig.getDefaultValues(projectRoot),\n      reporter = _MetroConfig$getDefau.reporter,\n      metroDefaultValues = _objectWithoutProperties(_MetroConfig$getDefau, _excluded);\n\n  return MetroConfig.mergeConfig(metroDefaultValues, {\n    watchFolders: watchFolders,\n    resolver: {\n      resolverMainFields: resolverMainFields,\n      platforms: ['ios', 'android', 'native'],\n      sourceExts: sourceExts,\n      nodeModulesPaths: nodeModulesPaths\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: function getModulesRunBeforeMainModule() {\n        return [require.resolve(path_1.default.join(reactNativePath, 'Libraries/Core/InitializeCore'))];\n      },\n      getPolyfills: function getPolyfills() {\n        return require(path_1.default.join(reactNativePath, 'rn-get-polyfills'))();\n      }\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081\n    },\n    symbolicator: {\n      customizeFrame: function customizeFrame(frame) {\n        var _a;\n\n        var collapse = Boolean(frame.file && exports.INTERNAL_CALLSITES_REGEX.test(frame.file));\n\n        if (!collapse) {\n          if (frame.column === 3 && frame.methodName === 'global code' && ((_a = frame.file) === null || _a === void 0 ? void 0 : _a.match(/^https?:\\/\\//g))) {\n            collapse = true;\n          }\n        }\n\n        return _objectSpread(_objectSpread({}, frame || {}), {}, {\n          collapse: collapse\n        });\n      }\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: isExotic ? require.resolve(\"./transformer/metro-expo-exotic-babel-transformer\") : isCustomBabelConfigDefined ? resolve_from_1.default.silent(projectRoot, 'metro-react-native-babel-transformer') : require.resolve(\"./transformer/metro-expo-babel-transformer\"),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      assetPlugins: getAssetPlugins(projectRoot)\n    }\n  });\n}\n\nexports.getDefaultConfig = getDefaultConfig;\n\nfunction loadAsync(projectRoot) {\n  var _ref,\n      reporter,\n      target,\n      metroOptions,\n      defaultConfig,\n      MetroConfig,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function loadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          reporter = _ref.reporter, target = _ref.target, metroOptions = _objectWithoutProperties(_ref, _excluded2);\n          defaultConfig = getDefaultConfig(projectRoot, {\n            target: target\n          });\n\n          if (reporter) {\n            defaultConfig = _objectSpread(_objectSpread({}, defaultConfig), {}, {\n              reporter: reporter\n            });\n          }\n\n          MetroConfig = importMetroFromProject_1.importMetroConfigFromProject(projectRoot);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(MetroConfig.loadConfig(_objectSpread({\n            cwd: projectRoot,\n            projectRoot: projectRoot\n          }, metroOptions), defaultConfig));\n\n        case 7:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.loadAsync = loadAsync;","map":{"version":3,"sources":["../src/ExpoMetroConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\n\nimport { getConfig, getDefaultTarget, isLegacyImportsEnabled, ProjectTarget } from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport { boolish } from 'getenv';\nimport { Reporter } from 'metro';\nimport type MetroConfig from 'metro-config';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { getModulesPaths } from './getModulesPaths';\nimport { getWatchFolders } from './getWatchFolders';\nimport { importMetroConfigFromProject } from './importMetroFromProject';\n\nexport const EXPO_DEBUG = boolish('EXPO_DEBUG', false);\nconst EXPO_USE_EXOTIC = boolish('EXPO_USE_EXOTIC', false);\n\n// Import only the types here, the values will be imported from the project, at runtime.\nexport const INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    'node_modules/react-devtools-core/.+\\\\.js$',\n    'node_modules/react-refresh/.+\\\\.js$',\n    'node_modules/scheduler/.+\\\\.js$',\n    // Metro replaces `require()` with a different method,\n    // we want to omit this method from the stack trace.\n    // This is akin to most React tooling.\n    '/metro/.*/polyfills/require.js$',\n    // Hide frames related to a fast refresh.\n    '/metro/.*/lib/bundle-modules/.+\\\\.js$',\n    '/metro/.*/lib/bundle-modules/.+\\\\.js$',\n    'node_modules/react-native/Libraries/Utilities/HMRClient.js$',\n    'node_modules/eventemitter3/index.js',\n    'node_modules/event-target-shim/dist/.+\\\\.js$',\n    // Ignore the log forwarder used in the Expo Go app\n    '/expo/build/environment/react-native-logs.fx.js$',\n    '/src/environment/react-native-logs.fx.ts$',\n    '/expo/build/logs/RemoteConsole.js$',\n    // Improve errors thrown by invariant (ex: `Invariant Violation: \"main\" has not been registered`).\n    'node_modules/invariant/.+\\\\.js$',\n    // Remove babel runtime additions\n    'node_modules/regenerator-runtime/.+\\\\.js$',\n    // Remove react native setImmediate ponyfill\n    'node_modules/promise/setimmediate/.+\\\\.js$',\n    // Babel helpers that implement language features\n    'node_modules/@babel/runtime/.+\\\\.js$',\n    // Block native code invocations\n    `\\\\[native code\\\\]`,\n  ].join('|')\n);\n\nexport interface DefaultConfigOptions {\n  target?: ProjectTarget;\n  mode?: 'exotic';\n}\n\nfunction readIsLegacyImportsEnabled(projectRoot: string): boolean {\n  const config = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return isLegacyImportsEnabled(config.exp);\n}\n\nfunction getProjectBabelConfigFile(projectRoot: string): string | undefined {\n  return (\n    resolveFrom.silent(projectRoot, './babel.config.js') ||\n    resolveFrom.silent(projectRoot, './.babelrc') ||\n    resolveFrom.silent(projectRoot, './.babelrc.js')\n  );\n}\n\nfunction getAssetPlugins(projectRoot: string): string[] {\n  const assetPlugins: string[] = [];\n\n  let hashAssetFilesPath;\n  try {\n    hashAssetFilesPath = resolveFrom(projectRoot, 'expo-asset/tools/hashAssetFiles');\n  } catch {\n    // TODO: we should warn/throw an error if the user has expo-updates installed but does not\n    // have hashAssetFiles available, or if the user is in managed workflow and does not have\n    // hashAssetFiles available. but in a bare app w/o expo-updates, just using dev-client,\n    // it is not needed\n  }\n\n  if (hashAssetFilesPath) {\n    assetPlugins.push(hashAssetFilesPath);\n  }\n\n  return assetPlugins;\n}\n\nlet hasWarnedAboutExotic = false;\n\nexport function getDefaultConfig(\n  projectRoot: string,\n  options: DefaultConfigOptions = {}\n): MetroConfig.InputConfigT {\n  const isExotic = options.mode === 'exotic' || EXPO_USE_EXOTIC;\n\n  if (isExotic && !hasWarnedAboutExotic) {\n    hasWarnedAboutExotic = true;\n    console.log(\n      chalk.gray(\n        `\\u203A Unstable feature ${chalk.bold`EXPO_USE_EXOTIC`} is enabled. Bundling may not work as expected, and is subject to breaking changes.`\n      )\n    );\n  }\n  const MetroConfig = importMetroConfigFromProject(projectRoot);\n\n  const reactNativePath = path.dirname(resolveFrom(projectRoot, 'react-native/package.json'));\n\n  try {\n    // Set the `EXPO_METRO_CACHE_KEY_VERSION` variable for use in the custom babel transformer.\n    // This hack is used because there doesn't appear to be anyway to resolve\n    // `babel-preset-fbjs` relative to the project root later (in `metro-expo-babel-transformer`).\n    const babelPresetFbjsPath = resolveFrom(projectRoot, 'babel-preset-fbjs/package.json');\n    process.env.EXPO_METRO_CACHE_KEY_VERSION = String(require(babelPresetFbjsPath).version);\n  } catch {\n    // noop -- falls back to a hardcoded value.\n  }\n\n  const isLegacy = readIsLegacyImportsEnabled(projectRoot);\n  // Deprecated -- SDK 41 --\n  if (options.target) {\n    if (!isLegacy) {\n      console.warn(\n        chalk.yellow(\n          `The target option is deprecated. Learn more: http://expo.fyi/expo-extension-migration`\n        )\n      );\n      delete options.target;\n    }\n  } else if (process.env.EXPO_TARGET) {\n    console.error(\n      'EXPO_TARGET is deprecated. Learn more: http://expo.fyi/expo-extension-migration'\n    );\n    if (isLegacy) {\n      // EXPO_TARGET is used by @expo/metro-config to determine the target when getDefaultConfig is\n      // called from metro.config.js.\n      // @ts-ignore\n      options.target = process.env.EXPO_TARGET;\n    }\n  } else if (isLegacy) {\n    // Fall back to guessing based on the project structure in legacy mode.\n    options.target = getDefaultTarget(projectRoot);\n  }\n\n  if (!options.target) {\n    // Default to bare -- no .expo extension.\n    options.target = 'bare';\n  }\n  // End deprecated -- SDK 41 --\n\n  const { target } = options;\n  if (!(target === 'managed' || target === 'bare')) {\n    throw new Error(\n      `Invalid target: '${target}'. Debug info: \\n${JSON.stringify(\n        {\n          'options.target': options.target,\n          default: getDefaultTarget(projectRoot),\n        },\n        null,\n        2\n      )}`\n    );\n  }\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  if (isExotic) {\n    // Add support for cjs (without platform extensions).\n    sourceExts.push('cjs');\n  }\n\n  const babelConfigPath = getProjectBabelConfigFile(projectRoot);\n  const isCustomBabelConfigDefined = !!babelConfigPath;\n\n  const resolverMainFields: string[] = [];\n\n  // Disable `react-native` in exotic mode, since library authors\n  // use it to ship raw application code to the project.\n  if (!isExotic) {\n    resolverMainFields.push('react-native');\n  }\n  resolverMainFields.push('browser', 'main');\n\n  const watchFolders = getWatchFolders(projectRoot);\n  // TODO: nodeModulesPaths does not work with the new Node.js package.json exports API, this causes packages like uuid to fail. Disabling for now.\n  const nodeModulesPaths = getModulesPaths(projectRoot);\n  if (EXPO_DEBUG) {\n    console.log();\n    console.log(`Expo Metro config:`);\n    try {\n      console.log(`- Version: ${require('../package.json').version}`);\n    } catch {}\n    console.log(`- Bundler target: ${target}`);\n    console.log(`- Legacy: ${isLegacy}`);\n    console.log(`- Extensions: ${sourceExts.join(', ')}`);\n    console.log(`- React Native: ${reactNativePath}`);\n    console.log(`- Babel config: ${babelConfigPath || 'babel-preset-expo (default)'}`);\n    console.log(`- Resolver Fields: ${resolverMainFields.join(', ')}`);\n    console.log(`- Watch Folders: ${watchFolders.join(', ')}`);\n    console.log(`- Node Module Paths: ${nodeModulesPaths.join(', ')}`);\n    console.log(`- Exotic: ${isExotic}`);\n    console.log();\n  }\n  const {\n    // Remove the default reporter which metro always resolves to be the react-native-community/cli reporter.\n    // This prints a giant React logo which is less accessible to users on smaller terminals.\n    reporter,\n    ...metroDefaultValues\n  } = MetroConfig.getDefaultConfig.getDefaultValues(projectRoot);\n\n  // Merge in the default config from Metro here, even though loadConfig uses it as defaults.\n  // This is a convenience for getDefaultConfig use in metro.config.js, e.g. to modify assetExts.\n  return MetroConfig.mergeConfig(metroDefaultValues, {\n    watchFolders,\n    resolver: {\n      resolverMainFields,\n      platforms: ['ios', 'android', 'native'],\n      sourceExts,\n      nodeModulesPaths,\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(path.join(reactNativePath, 'Libraries/Core/InitializeCore')),\n        // TODO: Bacon: load Expo side-effects\n      ],\n      getPolyfills: () => require(path.join(reactNativePath, 'rn-get-polyfills'))(),\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081,\n    },\n    symbolicator: {\n      customizeFrame: frame => {\n        let collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n\n        if (!collapse) {\n          // This represents the first frame of the stacktrace.\n          // Often this looks like: `__r(0);`.\n          // The URL will also be unactionable in the app and therefore not very useful to the developer.\n          if (\n            frame.column === 3 &&\n            frame.methodName === 'global code' &&\n            frame.file?.match(/^https?:\\/\\//g)\n          ) {\n            collapse = true;\n          }\n        }\n\n        return { ...(frame || {}), collapse };\n      },\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: isExotic\n        ? require.resolve('./transformer/metro-expo-exotic-babel-transformer')\n        : isCustomBabelConfigDefined\n        ? // If the user defined a babel config file in their project,\n          // then use the default transformer.\n          // Try to use the project copy before falling back on the global version\n          resolveFrom.silent(projectRoot, 'metro-react-native-babel-transformer')\n        : // Otherwise, use a custom transformer that uses `babel-preset-expo` by default for projects.\n          require.resolve('./transformer/metro-expo-babel-transformer'),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      assetPlugins: getAssetPlugins(projectRoot),\n    },\n  });\n}\n\nexport interface LoadOptions {\n  config?: string;\n  maxWorkers?: number;\n  port?: number;\n  reporter?: Reporter;\n  resetCache?: boolean;\n  target?: ProjectTarget;\n}\n\nexport async function loadAsync(\n  projectRoot: string,\n  { reporter, target, ...metroOptions }: LoadOptions = {}\n): Promise<MetroConfig.ConfigT> {\n  let defaultConfig = getDefaultConfig(projectRoot, { target });\n  if (reporter) {\n    defaultConfig = { ...defaultConfig, reporter };\n  }\n  const MetroConfig = importMetroConfigFromProject(projectRoot);\n  return await MetroConfig.loadConfig(\n    { cwd: projectRoot, projectRoot, ...metroOptions },\n    defaultConfig\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}