{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectStringsXMLPathAsync = getProjectStringsXMLPathAsync;\nexports.setStringItem = setStringItem;\nexports.removeStringItem = removeStringItem;\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction getProjectStringsXMLPathAsync(projectRoot) {\n  var _ref,\n      kind,\n      _args = arguments;\n\n  return _regeneratorRuntime.async(function getProjectStringsXMLPathAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, kind = _ref.kind;\n          return _context.abrupt(\"return\", (0, _Paths().getResourceXMLPathAsync)(projectRoot, {\n            kind: kind,\n            name: 'strings'\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction setStringItem(itemToAdd, stringFileContentsJSON) {\n  var _stringFileContentsJS;\n\n  if (!(stringFileContentsJSON !== null && stringFileContentsJSON !== void 0 && (_stringFileContentsJS = stringFileContentsJSON.resources) !== null && _stringFileContentsJS !== void 0 && _stringFileContentsJS.string)) {\n    if (!stringFileContentsJSON.resources || typeof stringFileContentsJSON.resources === 'string') {\n      stringFileContentsJSON.resources = {};\n    }\n\n    stringFileContentsJSON.resources.string = itemToAdd;\n    return stringFileContentsJSON;\n  }\n\n  var _loop = function _loop(newItem) {\n    var stringNameExists = stringFileContentsJSON.resources.string.findIndex(function (e) {\n      return e.$.name === newItem.$.name;\n    });\n\n    if (stringNameExists > -1) {\n      stringFileContentsJSON.resources.string[stringNameExists] = newItem;\n    } else {\n      stringFileContentsJSON.resources.string = stringFileContentsJSON.resources.string.concat(newItem);\n    }\n  };\n\n  for (var _iterator = _createForOfIteratorHelperLoose(itemToAdd), _step; !(_step = _iterator()).done;) {\n    var newItem = _step.value;\n\n    _loop(newItem);\n  }\n\n  return stringFileContentsJSON;\n}\n\nfunction removeStringItem(named, stringFileContentsJSON) {\n  var _stringFileContentsJS2;\n\n  if (stringFileContentsJSON !== null && stringFileContentsJSON !== void 0 && (_stringFileContentsJS2 = stringFileContentsJSON.resources) !== null && _stringFileContentsJS2 !== void 0 && _stringFileContentsJS2.string) {\n    var stringNameExists = stringFileContentsJSON.resources.string.findIndex(function (e) {\n      return e.$.name === named;\n    });\n\n    if (stringNameExists > -1) {\n      stringFileContentsJSON.resources.string.splice(stringNameExists, 1);\n    }\n  }\n\n  return stringFileContentsJSON;\n}","map":{"version":3,"sources":["../../src/android/Strings.ts"],"names":["kind","name","stringFileContentsJSON","stringNameExists","e","newItem"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,WAAA;;AAAA,EAAA,MAAA,GAAA,kBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,SAAA,6BAAA,CAAA,WAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yEAAA,EAAA,EAEHA,IAFG,QAEHA,IAFG;AAAA,2CAIE,CAAA,GAAA,MAAA,GAAA,uBAAA,EAAA,WAAA,EAAqC;AAAEA,YAAAA,IAAF,EAAEA,IAAF;AAAQC,YAAAA,IAAI,EAAE;AAAd,WAArC,CAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAA,aAAA,CAAA,SAAA,EAAA,sBAAA,EAGQ;AAAA,MAAA,qBAAA;;AACb,MAAI,EAACC,sBAAD,KAAA,IAACA,IAAAA,sBAAD,KAAA,KAAA,CAACA,IAAD,CAAA,qBAAA,GAACA,sBAAsB,CAAvB,SAAA,MAAA,IAACA,IAAD,qBAAA,KAAA,KAAA,CAACA,IAAAA,qBAAAA,CAAL,MAAI,CAAJ,EAAgD;AAC9C,QAAI,CAACA,sBAAsB,CAAvB,SAAA,IAAqC,OAAOA,sBAAsB,CAA7B,SAAA,KAAzC,QAAA,EAA+F;AAE7FA,MAAAA,sBAAsB,CAAtBA,SAAAA,GAAAA,EAAAA;AACD;;AACDA,IAAAA,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,GAAAA,SAAAA;AACA,WAAA,sBAAA;AACD;;AARY,6BAUb,OAVa;AAWX,QAAMC,gBAAgB,GAAGD,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,CAAAA,SAAAA,CACtBE,UAAAA,CAAD;AAAA,aAAwBA,CAAC,CAADA,CAAAA,CAAAA,IAAAA,KAAaC,OAAO,CAAPA,CAAAA,CADvC,IACE;AAAA,KADuBH,CAAzB;;AAGA,QAAIC,gBAAgB,GAAG,CAAvB,CAAA,EAA2B;AAEzBD,MAAAA,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,IAAAA,OAAAA;AAFF,KAAA,MAGO;AACLA,MAAAA,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,GAA0CA,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAA1CA,OAA0CA,CAA1CA;AAGD;AArBU;;AAUb,uDAAA,SAAA,wCAAiC;AAAA,QAAjC,OAAiC;;AAAA,UAAjC,OAAiC;AAYhC;;AACD,SAAA,sBAAA;AACD;;AAEM,SAAA,gBAAA,CAAA,KAAA,EAAA,sBAAA,EAA2F;AAAA,MAAA,sBAAA;;AAChG,MAAIA,sBAAJ,KAAA,IAAIA,IAAAA,sBAAJ,KAAA,KAAA,CAAIA,IAAJ,CAAA,sBAAA,GAAIA,sBAAsB,CAA1B,SAAA,MAAA,IAAIA,IAAJ,sBAAA,KAAA,KAAA,CAAIA,IAAAA,sBAAAA,CAAJ,MAAA,EAA+C;AAC7C,QAAMC,gBAAgB,GAAGD,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,CAAAA,SAAAA,CACtBE,UAAAA,CAAD;AAAA,aAAwBA,CAAC,CAADA,CAAAA,CAAAA,IAAAA,KAD1B,KACE;AAAA,KADuBF,CAAzB;;AAGA,QAAIC,gBAAgB,GAAG,CAAvB,CAAA,EAA2B;AAEzBD,MAAAA,sBAAsB,CAAtBA,SAAAA,CAAAA,MAAAA,CAAAA,MAAAA,CAAAA,gBAAAA,EAAAA,CAAAA;AACD;AACF;;AACD,SAAA,sBAAA;AACD","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport { ResourceItemXML, ResourceKind, ResourceXML } from './Resources';\n\nexport async function getProjectStringsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n): Promise<string> {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'strings' });\n}\n\nexport function setStringItem(\n  itemToAdd: ResourceItemXML[],\n  stringFileContentsJSON: ResourceXML\n): ResourceXML {\n  if (!stringFileContentsJSON?.resources?.string) {\n    if (!stringFileContentsJSON.resources || typeof stringFileContentsJSON.resources === 'string') {\n      // file was empty and JSON is `{resources : ''}`\n      stringFileContentsJSON.resources = {};\n    }\n    stringFileContentsJSON.resources.string = itemToAdd;\n    return stringFileContentsJSON;\n  }\n\n  for (const newItem of itemToAdd) {\n    const stringNameExists = stringFileContentsJSON.resources.string.findIndex(\n      (e: ResourceItemXML) => e.$.name === newItem.$.name\n    );\n    if (stringNameExists > -1) {\n      // replace the previous item\n      stringFileContentsJSON.resources.string[stringNameExists] = newItem;\n    } else {\n      stringFileContentsJSON.resources.string = stringFileContentsJSON.resources.string.concat(\n        newItem\n      );\n    }\n  }\n  return stringFileContentsJSON;\n}\n\nexport function removeStringItem(named: string, stringFileContentsJSON: ResourceXML): ResourceXML {\n  if (stringFileContentsJSON?.resources?.string) {\n    const stringNameExists = stringFileContentsJSON.resources.string.findIndex(\n      (e: ResourceItemXML) => e.$.name === named\n    );\n    if (stringNameExists > -1) {\n      // replace the previous value\n      stringFileContentsJSON.resources.string.splice(stringNameExists, 1);\n    }\n  }\n  return stringFileContentsJSON;\n}\n"]},"metadata":{},"sourceType":"script"}