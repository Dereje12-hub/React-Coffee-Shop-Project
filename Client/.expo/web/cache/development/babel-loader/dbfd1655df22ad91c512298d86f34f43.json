{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withPlugins = void 0;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withStaticPlugin() {\n  var data = require(\"./withStaticPlugin\");\n\n  _withStaticPlugin = function _withStaticPlugin() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withPlugins = function withPlugins(config, plugins) {\n  (0, _assert().default)(Array.isArray(plugins), 'withPlugins expected a valid array of plugins or plugin module paths');\n  return plugins.reduce(function (prev, plugin) {\n    return (0, _withStaticPlugin().withStaticPlugin)(prev, {\n      plugin: plugin\n    });\n  }, config);\n};\n\nexports.withPlugins = withPlugins;","map":{"version":3,"sources":["../../src/plugins/withPlugins.ts"],"names":["withPlugins","Array","plugin"],"mappings":";;;;;;;AAAA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGA,SAAA,iBAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,sBAAA;;AAAA,EAAA,iBAAA,GAAA,6BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAQO,IAAMA,WAAmE,GAAG,SAAtEA,WAAsE,CAAA,MAAA,EAAA,OAAA,EAG9E;AACH,GAAA,GAAA,OAAA,GAAA,OAAA,EACEC,KAAK,CAALA,OAAAA,CADF,OACEA,CADF,EAAA,sEAAA;AAIA,SAAO,OAAO,CAAP,MAAA,CAAe,UAAA,IAAA,EAAA,MAAA;AAAA,WAAkB,CAAA,GAAA,iBAAA,GAAA,gBAAA,EAAA,IAAA,EAAuB;AAAEC,MAAAA,MAAAA,EAAAA;AAAF,KAAvB,CAAlB;AAAA,GAAf,EAAP,MAAO,CAAP;AARK,CAAA","sourcesContent":["import assert from 'assert';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { withStaticPlugin } from './withStaticPlugin';\n\n/**\n * Resolves a list of plugins.\n *\n * @param config exported config\n * @param plugins list of config config plugins to apply to the exported config\n */\nexport const withPlugins: ConfigPlugin<(StaticPlugin | ConfigPlugin | string)[]> = (\n  config,\n  plugins\n) => {\n  assert(\n    Array.isArray(plugins),\n    'withPlugins expected a valid array of plugins or plugin module paths'\n  );\n  return plugins.reduce((prev, plugin) => withStaticPlugin(prev, { plugin }), config);\n};\n"]},"metadata":{},"sourceType":"script"}