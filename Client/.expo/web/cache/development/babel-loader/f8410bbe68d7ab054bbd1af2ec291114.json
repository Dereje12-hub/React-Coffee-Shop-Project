{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _excluded = [\"operation\", \"width\"],\n    _excluded2 = [\"operation\"];\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findSharpInstanceAsync = exports.sharpAsync = exports.isAvailableAsync = exports.resizeBufferAsync = void 0;\n\nvar spawn_async_1 = __importDefault(require(\"@expo/spawn-async\"));\n\nvar getenv_1 = require(\"getenv\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar semver_1 = __importDefault(require(\"semver\"));\n\nvar SHARP_HELP_PATTERN = /\\n\\nSpecify --help for available options/g;\nvar SHARP_REQUIRED_VERSION = '^1.10.0';\n\nfunction resizeBufferAsync(buffer, sizes) {\n  var sharp, metadata, resizedBuffers;\n  return _regeneratorRuntime.async(function resizeBufferAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(findSharpInstanceAsync());\n\n        case 2:\n          sharp = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(sharp(buffer).metadata());\n\n        case 5:\n          metadata = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Promise.all(sizes.map(function (dimension) {\n            var density = dimension / Math.max(metadata.width, metadata.height) * metadata.density;\n            return sharp(buffer, {\n              density: isNaN(density) ? undefined : Math.ceil(density)\n            }).resize(dimension, dimension, {\n              fit: 'contain',\n              background: 'transparent'\n            }).toBuffer();\n          })));\n\n        case 8:\n          resizedBuffers = _context.sent;\n          return _context.abrupt(\"return\", resizedBuffers);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.resizeBufferAsync = resizeBufferAsync;\nvar isSharpDisabled = getenv_1.boolish('EXPO_IMAGE_UTILS_NO_SHARP', false);\n\nfunction isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!isSharpDisabled) {\n            _context2.next = 2;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", false);\n\n        case 2:\n          _context2.prev = 2;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(findSharpBinAsync());\n\n        case 5:\n          return _context2.abrupt(\"return\", !!_context2.sent);\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](2);\n          return _context2.abrupt(\"return\", false);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}\n\nexports.isAvailableAsync = isAvailableAsync;\n\nfunction sharpAsync(options) {\n  var commands,\n      bin,\n      _await$spawn_async_1$,\n      stdout,\n      outputFilePaths,\n      _args3 = arguments;\n\n  return _regeneratorRuntime.async(function sharpAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          commands = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : [];\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(findSharpBinAsync());\n\n        case 3:\n          bin = _context3.sent;\n          _context3.prev = 4;\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(spawn_async_1.default(bin, [].concat(_toConsumableArray(getOptions(options)), _toConsumableArray(getCommandOptions(commands)))));\n\n        case 7:\n          _await$spawn_async_1$ = _context3.sent;\n          stdout = _await$spawn_async_1$.stdout;\n          outputFilePaths = stdout.trim().split('\\n');\n          return _context3.abrupt(\"return\", outputFilePaths);\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](4);\n\n          if (!_context3.t0.stderr) {\n            _context3.next = 19;\n            break;\n          }\n\n          throw new Error('\\nProcessing images using sharp-cli failed: ' + _context3.t0.message + '\\nOutput: ' + _context3.t0.stderr.replace(SHARP_HELP_PATTERN, ''));\n\n        case 19:\n          throw _context3.t0;\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[4, 13]], Promise);\n}\n\nexports.sharpAsync = sharpAsync;\n\nfunction getOptions(options) {\n  var args = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(options); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n\n    if (value != null && value !== false) {\n      if (typeof value === 'boolean') {\n        args.push(\"--\" + key);\n      } else if (typeof value === 'number') {\n        args.push(\"--\" + key, value.toFixed());\n      } else {\n        args.push(\"--\" + key, value);\n      }\n    }\n  }\n\n  return args;\n}\n\nfunction getCommandOptions(commands) {\n  var args = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(commands), _step; !(_step = _iterator()).done;) {\n    var command = _step.value;\n\n    if (command.operation === 'resize') {\n      var operation = command.operation,\n          width = command.width,\n          namedOptions = _objectWithoutProperties(command, _excluded);\n\n      args.push.apply(args, [operation, width.toFixed()].concat(_toConsumableArray(getOptions(namedOptions))));\n    } else {\n      var _operation = command.operation,\n          _namedOptions = _objectWithoutProperties(command, _excluded2);\n\n      args.push.apply(args, [_operation].concat(_toConsumableArray(getOptions(_namedOptions))));\n    }\n\n    args.push('--');\n  }\n\n  return args;\n}\n\nvar _sharpBin = null;\nvar _sharpInstance = null;\n\nfunction findSharpBinAsync() {\n  var sharpCliPackage, libVipsVersion, installedCliVersion;\n  return _regeneratorRuntime.async(function findSharpBinAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!_sharpBin) {\n            _context4.next = 2;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", _sharpBin);\n\n        case 2:\n          _context4.prev = 2;\n          sharpCliPackage = require('sharp-cli/package.json');\n          libVipsVersion = require('sharp').versions.vips;\n\n          if (!(sharpCliPackage && semver_1.default.satisfies(sharpCliPackage.version, SHARP_REQUIRED_VERSION) && typeof sharpCliPackage.bin.sharp === 'string' && typeof libVipsVersion === 'string')) {\n            _context4.next = 8;\n            break;\n          }\n\n          _sharpBin = require.resolve(\"sharp-cli/\" + sharpCliPackage.bin.sharp);\n          return _context4.abrupt(\"return\", _sharpBin);\n\n        case 8:\n          _context4.next = 12;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](2);\n\n        case 12:\n          _context4.prev = 12;\n          _context4.next = 15;\n          return _regeneratorRuntime.awrap(spawn_async_1.default('sharp', ['--version']));\n\n        case 15:\n          installedCliVersion = _context4.sent.stdout.toString().trim();\n          _context4.next = 21;\n          break;\n\n        case 18:\n          _context4.prev = 18;\n          _context4.t1 = _context4[\"catch\"](12);\n          throw notFoundError(SHARP_REQUIRED_VERSION);\n\n        case 21:\n          if (!semver_1.default.satisfies(installedCliVersion, SHARP_REQUIRED_VERSION)) {\n            showVersionMismatchWarning(SHARP_REQUIRED_VERSION, installedCliVersion);\n          }\n\n          _sharpBin = 'sharp';\n          return _context4.abrupt(\"return\", _sharpBin);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[2, 10], [12, 18]], Promise);\n}\n\nfunction findSharpInstanceAsync() {\n  var sharp, sharpCliPath, yarnGlobalPath, sharpPath;\n  return _regeneratorRuntime.async(function findSharpInstanceAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (!isSharpDisabled) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new Error('Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`');\n\n        case 2:\n          if (!_sharpInstance) {\n            _context5.next = 4;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", _sharpInstance);\n\n        case 4:\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(findSharpBinAsync());\n\n        case 6:\n          _context5.prev = 6;\n          sharp = require('sharp');\n          _sharpInstance = sharp;\n          return _context5.abrupt(\"return\", sharp);\n\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](6);\n\n        case 14:\n          if (!(process.platform !== 'win32')) {\n            _context5.next = 25;\n            break;\n          }\n\n          _context5.prev = 15;\n          _context5.next = 18;\n          return _regeneratorRuntime.awrap(spawn_async_1.default('which', ['sharp']));\n\n        case 18:\n          sharpCliPath = _context5.sent.stdout.toString().trim();\n          _context5.next = 23;\n          break;\n\n        case 21:\n          _context5.prev = 21;\n          _context5.t1 = _context5[\"catch\"](15);\n\n        case 23:\n          _context5.next = 37;\n          break;\n\n        case 25:\n          yarnGlobalPath = '';\n          _context5.prev = 26;\n          _context5.t2 = path_1.default;\n          _context5.next = 30;\n          return _regeneratorRuntime.awrap(spawn_async_1.default('yarn', ['global', 'dir']));\n\n        case 30:\n          _context5.t3 = _context5.sent.stdout.toString().trim();\n          yarnGlobalPath = _context5.t2.join.call(_context5.t2, _context5.t3, 'node_modules');\n          _context5.next = 36;\n          break;\n\n        case 34:\n          _context5.prev = 34;\n          _context5.t4 = _context5[\"catch\"](26);\n\n        case 36:\n          try {\n            sharpCliPath = require.resolve('sharp-cli/package.json', {\n              paths: (require.resolve.paths('sharp-cli') || []).concat(yarnGlobalPath)\n            });\n          } catch (_unused5) {}\n\n        case 37:\n          sharpPath = resolve_from_1.default.silent(sharpCliPath || '', 'sharp');\n\n          if (sharpPath) {\n            try {\n              _sharpInstance = require(sharpPath);\n            } catch (_unused6) {}\n          }\n\n          if (_sharpInstance) {\n            _context5.next = 41;\n            break;\n          }\n\n          throw new Error(\"Failed to find the instance of sharp used by the global sharp-cli package.\");\n\n        case 41:\n          return _context5.abrupt(\"return\", _sharpInstance);\n\n        case 42:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[6, 12], [15, 21], [26, 34]], Promise);\n}\n\nexports.findSharpInstanceAsync = findSharpInstanceAsync;\n\nfunction notFoundError(requiredCliVersion) {\n  return new Error(\"This command requires version \" + requiredCliVersion + \" of `sharp-cli`. \\n\" + (\"You can install it using `npm install -g sharp-cli@\" + requiredCliVersion + \"`. \\n\") + '\\n' + 'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');\n}\n\nvar versionMismatchWarningShown = false;\n\nfunction showVersionMismatchWarning(requiredCliVersion, installedCliVersion) {\n  if (versionMismatchWarningShown) {\n    return;\n  }\n\n  console.warn(\"Warning: This command requires version \" + requiredCliVersion + \" of `sharp-cli`. \\n\" + (\"Currently installed version: \\\"\" + installedCliVersion + \"\\\" \\n\") + (\"Required version: \\\"\" + requiredCliVersion + \"\\\" \\n\") + (\"You can install it using `npm install -g sharp-cli@\" + requiredCliVersion + \"`. \\n\") + '\\n' + 'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');\n  versionMismatchWarningShown = true;\n}","map":{"version":3,"sources":["../src/sharp.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { Options, SharpCommandOptions, SharpGlobalOptions } from './sharp.types';\n\nconst SHARP_HELP_PATTERN = /\\n\\nSpecify --help for available options/g;\nconst SHARP_REQUIRED_VERSION = '^1.10.0';\n\nexport async function resizeBufferAsync(buffer: Buffer, sizes: number[]): Promise<Buffer[]> {\n  const sharp = await findSharpInstanceAsync();\n\n  const metadata = await sharp(buffer).metadata();\n  // Create buffer for each size\n  const resizedBuffers = await Promise.all(\n    sizes.map(dimension => {\n      const density = (dimension / Math.max(metadata.width, metadata.height)) * metadata.density;\n      return sharp(buffer, {\n        density: isNaN(density) ? undefined : Math.ceil(density),\n      })\n        .resize(dimension, dimension, { fit: 'contain', background: 'transparent' })\n        .toBuffer();\n    })\n  );\n\n  return resizedBuffers;\n}\n\nconst isSharpDisabled = boolish('EXPO_IMAGE_UTILS_NO_SHARP', false);\n\n/**\n * Returns `true` if a global sharp instance can be found.\n * This functionality can be overridden with `process.env.EXPO_IMAGE_UTILS_NO_SHARP=1`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (isSharpDisabled) {\n    return false;\n  }\n  try {\n    return !!(await findSharpBinAsync());\n  } catch {\n    return false;\n  }\n}\n\nexport async function sharpAsync(\n  options: SharpGlobalOptions,\n  commands: SharpCommandOptions[] = []\n): Promise<string[]> {\n  const bin = await findSharpBinAsync();\n  try {\n    const { stdout } = await spawnAsync(bin, [\n      ...getOptions(options),\n      ...getCommandOptions(commands),\n    ]);\n    const outputFilePaths = stdout.trim().split('\\n');\n    return outputFilePaths;\n  } catch (error) {\n    if (error.stderr) {\n      throw new Error(\n        '\\nProcessing images using sharp-cli failed: ' +\n          error.message +\n          '\\nOutput: ' +\n          error.stderr.replace(SHARP_HELP_PATTERN, '')\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getOptions(options: Options): string[] {\n  const args = [];\n  for (const [key, value] of Object.entries(options)) {\n    if (value != null && value !== false) {\n      if (typeof value === 'boolean') {\n        args.push(`--${key}`);\n      } else if (typeof value === 'number') {\n        args.push(`--${key}`, value.toFixed());\n      } else {\n        args.push(`--${key}`, value);\n      }\n    }\n  }\n  return args;\n}\n\nfunction getCommandOptions(commands: SharpCommandOptions[]): string[] {\n  const args: string[] = [];\n  for (const command of commands) {\n    if (command.operation === 'resize') {\n      const { operation, width, ...namedOptions } = command;\n      args.push(operation, width.toFixed(), ...getOptions(namedOptions));\n    } else {\n      const { operation, ...namedOptions } = command;\n      args.push(operation, ...getOptions(namedOptions));\n    }\n    args.push('--');\n  }\n  return args;\n}\n\nlet _sharpBin: string | null = null;\nlet _sharpInstance: any | null = null;\n\nasync function findSharpBinAsync(): Promise<string> {\n  if (_sharpBin) {\n    return _sharpBin;\n  }\n  try {\n    const sharpCliPackage = require('sharp-cli/package.json');\n    const libVipsVersion = require('sharp').versions.vips;\n    if (\n      sharpCliPackage &&\n      semver.satisfies(sharpCliPackage.version, SHARP_REQUIRED_VERSION) &&\n      typeof sharpCliPackage.bin.sharp === 'string' &&\n      typeof libVipsVersion === 'string'\n    ) {\n      _sharpBin = require.resolve(`sharp-cli/${sharpCliPackage.bin.sharp}`);\n      return _sharpBin;\n    }\n  } catch (e) {\n    // fall back to global sharp-cli\n  }\n\n  let installedCliVersion;\n  try {\n    installedCliVersion = (await spawnAsync('sharp', ['--version'])).stdout.toString().trim();\n  } catch (e) {\n    throw notFoundError(SHARP_REQUIRED_VERSION);\n  }\n\n  if (!semver.satisfies(installedCliVersion, SHARP_REQUIRED_VERSION)) {\n    showVersionMismatchWarning(SHARP_REQUIRED_VERSION, installedCliVersion);\n  }\n  _sharpBin = 'sharp';\n  return _sharpBin;\n}\n\n/**\n * Returns the instance of `sharp` installed by the global `sharp-cli` package.\n * This method will throw errors if the `sharp` instance cannot be found, these errors can be circumvented by ensuring `isAvailableAsync()` resolves to `true`.\n */\nexport async function findSharpInstanceAsync(): Promise<any | null> {\n  if (isSharpDisabled) {\n    throw new Error(\n      'Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`'\n    );\n  }\n  if (_sharpInstance) {\n    return _sharpInstance;\n  }\n  // Ensure sharp-cli version is correct\n  await findSharpBinAsync();\n\n  // Attempt to use local sharp package\n  try {\n    const sharp = require('sharp');\n    _sharpInstance = sharp;\n    return sharp;\n  } catch {}\n\n  // Attempt to resolve the sharp instance used by the global CLI\n  let sharpCliPath;\n  if (process.platform !== 'win32') {\n    try {\n      sharpCliPath = (await spawnAsync('which', ['sharp'])).stdout.toString().trim();\n    } catch {}\n  } else {\n    // On Windows systems, nested dependencies aren't linked to the paths within `require.resolve.paths`.\n    // Yarn installs these modules in a different folder, let's add yarn to the other attempts.\n    // See: https://github.com/expo/expo-cli/issues/2708\n    let yarnGlobalPath = '';\n    try {\n      yarnGlobalPath = path.join(\n        (await spawnAsync('yarn', ['global', 'dir'])).stdout.toString().trim(),\n        'node_modules'\n      );\n    } catch {}\n    try {\n      sharpCliPath = require.resolve('sharp-cli/package.json', {\n        paths: (require.resolve.paths('sharp-cli') || []).concat(yarnGlobalPath),\n      });\n    } catch {}\n  }\n\n  // resolve sharp from the sharp-cli package\n  const sharpPath = resolveFrom.silent(sharpCliPath || '', 'sharp');\n\n  if (sharpPath) {\n    try {\n      // attempt to require the global sharp package\n      _sharpInstance = require(sharpPath);\n    } catch {}\n  }\n\n  if (!_sharpInstance) {\n    throw new Error(`Failed to find the instance of sharp used by the global sharp-cli package.`);\n  }\n\n  return _sharpInstance;\n}\n\nfunction notFoundError(requiredCliVersion: string): Error {\n  return new Error(\n    `This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n}\n\nlet versionMismatchWarningShown = false;\n\nfunction showVersionMismatchWarning(requiredCliVersion: string, installedCliVersion: string) {\n  if (versionMismatchWarningShown) {\n    return;\n  }\n  console.warn(\n    `Warning: This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `Currently installed version: \"${installedCliVersion}\" \\n` +\n      `Required version: \"${requiredCliVersion}\" \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n  versionMismatchWarningShown = true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}