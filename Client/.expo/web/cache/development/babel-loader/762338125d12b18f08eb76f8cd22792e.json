{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileExistsAsync = fileExistsAsync;\nexports.directoryExistsAsync = directoryExistsAsync;\nexports.fileExists = fileExists;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction statAsync(file) {\n  return _regeneratorRuntime.async(function statAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(_fs().default.promises.stat(file));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", null);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nfunction fileExistsAsync(file) {\n  var _await$statAsync$isFi, _await$statAsync;\n\n  return _regeneratorRuntime.async(function fileExistsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(statAsync(file));\n\n        case 2:\n          _context2.t2 = _await$statAsync = _context2.sent;\n          _context2.t1 = _context2.t2 === null;\n\n          if (_context2.t1) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.t1 = _await$statAsync === void 0;\n\n        case 6:\n          if (!_context2.t1) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.t3 = void 0;\n          _context2.next = 11;\n          break;\n\n        case 10:\n          _context2.t3 = _await$statAsync.isFile();\n\n        case 11:\n          _context2.t4 = _await$statAsync$isFi = _context2.t3;\n          _context2.t0 = _context2.t4 !== null;\n\n          if (!_context2.t0) {\n            _context2.next = 15;\n            break;\n          }\n\n          _context2.t0 = _await$statAsync$isFi !== void 0;\n\n        case 15:\n          if (!_context2.t0) {\n            _context2.next = 19;\n            break;\n          }\n\n          _context2.t5 = _await$statAsync$isFi;\n          _context2.next = 20;\n          break;\n\n        case 19:\n          _context2.t5 = false;\n\n        case 20:\n          return _context2.abrupt(\"return\", _context2.t5);\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction directoryExistsAsync(file) {\n  var _await$statAsync$isDi, _await$statAsync2;\n\n  return _regeneratorRuntime.async(function directoryExistsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(statAsync(file));\n\n        case 2:\n          _context3.t2 = _await$statAsync2 = _context3.sent;\n          _context3.t1 = _context3.t2 === null;\n\n          if (_context3.t1) {\n            _context3.next = 6;\n            break;\n          }\n\n          _context3.t1 = _await$statAsync2 === void 0;\n\n        case 6:\n          if (!_context3.t1) {\n            _context3.next = 10;\n            break;\n          }\n\n          _context3.t3 = void 0;\n          _context3.next = 11;\n          break;\n\n        case 10:\n          _context3.t3 = _await$statAsync2.isDirectory();\n\n        case 11:\n          _context3.t4 = _await$statAsync$isDi = _context3.t3;\n          _context3.t0 = _context3.t4 !== null;\n\n          if (!_context3.t0) {\n            _context3.next = 15;\n            break;\n          }\n\n          _context3.t0 = _await$statAsync$isDi !== void 0;\n\n        case 15:\n          if (!_context3.t0) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.t5 = _await$statAsync$isDi;\n          _context3.next = 20;\n          break;\n\n        case 19:\n          _context3.t5 = false;\n\n        case 20:\n          return _context3.abrupt(\"return\", _context3.t5);\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fileExists(file) {\n  try {\n    return _fs().default.statSync(file).isFile();\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"sources":["../../src/utils/modules.ts"],"names":["fs","statAsync"],"mappings":";;;;;;;;;;;AAAA,SAAA,GAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AAAA,EAAA,GAAA,GAAA,eAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAOA,SAAA,SAAA,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBA,GAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAb,IAAaA,CAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAII,IAJJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQO,SAAA,eAAA,CAAA,IAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACSC,SAAS,CAAvB,IAAuB,CADlB;;AAAA;AAAA,yBACL,gBADK;AAAA,0CACL,IADK;;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,gBAAA,KAAA,KAAA,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,KAAA,CADK;AAAA;AAAA;;AAAA;AAAA,yBACE,gBAAA,CAAP,MAAO,EADF;;AAAA;AAAA,yBACL,qBADK;AAAA,0CACL,IADK;;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,qBAAA,KAAA,KAAA,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,qBADK;AAAA;AAAA;;AAAA;AAAA,yBACL,KADK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAA,oBAAA,CAAA,IAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACSA,SAAS,CAAvB,IAAuB,CADlB;;AAAA;AAAA,yBACL,iBADK;AAAA,0CACL,IADK;;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,iBAAA,KAAA,KAAA,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,KAAA,CADK;AAAA;AAAA;;AAAA;AAAA,yBACE,iBAAA,CAAP,WAAO,EADF;;AAAA;AAAA,yBACL,qBADK;AAAA,0CACL,IADK;;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,qBAAA,KAAA,KAAA,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,yBACL,qBADK;AAAA;AAAA;;AAAA;AAAA,yBACL,KADK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAA,UAAA,CAAA,IAAA,EAA2C;AAChD,MAAI;AACF,WAAOD,GAAAA,GAAAA,OAAAA,CAAAA,QAAAA,CAAAA,IAAAA,EAAP,MAAOA,EAAP;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,WAAA,KAAA;AACD;AACF","sourcesContent":["import fs from 'fs';\n\n/**\n * A non-failing version of async FS stat.\n *\n * @param file\n */\nasync function statAsync(file: string): Promise<fs.Stats | null> {\n  try {\n    return await fs.promises.stat(file);\n  } catch {\n    return null;\n  }\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isFile() ?? false;\n}\n\nexport async function directoryExistsAsync(file: string): Promise<boolean> {\n  return (await statAsync(file))?.isDirectory() ?? false;\n}\n\nexport function fileExists(file: string): boolean {\n  try {\n    return fs.statSync(file).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}