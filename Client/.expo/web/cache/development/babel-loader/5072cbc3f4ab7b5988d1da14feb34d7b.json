{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar expo_pwa_1 = require(\"expo-pwa\");\n\nvar ModifyJsonWebpackPlugin_1 = __importDefault(require(\"./ModifyJsonWebpackPlugin\"));\n\nfunction logNotice(type, message) {\n  console.log(chalk_1.default.magenta(\"\\u203A \" + type + \": \" + chalk_1.default.gray(message)));\n}\n\nfunction logWarning(type, message) {\n  console.log(chalk_1.default.yellow(\"\\u203A \" + type + \": \" + chalk_1.default.gray(message)));\n}\n\nvar ChromeIconsWebpackPlugin = function (_ModifyJsonWebpackPlu) {\n  _inherits(ChromeIconsWebpackPlugin, _ModifyJsonWebpackPlu);\n\n  var _super = _createSuper(ChromeIconsWebpackPlugin);\n\n  function ChromeIconsWebpackPlugin(options, icon) {\n    var _this;\n\n    _classCallCheck(this, ChromeIconsWebpackPlugin);\n\n    _this = _super.call(this);\n    _this.options = options;\n    _this.icon = icon;\n    return _this;\n  }\n\n  _createClass(ChromeIconsWebpackPlugin, [{\n    key: \"modifyAsync\",\n    value: function modifyAsync(compiler, compilation, data) {\n      var iconAssets, _loop, _iterator, _step, asset;\n\n      return _regeneratorRuntime.async(function modifyAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Array.isArray(data.json.icons)) {\n                _context.next = 3;\n                break;\n              }\n\n              logNotice('Chrome Icons', \"Using custom `icons` from PWA manifest\");\n              return _context.abrupt(\"return\", data);\n\n            case 3:\n              if (this.icon) {\n                _context.next = 6;\n                break;\n              }\n\n              logWarning('Chrome Icons', \"No template image found, skipping auto generation...\");\n              return _context.abrupt(\"return\", data);\n\n            case 6:\n              data.json.icons = [];\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(expo_pwa_1.generateChromeIconAsync(this.options, this.icon, {}));\n\n            case 9:\n              iconAssets = _context.sent;\n\n              _loop = function _loop(asset) {\n                compilation.assets[asset.asset.path] = {\n                  source: function source() {\n                    return asset.asset.source;\n                  },\n                  size: function size() {\n                    return asset.asset.source.length;\n                  }\n                };\n                data.json.icons.push(asset.manifest);\n              };\n\n              for (_iterator = _createForOfIteratorHelperLoose(iconAssets); !(_step = _iterator()).done;) {\n                asset = _step.value;\n\n                _loop(asset);\n              }\n\n              return _context.abrupt(\"return\", data);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return ChromeIconsWebpackPlugin;\n}(ModifyJsonWebpackPlugin_1.default);\n\nexports.default = ChromeIconsWebpackPlugin;","map":{"version":3,"sources":["../../src/plugins/ChromeIconsWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,IAAA,yBAAA,GAAA,eAAA,CAAA,OAAA,6BAAA,CAAA;;AASA,SAAS,SAAT,CAAmB,IAAnB,EAAiC,OAAjC,EAAgD;AAC9C,EAAA,OAAO,CAAC,GAAR,CAAY,OAAA,CAAA,OAAA,CAAM,OAAN,aAAwB,IAAxB,UAAiC,OAAA,CAAA,OAAA,CAAM,IAAN,CAAW,OAAX,CAAjC,CAAZ;AACD;;AACD,SAAS,UAAT,CAAoB,IAApB,EAAkC,OAAlC,EAAiD;AAC/C,EAAA,OAAO,CAAC,GAAR,CAAY,OAAA,CAAA,OAAA,CAAM,MAAN,aAAuB,IAAvB,UAAgC,OAAA,CAAA,OAAA,CAAM,IAAN,CAAW,OAAX,CAAhC,CAAZ;AACD;;IAEoB,wB;;;;;AAEnB,oCAAoB,OAApB,EAAqD,IAArD,EAA6E;AAAA;;AAAA;;AAE3E;AAFkB,UAAA,OAAA,GAAA,OAAA;AAAiC,UAAA,IAAA,GAAA,IAAA;AAAwB;AAG5E;;;;WAED,qBACE,QADF,EAEE,WAFF,EAGE,IAHF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMM,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,IAAL,CAAU,KAAxB,CANN;AAAA;AAAA;AAAA;;AAOI,cAAA,SAAS,CAAC,cAAD,2CAAT;AAPJ,+CAQW,IARX;;AAAA;AAAA,kBAUO,KAAK,IAVZ;AAAA;AAAA;AAAA;;AAWI,cAAA,UAAU,CAAC,cAAD,yDAAV;AAXJ,+CAYW,IAZX;;AAAA;AAeE,cAAA,IAAI,CAAC,IAAL,CAAU,KAAV,GAAkB,EAAlB;AAfF;AAAA,+CAiB2B,UAAA,CAAA,uBAAA,CAAwB,KAAK,OAA7B,EAAsC,KAAK,IAA3C,EAAiD,EAAjD,CAjB3B;;AAAA;AAiBQ,cAAA,UAjBR;;AAAA,qCAmBa,KAnBb;AAoBI,gBAAA,WAAW,CAAC,MAAZ,CAAmB,KAAK,CAAC,KAAN,CAAY,IAA/B,IAAuC;AACrC,kBAAA,MAAM,EAAE;AAAA,2BAAM,KAAK,CAAC,KAAN,CAAY,MAAlB;AAAA,mBAD6B;AAErC,kBAAA,IAAI,EAAE;AAAA,2BAAM,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAmB,MAAzB;AAAA;AAF+B,iBAAvC;AAKA,gBAAA,IAAI,CAAC,IAAL,CAAU,KAAV,CAAgB,IAAhB,CAAqB,KAAK,CAAC,QAA3B;AAzBJ;;AAmBE,+DAAoB,UAApB,iCAAgC;AAArB,gBAAA,KAAqB;;AAAA,sBAArB,KAAqB;AAO/B;;AA1BH,+CA4BS,IA5BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;EAPoD,yBAAA,CAAA,O;;AAAtD,OAAA,CAAA,OAAA,GAAA,wBAAA","sourcesContent":["import chalk from 'chalk';\nimport { generateChromeIconAsync, IconOptions, ProjectOptions } from 'expo-pwa';\nimport { compilation as compilationNS, Compiler } from 'webpack';\n\nimport { BeforeEmitOptions } from './JsonWebpackPlugin';\nimport ModifyJsonWebpackPlugin from './ModifyJsonWebpackPlugin';\n\nexport type Options = {\n  source: string;\n  outputPath?: string;\n  backgroundColor?: string;\n  resizeMode?: 'contain' | 'cover';\n};\n\nfunction logNotice(type: string, message: string) {\n  console.log(chalk.magenta(`\\u203A ${type}: ${chalk.gray(message)}`));\n}\nfunction logWarning(type: string, message: string) {\n  console.log(chalk.yellow(`\\u203A ${type}: ${chalk.gray(message)}`));\n}\n\nexport default class ChromeIconsWebpackPlugin extends ModifyJsonWebpackPlugin {\n  // Maybe we should support the ability to create all icons individually\n  constructor(private options: ProjectOptions, private icon: IconOptions | null) {\n    // TODO(Bacon): Validation\n    super();\n  }\n\n  async modifyAsync(\n    compiler: Compiler,\n    compilation: compilationNS.Compilation,\n    data: BeforeEmitOptions\n  ): Promise<BeforeEmitOptions> {\n    // If the icons array is already defined, then skip icon generation.\n    if (Array.isArray(data.json.icons)) {\n      logNotice('Chrome Icons', `Using custom \\`icons\\` from PWA manifest`);\n      return data;\n    }\n    if (!this.icon) {\n      logWarning('Chrome Icons', `No template image found, skipping auto generation...`);\n      return data;\n    }\n\n    data.json.icons = [];\n\n    const iconAssets = await generateChromeIconAsync(this.options, this.icon, {});\n\n    for (const asset of iconAssets) {\n      compilation.assets[asset.asset.path] = {\n        source: () => asset.asset.source,\n        size: () => asset.asset.source.length,\n      };\n\n      data.json.icons.push(asset.manifest);\n    }\n\n    return data;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}