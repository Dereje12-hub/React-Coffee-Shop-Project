{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.spawnAsync = exports.safeIdOfAppAsync = exports.openTerminalToSpecificFolderAsync = exports.openItermToSpecificFolderAsync = exports.openInEditorAsync = exports.openInAppAsync = exports.openFolderInTerminalAppAsync = exports.openFinderToFolderAsync = exports.isAppRunningAsync = exports.execAsync = exports.chooseTerminalAppAsync = exports.chooseEditorAppAsync = exports.chooseAppAsync = void 0;\n\nvar spawn_async_1 = __importDefault(require(\"@expo/spawn-async\"));\n\nvar exec_async_1 = __importDefault(require(\"exec-async\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar util_1 = __importDefault(require(\"util\"));\n\nfunction osascriptArgs(script) {\n  if (!util_1.default.isArray(script)) {\n    script = [script];\n  }\n\n  var args = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(script), _step; !(_step = _iterator()).done;) {\n    var line = _step.value;\n    args.push('-e');\n    args.push(line);\n  }\n\n  return args;\n}\n\nfunction osascriptExecAsync(script, opts) {\n  return _regeneratorRuntime.async(function osascriptExecAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(exec_async_1.default('osascript', osascriptArgs(script), _extends({\n            stdio: 'inherit'\n          }, opts)));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.execAsync = osascriptExecAsync;\n\nfunction osascriptSpawnAsync(script, opts) {\n  return _regeneratorRuntime.async(function osascriptSpawnAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(spawn_async_1.default('osascript', osascriptArgs(script), opts));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.spawnAsync = osascriptSpawnAsync;\n\nfunction isAppRunningAsync(appName) {\n  var zeroMeansNo;\n  return _regeneratorRuntime.async(function isAppRunningAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(osascriptExecAsync('tell app \"System Events\" to count processes whose name is ' + JSON.stringify(appName)));\n\n        case 2:\n          zeroMeansNo = _context3.sent.trim();\n          return _context3.abrupt(\"return\", zeroMeansNo !== '0');\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.isAppRunningAsync = isAppRunningAsync;\n\nfunction safeIdOfAppAsync(appName) {\n  return _regeneratorRuntime.async(function safeIdOfAppAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(osascriptExecAsync('id of app ' + JSON.stringify(appName)));\n\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent.trim());\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](0);\n          return _context4.abrupt(\"return\", null);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n}\n\nexports.safeIdOfAppAsync = safeIdOfAppAsync;\n\nfunction openFinderToFolderAsync(dir) {\n  var activate,\n      _args5 = arguments;\n  return _regeneratorRuntime.async(function openFinderToFolderAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          activate = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : true;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(osascriptSpawnAsync(['tell application \"Finder\"', 'open POSIX file ' + JSON.stringify(dir), activate && 'activate' || '', 'end tell']));\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openFinderToFolderAsync = openFinderToFolderAsync;\n\nfunction openInAppAsync(appName, pth) {\n  var cmd;\n  return _regeneratorRuntime.async(function openInAppAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          cmd = 'tell app ' + JSON.stringify(appName) + ' to open ' + JSON.stringify(path_1.default.resolve(pth));\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(osascriptSpawnAsync(cmd));\n\n        case 3:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openInAppAsync = openInAppAsync;\n\nfunction chooseAppAsync(listOfAppNames) {\n  var runningAwaitables, appIdAwaitables, _iterator2, _step2, appName, running, appIds, i;\n\n  return _regeneratorRuntime.async(function chooseAppAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          runningAwaitables = [];\n          appIdAwaitables = [];\n\n          for (_iterator2 = _createForOfIteratorHelperLoose(listOfAppNames); !(_step2 = _iterator2()).done;) {\n            appName = _step2.value;\n            runningAwaitables.push(isAppRunningAsync(appName));\n            appIdAwaitables.push(safeIdOfAppAsync(appName));\n          }\n\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(Promise.all(runningAwaitables));\n\n        case 5:\n          running = _context7.sent;\n          _context7.next = 8;\n          return _regeneratorRuntime.awrap(Promise.all(appIdAwaitables));\n\n        case 8:\n          appIds = _context7.sent;\n          i = 0;\n\n        case 10:\n          if (!(i < listOfAppNames.length)) {\n            _context7.next = 16;\n            break;\n          }\n\n          if (!running[i]) {\n            _context7.next = 13;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", listOfAppNames[i]);\n\n        case 13:\n          i++;\n          _context7.next = 10;\n          break;\n\n        case 16:\n          i = 0;\n\n        case 17:\n          if (!(i < listOfAppNames.length)) {\n            _context7.next = 23;\n            break;\n          }\n\n          if (!appIds[i]) {\n            _context7.next = 20;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", listOfAppNames[i]);\n\n        case 20:\n          i++;\n          _context7.next = 17;\n          break;\n\n        case 23:\n          return _context7.abrupt(\"return\", null);\n\n        case 24:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.chooseAppAsync = chooseAppAsync;\n\nfunction chooseEditorAppAsync(preferredEditor) {\n  var appId, editorsToTry;\n  return _regeneratorRuntime.async(function chooseEditorAppAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!preferredEditor) {\n            _context8.next = 9;\n            break;\n          }\n\n          _context8.next = 3;\n          return _regeneratorRuntime.awrap(safeIdOfAppAsync(preferredEditor));\n\n        case 3:\n          appId = _context8.sent;\n\n          if (!appId) {\n            _context8.next = 8;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", preferredEditor);\n\n        case 8:\n          console.warn(\"Your preferred editor (\" + preferredEditor + \") isn't installed on this computer.\");\n\n        case 9:\n          editorsToTry = ['Visual Studio Code', 'Atom', 'Sublime Text', 'TextMate', 'TextWrangler', 'Visual Studio Code', 'Brackets', 'SubEthaEdit', 'BBEdit', 'Textastic', 'UltraEdit', 'MacVim', 'CodeRunner 2', 'CodeRunner', 'TextEdit'];\n          _context8.next = 12;\n          return _regeneratorRuntime.awrap(chooseAppAsync(editorsToTry));\n\n        case 12:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.chooseEditorAppAsync = chooseEditorAppAsync;\n\nfunction chooseTerminalAppAsync() {\n  return _regeneratorRuntime.async(function chooseTerminalAppAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(chooseAppAsync(['iTerm 3', 'iTerm 2', 'iTerm', 'HyperTerm', 'Terminal']));\n\n        case 2:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.chooseTerminalAppAsync = chooseTerminalAppAsync;\n\nfunction openInEditorAsync(pth, preferredEditor) {\n  var appName;\n  return _regeneratorRuntime.async(function openInEditorAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(chooseEditorAppAsync(preferredEditor));\n\n        case 2:\n          appName = _context10.sent;\n\n          if (appName) {\n            _context10.next = 5;\n            break;\n          }\n\n          throw new Error('No editor found.');\n\n        case 5:\n          console.log('Will open in ' + appName + ' -- ' + pth);\n          _context10.next = 8;\n          return _regeneratorRuntime.awrap(openInAppAsync(appName, pth));\n\n        case 8:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 9:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openInEditorAsync = openInEditorAsync;\n\nfunction openItermToSpecificFolderAsync(dir) {\n  return _regeneratorRuntime.async(function openItermToSpecificFolderAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(osascriptSpawnAsync(['tell application \"iTerm\"', 'make new terminal', 'tell the first terminal', 'activate current session', 'launch session \"Default Session\"', 'tell the last session', 'write text \"cd ' + util_1.default.inspect(dir) + ' && clear\"', 'end tell', 'end tell', 'end tell']));\n\n        case 2:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 3:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openItermToSpecificFolderAsync = openItermToSpecificFolderAsync;\n\nfunction openTerminalToSpecificFolderAsync(dir) {\n  var inTab,\n      _args12 = arguments;\n  return _regeneratorRuntime.async(function openTerminalToSpecificFolderAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          inTab = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : false;\n\n          if (!inTab) {\n            _context12.next = 7;\n            break;\n          }\n\n          _context12.next = 4;\n          return _regeneratorRuntime.awrap(osascriptSpawnAsync(['tell application \"terminal\"', 'tell application \"System Events\" to tell process \"terminal\" to keystroke \"t\" using command down', 'do script with command \"cd ' + util_1.default.inspect(dir) + ' && clear\" in selected tab of the front window', 'end tell']));\n\n        case 4:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 7:\n          _context12.next = 9;\n          return _regeneratorRuntime.awrap(osascriptSpawnAsync(['tell application \"terminal\"', 'do script \"cd ' + util_1.default.inspect(dir) + ' && clear\"', 'end tell', 'tell application \"terminal\" to activate']));\n\n        case 9:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 10:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openTerminalToSpecificFolderAsync = openTerminalToSpecificFolderAsync;\n\nfunction openFolderInTerminalAppAsync(dir) {\n  var inTab,\n      program,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function openFolderInTerminalAppAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          inTab = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : false;\n          _context13.next = 3;\n          return _regeneratorRuntime.awrap(chooseTerminalAppAsync());\n\n        case 3:\n          program = _context13.sent;\n          _context13.t0 = program;\n          _context13.next = _context13.t0 === 'iTerm' ? 7 : _context13.t0 === 'Terminal' ? 10 : 10;\n          break;\n\n        case 7:\n          _context13.next = 9;\n          return _regeneratorRuntime.awrap(openItermToSpecificFolderAsync(dir));\n\n        case 9:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 10:\n          _context13.next = 12;\n          return _regeneratorRuntime.awrap(openTerminalToSpecificFolderAsync(dir, inTab));\n\n        case 12:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.openFolderInTerminalAppAsync = openFolderInTerminalAppAsync;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Utilities for working with `osascript` which runs AppleScript on Macs\n */\n'use strict';\n\nimport spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport execAsync, { ExecAsyncOptions } from 'exec-async';\nimport path from 'path';\nimport util from 'util';\n\nfunction osascriptArgs(script: string | string[]): string[] {\n  if (!util.isArray(script)) {\n    script = [script];\n  }\n\n  const args = [];\n  for (const line of script) {\n    args.push('-e');\n    args.push(line);\n  }\n\n  return args;\n}\n\nasync function osascriptExecAsync(\n  script: string | string[],\n  opts?: ExecAsyncOptions\n): Promise<string> {\n  return await execAsync(\n    'osascript',\n    osascriptArgs(script),\n    Object.assign({ stdio: 'inherit' }, opts)\n  );\n}\n\nasync function osascriptSpawnAsync(\n  script: string | string[],\n  opts?: SpawnOptions\n): Promise<SpawnResult> {\n  return await spawnAsync('osascript', osascriptArgs(script), opts);\n}\n\nasync function isAppRunningAsync(appName: string): Promise<boolean> {\n  const zeroMeansNo = (\n    await osascriptExecAsync(\n      'tell app \"System Events\" to count processes whose name is ' + JSON.stringify(appName)\n    )\n  ).trim();\n  return zeroMeansNo !== '0';\n}\n\nasync function safeIdOfAppAsync(appName: string): Promise<string | null> {\n  try {\n    return (await osascriptExecAsync('id of app ' + JSON.stringify(appName))).trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function openFinderToFolderAsync(dir: string, activate = true): Promise<void> {\n  await osascriptSpawnAsync([\n    'tell application \"Finder\"',\n    'open POSIX file ' + JSON.stringify(dir),\n    (activate && 'activate') || '',\n    'end tell',\n  ]);\n}\n\nasync function openInAppAsync(appName: string, pth: string): Promise<SpawnResult> {\n  const cmd =\n    'tell app ' + JSON.stringify(appName) + ' to open ' + JSON.stringify(path.resolve(pth));\n  // console.log(\"cmd=\", cmd);\n  return await osascriptSpawnAsync(cmd);\n}\n\nasync function chooseAppAsync(listOfAppNames: string[]): Promise<string | null> {\n  const runningAwaitables = [];\n  const appIdAwaitables = [];\n  for (const appName of listOfAppNames) {\n    runningAwaitables.push(isAppRunningAsync(appName));\n    appIdAwaitables.push(safeIdOfAppAsync(appName));\n  }\n  const running = await Promise.all(runningAwaitables);\n  const appIds = await Promise.all(appIdAwaitables);\n\n  let i;\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (running[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (appIds[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  return null;\n}\n\nasync function chooseEditorAppAsync(preferredEditor?: string): Promise<string | null> {\n  if (preferredEditor) {\n    // Make sure this editor exists\n    const appId = await safeIdOfAppAsync(preferredEditor);\n    if (appId) {\n      return preferredEditor;\n    } else {\n      console.warn(`Your preferred editor (${preferredEditor}) isn't installed on this computer.`);\n    }\n  }\n\n  const editorsToTry = [\n    'Visual Studio Code',\n    'Atom',\n    'Sublime Text',\n    'TextMate',\n    'TextWrangler',\n    'Visual Studio Code',\n    'Brackets',\n    'SubEthaEdit',\n    'BBEdit',\n    'Textastic',\n    'UltraEdit',\n    'MacVim',\n    'CodeRunner 2',\n    'CodeRunner',\n    'TextEdit',\n  ];\n\n  return await chooseAppAsync(editorsToTry);\n}\n\nasync function chooseTerminalAppAsync(): Promise<string | null> {\n  return await chooseAppAsync([\n    'iTerm 3',\n    'iTerm 2',\n    'iTerm',\n    'HyperTerm',\n    // 'Cathode',\n    // 'Terminator',\n    // 'MacTerm',\n    'Terminal',\n  ]);\n}\n\nasync function openInEditorAsync(pth: string, preferredEditor?: string): Promise<SpawnResult> {\n  const appName = await chooseEditorAppAsync(preferredEditor);\n  if (!appName) {\n    throw new Error('No editor found.');\n  }\n  console.log('Will open in ' + appName + ' -- ' + pth);\n  return await openInAppAsync(appName, pth);\n}\n\nasync function openItermToSpecificFolderAsync(dir: string): Promise<SpawnResult> {\n  return await osascriptSpawnAsync([\n    'tell application \"iTerm\"',\n    'make new terminal',\n    'tell the first terminal',\n    'activate current session',\n    'launch session \"Default Session\"',\n    'tell the last session',\n    'write text \"cd ' + util.inspect(dir) + ' && clear\"',\n    // 'write text \"clear\"',\n    'end tell',\n    'end tell',\n    'end tell',\n  ]);\n  // exec(\"osascript -e 'tell application \\\"iTerm\\\"' -e 'make new terminal' -e 'tell the first terminal' -e 'activate current session' -e 'launch session \\\"Default Session\\\"' -e 'tell the last session' -e 'write text \\\"cd #{value}\\\"' -e 'write text \\\"clear\\\"' -e 'end tell' -e 'end tell' -e 'end tell' > /dev/null 2>&1\")\n}\n\nasync function openTerminalToSpecificFolderAsync(dir: string, inTab = false): Promise<SpawnResult> {\n  if (inTab) {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'tell application \"System Events\" to tell process \"terminal\" to keystroke \"t\" using command down',\n      'do script with command \"cd ' +\n        util.inspect(dir) +\n        ' && clear\" in selected tab of the front window',\n      'end tell',\n    ]);\n  } else {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'do script \"cd ' + util.inspect(dir) + ' && clear\"',\n      'end tell',\n      'tell application \"terminal\" to activate',\n    ]);\n  }\n}\n\nasync function openFolderInTerminalAppAsync(dir: string, inTab = false): Promise<SpawnResult> {\n  const program = await chooseTerminalAppAsync();\n\n  switch (program) {\n    case 'iTerm':\n      return await openItermToSpecificFolderAsync(dir);\n\n    case 'Terminal':\n    default:\n      return await openTerminalToSpecificFolderAsync(dir, inTab);\n  }\n}\n\nexport {\n  chooseAppAsync,\n  chooseEditorAppAsync,\n  chooseTerminalAppAsync,\n  osascriptExecAsync as execAsync,\n  isAppRunningAsync,\n  openFinderToFolderAsync,\n  openFolderInTerminalAppAsync,\n  openInAppAsync,\n  openInEditorAsync,\n  openItermToSpecificFolderAsync,\n  openTerminalToSpecificFolderAsync,\n  safeIdOfAppAsync,\n  osascriptSpawnAsync as spawnAsync,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}