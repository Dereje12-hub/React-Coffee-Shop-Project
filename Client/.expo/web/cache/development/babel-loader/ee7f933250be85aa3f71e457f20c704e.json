{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectFilePath = getProjectFilePath;\nexports.getFileInfo = getFileInfo;\nexports.getMainApplicationAsync = getMainApplicationAsync;\nexports.getMainActivityAsync = getMainActivityAsync;\nexports.getGradleFilePath = getGradleFilePath;\nexports.getProjectBuildGradleFilePath = getProjectBuildGradleFilePath;\nexports.getProjectBuildGradleAsync = getProjectBuildGradleAsync;\nexports.getSettingsGradleFilePath = getSettingsGradleFilePath;\nexports.getSettingsGradleAsync = getSettingsGradleAsync;\nexports.getAppBuildGradleFilePath = getAppBuildGradleFilePath;\nexports.getAppBuildGradleAsync = getAppBuildGradleAsync;\nexports.getProjectPathOrThrowAsync = getProjectPathOrThrowAsync;\nexports.getAndroidManifestAsync = getAndroidManifestAsync;\nexports.getResourceFolderAsync = getResourceFolderAsync;\nexports.getResourceXMLPathAsync = getResourceXMLPathAsync;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  var data = require(\"glob\");\n\n  _glob = function _glob() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n\n  path = function path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n\n  _errors = function _errors() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n\n  _modules = function _modules() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getProjectFilePath(projectRoot, name) {\n  var filePath = (0, _glob().sync)(path().join(projectRoot, \"android/app/src/main/java/**/\" + name + \".@(java|kt)\"))[0];\n  (0, _assert().default)(filePath, \"Project file \\\"\" + name + \"\\\" does not exist in android project for root \\\"\" + projectRoot + \"\\\"\");\n  return filePath;\n}\n\nfunction getLanguage(filePath) {\n  var extension = path().extname(filePath);\n\n  switch (extension) {\n    case '.java':\n      return 'java';\n\n    case '.kts':\n    case '.kt':\n      return 'kt';\n\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n\n    default:\n      throw new (_errors().UnexpectedError)(\"Unexpected Android file extension: \" + extension);\n  }\n}\n\nfunction getFileInfo(filePath) {\n  return {\n    path: path().normalize(filePath),\n    contents: _fsExtra().default.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath)\n  };\n}\n\nfunction getMainApplicationAsync(projectRoot) {\n  var filePath;\n  return _regeneratorRuntime.async(function getMainApplicationAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          filePath = getProjectFilePath(projectRoot, 'MainApplication');\n          return _context.abrupt(\"return\", getFileInfo(filePath));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getMainActivityAsync(projectRoot) {\n  var filePath;\n  return _regeneratorRuntime.async(function getMainActivityAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          filePath = getProjectFilePath(projectRoot, 'MainActivity');\n          return _context2.abrupt(\"return\", getFileInfo(filePath));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getGradleFilePath(projectRoot, gradleName) {\n  var groovyPath = path().resolve(projectRoot, gradleName + \".gradle\");\n  var ktPath = path().resolve(projectRoot, gradleName + \".gradle.kts\");\n\n  var isGroovy = _fsExtra().default.pathExistsSync(groovyPath);\n\n  var isKotlin = !isGroovy && _fsExtra().default.pathExistsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(\"Failed to find '\" + gradleName + \".gradle' file for project: \" + projectRoot + \".\");\n  }\n\n  var filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nfunction getProjectBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'build');\n}\n\nfunction getProjectBuildGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getProjectBuildGradleAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", getFileInfo(getProjectBuildGradleFilePath(projectRoot)));\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getSettingsGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'settings');\n}\n\nfunction getSettingsGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getSettingsGradleAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", getFileInfo(getSettingsGradleFilePath(projectRoot)));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAppBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android', 'app'), 'build');\n}\n\nfunction getAppBuildGradleAsync(projectRoot) {\n  return _regeneratorRuntime.async(function getAppBuildGradleAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", getFileInfo(getAppBuildGradleFilePath(projectRoot)));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getProjectPathOrThrowAsync(projectRoot) {\n  var projectPath;\n  return _regeneratorRuntime.async(function getProjectPathOrThrowAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          projectPath = path().join(projectRoot, 'android');\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap((0, _modules().directoryExistsAsync)(projectPath));\n\n        case 3:\n          if (!_context6.sent) {\n            _context6.next = 5;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", projectPath);\n\n        case 5:\n          throw new Error(\"Android project folder is missing in project: \" + projectRoot);\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getAndroidManifestAsync(projectRoot) {\n  var projectPath, filePath;\n  return _regeneratorRuntime.async(function getAndroidManifestAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(getProjectPathOrThrowAsync(projectRoot));\n\n        case 2:\n          projectPath = _context7.sent;\n          filePath = path().join(projectPath, 'app/src/main/AndroidManifest.xml');\n          return _context7.abrupt(\"return\", filePath);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getResourceFolderAsync(projectRoot) {\n  var projectPath;\n  return _regeneratorRuntime.async(function getResourceFolderAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(getProjectPathOrThrowAsync(projectRoot));\n\n        case 2:\n          projectPath = _context8.sent;\n          return _context8.abrupt(\"return\", path().join(projectPath, \"app/src/main/res\"));\n\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getResourceXMLPathAsync(projectRoot, _ref) {\n  var _ref$kind, kind, name, resourcePath, filePath;\n\n  return _regeneratorRuntime.async(function getResourceXMLPathAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _ref$kind = _ref.kind, kind = _ref$kind === void 0 ? 'values' : _ref$kind, name = _ref.name;\n          _context9.next = 3;\n          return _regeneratorRuntime.awrap(getResourceFolderAsync(projectRoot));\n\n        case 3:\n          resourcePath = _context9.sent;\n          filePath = path().join(resourcePath, kind + \"/\" + name + \".xml\");\n          return _context9.abrupt(\"return\", filePath);\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../../src/android/Paths.ts"],"names":["filePath","path","name","extension","UnexpectedError","contents","fs","language","getLanguage","getProjectFilePath","getFileInfo","groovyPath","ktPath","isGroovy","isKotlin","gradleName","getGradleFilePath","getProjectBuildGradleFilePath","getSettingsGradleFilePath","getAppBuildGradleFilePath","projectPath","getProjectPathOrThrowAsync","kind","resourcePath","getResourceFolderAsync"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAAA,EAAA,KAAA,GAAA,iBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,IAAA,GAAA;AAAA,MAAA,IAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAAA,EAAA,IAAA,GAAA,gBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,mBAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,oBAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,SAAA,kBAAA,CAAA,WAAA,EAAA,IAAA,EAAuE;AAC5E,MAAMA,QAAQ,GAAG,CAAA,GAAA,KAAA,GAAA,IAAA,EACfC,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,oCADe,IACfA,iBADe,EAAjB,CAAiB,CAAjB;AAGA,GAAA,GAAA,OAAA,GAAA,OAAA,EAAA,QAAA,sBAEmBC,IAFnB,wDAAA,WAAA;AAKA,SAAA,QAAA;AACD;;AAED,SAAA,WAAA,CAAA,QAAA,EAAiE;AAC/D,MAAMC,SAAS,GAAGF,IAAI,GAAJA,OAAAA,CAAlB,QAAkBA,CAAlB;;AACA,UAAA,SAAA;AACE,SAAA,OAAA;AACE,aAAA,MAAA;;AACF,SAAA,MAAA;AACA,SAAA,KAAA;AACE,aAAA,IAAA;;AACF,SAAA,SAAA;AACA,SAAA,SAAA;AACE,aAAA,QAAA;;AACF;AACE,YAAM,KAAIG,OAAAA,GAAJ,eAAA,0CAAN,SAAM,CAAN;AAVJ;AAYD;;AAEM,SAAA,WAAA,CAAA,QAAA,EAAuC;AAC5C,SAAO;AACLH,IAAAA,IAAI,EAAEA,IAAI,GAAJA,SAAAA,CADD,QACCA,CADD;AAELI,IAAAA,QAAQ,EAAEC,QAAAA,GAAAA,OAAAA,CAAAA,YAAAA,CAAAA,QAAAA,EAFL,MAEKA,CAFL;AAGLC,IAAAA,QAAQ,EAAEC,WAAW,CAAA,QAAA;AAHhB,GAAP;AAKD;;AAEM,SAAA,uBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGCR,UAAAA,QAHD,GAGYS,kBAAkB,CAAA,WAAA,EAAnC,iBAAmC,CAH9B;AAAA,2CAIEC,WAAW,CAAlB,QAAkB,CAJb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAA,oBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCV,UAAAA,QADD,GACYS,kBAAkB,CAAA,WAAA,EAAnC,cAAmC,CAD9B;AAAA,4CAEEC,WAAW,CAAlB,QAAkB,CAFb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAA,iBAAA,CAAA,WAAA,EAAA,UAAA,EAA4E;AACjF,MAAMC,UAAU,GAAGV,IAAI,GAAJA,OAAAA,CAAAA,WAAAA,EAAnB,UAAmBA,aAAnB;AACA,MAAMW,MAAM,GAAGX,IAAI,GAAJA,OAAAA,CAAAA,WAAAA,EAAf,UAAeA,iBAAf;;AAEA,MAAMY,QAAQ,GAAGP,QAAAA,GAAAA,OAAAA,CAAAA,cAAAA,CAAjB,UAAiBA,CAAjB;;AACA,MAAMQ,QAAQ,GAAG,CAAA,QAAA,IAAaR,QAAAA,GAAAA,OAAAA,CAAAA,cAAAA,CAA9B,MAA8BA,CAA9B;;AAEA,MAAI,CAAA,QAAA,IAAa,CAAjB,QAAA,EAA4B;AAC1B,UAAM,IAAA,KAAA,sBAA6BS,UAA7B,mCAAN,WAAM,OAAN;AACD;;AACD,MAAMf,QAAQ,GAAGa,QAAQ,GAAA,UAAA,GAAzB,MAAA;AACA,SAAA,QAAA;AACD;;AAEM,SAAA,6BAAA,CAAA,WAAA,EAAoE;AACzE,SAAOG,iBAAiB,CAACf,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,EAAD,SAACA,CAAD,EAAxB,OAAwB,CAAxB;AACD;;AAEM,SAAA,0BAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACES,WAAW,CAACO,6BAA6B,CAAhD,WAAgD,CAA9B,CADb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAA,yBAAA,CAAA,WAAA,EAAgE;AACrE,SAAOD,iBAAiB,CAACf,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,EAAD,SAACA,CAAD,EAAxB,UAAwB,CAAxB;AACD;;AAEM,SAAA,sBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACES,WAAW,CAACQ,yBAAyB,CAA5C,WAA4C,CAA1B,CADb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAA,yBAAA,CAAA,WAAA,EAAgE;AACrE,SAAOF,iBAAiB,CAACf,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,EAAAA,SAAAA,EAAD,KAACA,CAAD,EAAxB,OAAwB,CAAxB;AACD;;AAEM,SAAA,sBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CACES,WAAW,CAACS,yBAAyB,CAA5C,WAA4C,CAA1B,CADb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAA,0BAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,WADD,GACenB,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,EAApB,SAAoBA,CADf;AAAA;AAAA,2CAEK,CAAA,GAAA,QAAA,GAAA,oBAAA,EAAV,WAAU,CAFL;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,4CAGH,WAHG;;AAAA;AAAA,gBAKC,IAAA,KAAA,oDAAN,WAAM,CALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAA,uBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBoB,0BAA0B,CAApD,WAAoD,CAD/C;;AAAA;AACCD,UAAAA,WADD;AAECpB,UAAAA,QAFD,GAEYC,IAAI,GAAJA,IAAAA,CAAAA,WAAAA,EAAjB,kCAAiBA,CAFZ;AAAA,4CAGL,QAHK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAA,sBAAA,CAAA,WAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBoB,0BAA0B,CAApD,WAAoD,CAD/C;;AAAA;AACCD,UAAAA,WADD;AAAA,4CAEEnB,IAAI,GAAJA,IAAAA,CAAP,WAAOA,qBAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAA,uBAAA,CAAA,WAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEHqB,IAFG,EAEHA,IAFG,0BAEL,QAFK,cAEcpB,IAFd,QAEcA,IAFd;AAAA;AAAA,2CAIsBsB,sBAAsB,CAAjD,WAAiD,CAJ5C;;AAAA;AAICD,UAAAA,YAJD;AAMCvB,UAAAA,QAND,GAMYC,IAAI,GAAJA,IAAAA,CAAAA,YAAAA,EAA2BqB,IAA3BrB,SAAjB,IAAiBA,UANZ;AAAA,4CAOL,QAPK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import assert from 'assert';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.pathExistsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.pathExistsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"]},"metadata":{},"sourceType":"script"}