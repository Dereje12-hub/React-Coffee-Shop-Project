{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction withAlias(webpackConfig) {\n  var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!webpackConfig.resolve) webpackConfig.resolve = {};\n  webpackConfig.resolve.alias = _objectSpread(_objectSpread({}, webpackConfig.resolve.alias || {}), alias);\n  return webpackConfig;\n}\n\nexports.default = withAlias;","map":{"version":3,"sources":["../../src/addons/withAlias.ts"],"names":[],"mappings":";;;;;;;;;;;;AASA,SAAwB,SAAxB,CACE,aADF,EAEuC;AAAA,MAArC,KAAqC,uEAAF,EAAE;AAGrC,MAAI,CAAC,aAAa,CAAC,OAAnB,EAA4B,aAAa,CAAC,OAAd,GAAwB,EAAxB;AAC5B,EAAA,aAAa,CAAC,OAAd,CAAsB,KAAtB,mCACM,aAAa,CAAC,OAAd,CAAsB,KAAtB,IAA+B,EADrC,GAEK,KAFL;AAKA,SAAO,aAAP;AACD;;AAZD,OAAA,CAAA,OAAA,GAAA,SAAA","sourcesContent":["import { AnyConfiguration } from '../types';\n\n/**\n * Apply aliases to a Webpack config\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param alias Extra aliases to inject\n * @category addons\n */\nexport default function withAlias(\n  webpackConfig: AnyConfiguration,\n  alias: { [key: string]: string } = {}\n): AnyConfiguration {\n  // Mix in aliases\n  if (!webpackConfig.resolve) webpackConfig.resolve = {};\n  webpackConfig.resolve.alias = {\n    ...(webpackConfig.resolve.alias || {}),\n    ...alias,\n  };\n\n  return webpackConfig;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}