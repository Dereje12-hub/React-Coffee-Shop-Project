{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureSwiftBridgingHeaderSetup = ensureSwiftBridgingHeaderSetup;\nexports.getDesignatedSwiftBridgingHeaderFileReference = getDesignatedSwiftBridgingHeaderFileReference;\nexports.linkBridgingHeaderFile = linkBridgingHeaderFile;\nexports.createBridgingHeaderFile = createBridgingHeaderFile;\nexports.withNoopSwiftFile = exports.withSwiftBridgingHeader = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _XcodeProjectFile() {\n  var data = require(\"./XcodeProjectFile\");\n\n  _XcodeProjectFile = function _XcodeProjectFile() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar templateBridgingHeader = \"//\\n//  Use this file to import your target's public headers that you would like to expose to Swift.\\n//\\n\";\n\nvar withSwiftBridgingHeader = function withSwiftBridgingHeader(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot\n    });\n    return config;\n  });\n};\n\nexports.withSwiftBridgingHeader = withSwiftBridgingHeader;\n\nfunction ensureSwiftBridgingHeaderSetup(_ref) {\n  var projectRoot = _ref.projectRoot,\n      project = _ref.project;\n\n  if (shouldCreateSwiftBridgingHeader({\n    projectRoot: projectRoot,\n    project: project\n  })) {\n    var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n    var bridgingHeader = createBridgingHeaderFileName(projectName);\n    project = createBridgingHeaderFile({\n      project: project,\n      projectName: projectName,\n      projectRoot: projectRoot,\n      bridgingHeader: bridgingHeader\n    });\n    project = linkBridgingHeaderFile({\n      project: project,\n      bridgingHeader: _path().default.join(projectName, bridgingHeader)\n    });\n  }\n\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader(_ref2) {\n  var projectRoot = _ref2.projectRoot,\n      project = _ref2.project;\n  var isObjc = (0, _Paths().getAppDelegate)(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({\n    project: project\n  });\n}\n\nfunction createBridgingHeaderFileName(projectName) {\n  return projectName + \"-Bridging-Header.h\";\n}\n\nfunction getDesignatedSwiftBridgingHeaderFileReference(_ref3) {\n  var project = _ref3.project;\n  var configurations = project.pbxXCBuildConfigurationSection();\n\n  for (var _i = 0, _Object$values = Object.values(configurations || {}); _i < _Object$values.length; _i++) {\n    var _ref4 = _Object$values[_i];\n    var buildSettings = _ref4.buildSettings;\n\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      if (typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' && buildSettings.SWIFT_OBJC_BRIDGING_HEADER) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction linkBridgingHeaderFile(_ref5) {\n  var project = _ref5.project,\n      bridgingHeader = _ref5.bridgingHeader;\n  var configurations = project.pbxXCBuildConfigurationSection();\n\n  for (var _i2 = 0, _Object$values2 = Object.values(configurations || {}); _i2 < _Object$values2.length; _i2++) {\n    var _ref6 = _Object$values2[_i2];\n    var buildSettings = _ref6.buildSettings;\n\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nfunction createBridgingHeaderFile(_ref7) {\n  var projectRoot = _ref7.projectRoot,\n      projectName = _ref7.projectName,\n      project = _ref7.project,\n      bridgingHeader = _ref7.bridgingHeader;\n\n  var bridgingHeaderProjectPath = _path().default.join((0, _Paths().getSourceRoot)(projectRoot), bridgingHeader);\n\n  if (!_fsExtra().default.existsSync(bridgingHeaderProjectPath)) {\n    _fsExtra().default.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  var filePath = projectName + \"/\" + bridgingHeader;\n\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: filePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: false,\n      verbose: false\n    });\n  }\n\n  return project;\n}\n\nvar withNoopSwiftFile = function withNoopSwiftFile(config) {\n  return (0, _XcodeProjectFile().withBuildSourceFile)(config, {\n    filePath: 'noop-file.swift',\n    contents: ['//', '// @generated', '// A blank Swift file must be created for native modules with Swift files to work correctly.', '//', ''].join('\\n')\n  });\n};\n\nexports.withNoopSwiftFile = withNoopSwiftFile;","map":{"version":3,"sources":["../../src/ios/Swift.ts"],"names":["templateBridgingHeader","withSwiftBridgingHeader","config","ensureSwiftBridgingHeaderSetup","project","projectRoot","shouldCreateSwiftBridgingHeader","projectName","bridgingHeader","createBridgingHeaderFileName","createBridgingHeaderFile","linkBridgingHeaderFile","path","isObjc","getDesignatedSwiftBridgingHeaderFileReference","configurations","buildSettings","Object","bridgingHeaderProjectPath","fs","filePath","filepath","groupName","isBuildFile","verbose","withNoopSwiftFile","contents"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n      verbose: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = config => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"]},"metadata":{},"sourceType":"script"}