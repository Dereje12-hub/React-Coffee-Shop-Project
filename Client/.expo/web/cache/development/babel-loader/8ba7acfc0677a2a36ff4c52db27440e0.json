{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocales = getLocales;\nexports.setLocalesAsync = setLocalesAsync;\nexports.getResolvedLocalesAsync = getResolvedLocalesAsync;\nexports.withLocales = void 0;\n\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction fs() {\n  var data = _interopRequireWildcard(require(\"fs-extra\"));\n\n  fs = function fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withLocales = function withLocales(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setLocalesAsync(config, {\n              projectRoot: config.modRequest.projectRoot,\n              project: config.modResults\n            }));\n\n          case 2:\n            config.modResults = _context.sent;\n            return _context.abrupt(\"return\", config);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withLocales = withLocales;\n\nfunction getLocales(config) {\n  var _config$locales;\n\n  return (_config$locales = config.locales) !== null && _config$locales !== void 0 ? _config$locales : null;\n}\n\nfunction setLocalesAsync(config, _ref) {\n  var projectRoot, project, locales, localesMap, projectName, supportingDirectory, stringName, _i, _Object$entries, _ref2, _ref3, lang, localizationObj, dir, strings, buffer, _i2, _Object$entries2, _ref4, _ref5, plistKey, localVersion, group;\n\n  return _regeneratorRuntime.async(function setLocalesAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          projectRoot = _ref.projectRoot, project = _ref.project;\n          locales = getLocales(config);\n\n          if (locales) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", project);\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(getResolvedLocalesAsync(projectRoot, locales));\n\n        case 6:\n          localesMap = _context2.sent;\n          projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n          supportingDirectory = (0, _path().join)(projectRoot, 'ios', projectName, 'Supporting');\n          stringName = 'InfoPlist.strings';\n          _i = 0, _Object$entries = Object.entries(localesMap);\n\n        case 11:\n          if (!(_i < _Object$entries.length)) {\n            _context2.next = 29;\n            break;\n          }\n\n          _ref2 = _Object$entries[_i];\n          _ref3 = _slicedToArray(_ref2, 2);\n          lang = _ref3[0];\n          localizationObj = _ref3[1];\n          dir = (0, _path().join)(supportingDirectory, lang + \".lproj\");\n          _context2.next = 19;\n          return _regeneratorRuntime.awrap(fs().ensureDir(dir));\n\n        case 19:\n          strings = (0, _path().join)(dir, stringName);\n          buffer = [];\n\n          for (_i2 = 0, _Object$entries2 = Object.entries(localizationObj); _i2 < _Object$entries2.length; _i2++) {\n            _ref4 = _Object$entries2[_i2];\n            _ref5 = _slicedToArray(_ref4, 2);\n            plistKey = _ref5[0];\n            localVersion = _ref5[1];\n            buffer.push(plistKey + \" = \\\"\" + localVersion + \"\\\";\");\n          }\n\n          _context2.next = 24;\n          return _regeneratorRuntime.awrap(fs().writeFile(strings, buffer.join('\\n')));\n\n        case 24:\n          group = (0, _Xcodeproj().ensureGroupRecursively)(project, projectName + \"/Supporting/\" + lang + \".lproj\");\n\n          if (!(group !== null && group !== void 0 && group.children.some(function (_ref6) {\n            var comment = _ref6.comment;\n            return comment === stringName;\n          }))) {\n            project = (0, _Xcodeproj().addResourceFileToGroup)({\n              filepath: strings,\n              groupName: projectName + \"/Supporting/\" + lang + \".lproj\",\n              project: project,\n              isBuildFile: true,\n              verbose: true\n            });\n          }\n\n        case 26:\n          _i++;\n          _context2.next = 11;\n          break;\n\n        case 29:\n          return _context2.abrupt(\"return\", project);\n\n        case 30:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getResolvedLocalesAsync(projectRoot, input) {\n  var locales, _i3, _Object$entries3, _ref7, _ref8, lang, localeJsonPath;\n\n  return _regeneratorRuntime.async(function getResolvedLocalesAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          locales = {};\n          _i3 = 0, _Object$entries3 = Object.entries(input);\n\n        case 2:\n          if (!(_i3 < _Object$entries3.length)) {\n            _context3.next = 23;\n            break;\n          }\n\n          _ref7 = _Object$entries3[_i3];\n          _ref8 = _slicedToArray(_ref7, 2);\n          lang = _ref8[0];\n          localeJsonPath = _ref8[1];\n\n          if (!(typeof localeJsonPath === 'string')) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.prev = 8;\n          _context3.next = 11;\n          return _regeneratorRuntime.awrap(_jsonFile().default.readAsync((0, _path().join)(projectRoot, localeJsonPath)));\n\n        case 11:\n          locales[lang] = _context3.sent;\n          _context3.next = 17;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](8);\n          (0, _warnings().addWarningIOS)(\"locales.\" + lang, \"Failed to parse JSON of locale file for language: \" + lang, 'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app');\n\n        case 17:\n          _context3.next = 20;\n          break;\n\n        case 19:\n          locales[lang] = localeJsonPath;\n\n        case 20:\n          _i3++;\n          _context3.next = 2;\n          break;\n\n        case 23:\n          return _context3.abrupt(\"return\", locales);\n\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[8, 14]], Promise);\n}","map":{"version":3,"sources":["../../src/ios/Locales.ts"],"names":["withLocales","config","setLocalesAsync","projectRoot","project","modResults","locales","getLocales","localesMap","getResolvedLocalesAsync","projectName","supportingDirectory","stringName","Object","dir","fs","strings","buffer","plistKey","group","comment","filepath","groupName","isBuildFile","verbose","JsonFile"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    await fs.ensureDir(dir);\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.writeFile(strings, buffer.join('\\n'));\n\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, `${projectName}/Supporting/${lang}.lproj`);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: strings,\n        groupName: `${projectName}/Supporting/${lang}.lproj`,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch (e) {\n        // Add a warning when a json file cannot be parsed.\n        addWarningIOS(\n          `locales.${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"]},"metadata":{},"sourceType":"script"}