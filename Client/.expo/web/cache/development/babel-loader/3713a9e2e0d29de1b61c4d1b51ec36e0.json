{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorCodes = exports.ValidationError = exports.SchemerError = void 0;\n\nvar ajv_1 = __importDefault(require(\"ajv\"));\n\nvar fs_1 = __importDefault(require(\"fs\"));\n\nvar json_schema_traverse_1 = __importDefault(require(\"json-schema-traverse\"));\n\nvar get_1 = __importDefault(require(\"lodash/get\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar probe_image_size_1 = __importDefault(require(\"probe-image-size\"));\n\nvar read_chunk_1 = __importDefault(require(\"read-chunk\"));\n\nvar Error_1 = require(\"./Error\");\n\nvar Util_1 = require(\"./Util\");\n\nvar Error_2 = require(\"./Error\");\n\nObject.defineProperty(exports, \"SchemerError\", {\n  enumerable: true,\n  get: function get() {\n    return Error_2.SchemerError;\n  }\n});\nObject.defineProperty(exports, \"ValidationError\", {\n  enumerable: true,\n  get: function get() {\n    return Error_2.ValidationError;\n  }\n});\nObject.defineProperty(exports, \"ErrorCodes\", {\n  enumerable: true,\n  get: function get() {\n    return Error_2.ErrorCodes;\n  }\n});\n\nvar Schemer = function () {\n  function Schemer(schema) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Schemer);\n\n    this.options = _objectSpread({\n      allErrors: true,\n      verbose: true,\n      format: 'full',\n      metaValidation: true\n    }, options);\n    this.ajv = new ajv_1.default(this.options);\n    this.schema = schema;\n    this.rootDir = this.options.rootDir || __dirname;\n    this.manualValidationErrors = [];\n  }\n\n  _createClass(Schemer, [{\n    key: \"_formatAjvErrorMessage\",\n    value: function _formatAjvErrorMessage(_ref) {\n      var keyword = _ref.keyword,\n          dataPath = _ref.dataPath,\n          params = _ref.params,\n          parentSchema = _ref.parentSchema,\n          data = _ref.data,\n          message = _ref.message;\n      var meta = parentSchema && parentSchema.meta;\n      dataPath = dataPath.slice(1);\n\n      switch (keyword) {\n        case 'additionalProperties':\n          {\n            return new Error_1.ValidationError({\n              errorCode: 'SCHEMA_ADDITIONAL_PROPERTY',\n              fieldPath: dataPath,\n              message: \"should NOT have additional property '\" + params.additionalProperty + \"'\",\n              data: data,\n              meta: meta\n            });\n          }\n\n        case 'required':\n          return new Error_1.ValidationError({\n            errorCode: 'SCHEMA_MISSING_REQUIRED_PROPERTY',\n            fieldPath: dataPath,\n            message: \"is missing required property '\" + params.missingProperty + \"'\",\n            data: data,\n            meta: meta\n          });\n\n        case 'pattern':\n          {\n            var regexHuman = meta === null || meta === void 0 ? void 0 : meta.regexHuman;\n            var regexErrorMessage = regexHuman ? \"'\" + dataPath + \"' should be a \" + (regexHuman[0].toLowerCase() + regexHuman.slice(1)) : \"'\" + dataPath + \"' \" + message;\n            return new Error_1.ValidationError({\n              errorCode: 'SCHEMA_INVALID_PATTERN',\n              fieldPath: dataPath,\n              message: regexErrorMessage,\n              data: data,\n              meta: meta\n            });\n          }\n\n        default:\n          return new Error_1.ValidationError({\n            errorCode: 'SCHEMA_VALIDATION_ERROR',\n            fieldPath: dataPath,\n            message: message || 'Validation error',\n            data: data,\n            meta: meta\n          });\n      }\n    }\n  }, {\n    key: \"getErrors\",\n    value: function getErrors() {\n      var _this = this;\n\n      var valErrors = [];\n\n      if (this.ajv.errors) {\n        valErrors = this.ajv.errors.map(function (e) {\n          return _this._formatAjvErrorMessage(e);\n        });\n      }\n\n      return [].concat(_toConsumableArray(valErrors), _toConsumableArray(this.manualValidationErrors));\n    }\n  }, {\n    key: \"_throwOnErrors\",\n    value: function _throwOnErrors() {\n      var errors = this.getErrors();\n\n      if (errors.length > 0) {\n        this.manualValidationErrors = [];\n        this.ajv.errors = [];\n        throw new Error_1.SchemerError(errors);\n      }\n    }\n  }, {\n    key: \"validateAll\",\n    value: function validateAll(data) {\n      return _regeneratorRuntime.async(function validateAll$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this._validateSchemaAsync(data));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this._validateAssetsAsync(data));\n\n            case 4:\n              this._throwOnErrors();\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"validateAssetsAsync\",\n    value: function validateAssetsAsync(data) {\n      return _regeneratorRuntime.async(function validateAssetsAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this._validateAssetsAsync(data));\n\n            case 2:\n              this._throwOnErrors();\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"validateSchemaAsync\",\n    value: function validateSchemaAsync(data) {\n      return _regeneratorRuntime.async(function validateSchemaAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this._validateSchemaAsync(data));\n\n            case 2:\n              this._throwOnErrors();\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_validateSchemaAsync\",\n    value: function _validateSchemaAsync(data) {\n      this.ajv.validate(this.schema, data);\n    }\n  }, {\n    key: \"_validateAssetsAsync\",\n    value: function _validateAssetsAsync(data) {\n      var assets;\n      return _regeneratorRuntime.async(function _validateAssetsAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              assets = [];\n              json_schema_traverse_1.default(this.schema, {\n                allKeys: true\n              }, function (subSchema, jsonPointer, a, b, c, d, property) {\n                if (property && subSchema.meta && subSchema.meta.asset) {\n                  var fieldPath = Util_1.schemaPointerToFieldPath(jsonPointer);\n                  assets.push({\n                    fieldPath: fieldPath,\n                    data: get_1.default(data, fieldPath),\n                    meta: subSchema.meta\n                  });\n                }\n              });\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(Promise.all(assets.map(this._validateAssetAsync.bind(this))));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"_validateImageAsync\",\n    value: function _validateImageAsync(_ref2) {\n      var fieldPath, data, meta, dimensions, square, contentTypePattern, filePath, probeResult, width, height, type, mime;\n      return _regeneratorRuntime.async(function _validateImageAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fieldPath = _ref2.fieldPath, data = _ref2.data, meta = _ref2.meta;\n\n              if (!(meta && meta.asset && data)) {\n                _context5.next = 28;\n                break;\n              }\n\n              dimensions = meta.dimensions, square = meta.square, contentTypePattern = meta.contentTypePattern;\n              filePath = path_1.default.resolve(this.rootDir, data);\n              _context5.prev = 4;\n\n              if (!fs_1.default.existsSync(filePath)) {\n                _context5.next = 13;\n                break;\n              }\n\n              _context5.t1 = probe_image_size_1.default;\n              _context5.next = 9;\n              return _regeneratorRuntime.awrap(read_chunk_1.default(filePath, 0, 4100));\n\n            case 9:\n              _context5.t2 = _context5.sent;\n              _context5.t0 = _context5.t1.sync.call(_context5.t1, _context5.t2);\n              _context5.next = 16;\n              break;\n\n            case 13:\n              _context5.next = 15;\n              return _regeneratorRuntime.awrap(probe_image_size_1.default(data, {\n                useElectronNet: false\n              }));\n\n            case 15:\n              _context5.t0 = _context5.sent;\n\n            case 16:\n              probeResult = _context5.t0;\n\n              if (probeResult) {\n                _context5.next = 19;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 19:\n              width = probeResult.width, height = probeResult.height, type = probeResult.type, mime = probeResult.mime;\n\n              if (contentTypePattern && !mime.match(new RegExp(contentTypePattern))) {\n                this.manualValidationErrors.push(new Error_1.ValidationError({\n                  errorCode: 'INVALID_CONTENT_TYPE',\n                  fieldPath: fieldPath,\n                  message: \"field '\" + fieldPath + \"' should point to \" + meta.contentTypeHuman + \" but the file at '\" + data + \"' has type \" + type,\n                  data: data,\n                  meta: meta\n                }));\n              }\n\n              if (dimensions && (dimensions.height !== height || dimensions.width !== width)) {\n                this.manualValidationErrors.push(new Error_1.ValidationError({\n                  errorCode: 'INVALID_DIMENSIONS',\n                  fieldPath: fieldPath,\n                  message: \"'\" + fieldPath + \"' should have dimensions \" + dimensions.width + \"x\" + dimensions.height + \", but the file at '\" + data + \"' has dimensions \" + width + \"x\" + height,\n                  data: data,\n                  meta: meta\n                }));\n              }\n\n              if (square && width !== height) {\n                this.manualValidationErrors.push(new Error_1.ValidationError({\n                  errorCode: 'NOT_SQUARE',\n                  fieldPath: fieldPath,\n                  message: \"image should be square, but the file at '\" + data + \"' has dimensions \" + width + \"x\" + height,\n                  data: data,\n                  meta: meta\n                }));\n              }\n\n              _context5.next = 28;\n              break;\n\n            case 25:\n              _context5.prev = 25;\n              _context5.t3 = _context5[\"catch\"](4);\n              this.manualValidationErrors.push(new Error_1.ValidationError({\n                errorCode: 'INVALID_ASSET_URI',\n                fieldPath: fieldPath,\n                message: \"cannot access file at '\" + data + \"'\",\n                data: data,\n                meta: meta\n              }));\n\n            case 28:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, [[4, 25]], Promise);\n    }\n  }, {\n    key: \"_validateAssetAsync\",\n    value: function _validateAssetAsync(_ref3) {\n      var fieldPath, data, meta;\n      return _regeneratorRuntime.async(function _validateAssetAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fieldPath = _ref3.fieldPath, data = _ref3.data, meta = _ref3.meta;\n\n              if (!(meta && meta.asset && data)) {\n                _context6.next = 5;\n                break;\n              }\n\n              if (!(meta.contentTypePattern && meta.contentTypePattern.startsWith('^image'))) {\n                _context6.next = 5;\n                break;\n              }\n\n              _context6.next = 5;\n              return _regeneratorRuntime.awrap(this._validateImageAsync({\n                fieldPath: fieldPath,\n                data: data,\n                meta: meta\n              }));\n\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"validateProperty\",\n    value: function validateProperty(fieldPath, data) {\n      var subSchema;\n      return _regeneratorRuntime.async(function validateProperty$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              subSchema = Util_1.fieldPathToSchema(this.schema, fieldPath);\n              this.ajv.validate(subSchema, data);\n\n              if (!(subSchema.meta && subSchema.meta.asset)) {\n                _context7.next = 5;\n                break;\n              }\n\n              _context7.next = 5;\n              return _regeneratorRuntime.awrap(this._validateAssetAsync({\n                fieldPath: fieldPath,\n                data: data,\n                meta: subSchema.meta\n              }));\n\n            case 5:\n              this._throwOnErrors();\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"validateName\",\n    value: function validateName(name) {\n      return this.validateProperty('name', name);\n    }\n  }, {\n    key: \"validateSlug\",\n    value: function validateSlug(slug) {\n      return this.validateProperty('slug', slug);\n    }\n  }, {\n    key: \"validateSdkVersion\",\n    value: function validateSdkVersion(version) {\n      return this.validateProperty('sdkVersion', version);\n    }\n  }, {\n    key: \"validateIcon\",\n    value: function validateIcon(iconPath) {\n      return this.validateProperty('icon', iconPath);\n    }\n  }]);\n\n  return Schemer;\n}();\n\nexports.default = Schemer;","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Ajv from 'ajv';\nimport fs from 'fs';\nimport traverse from 'json-schema-traverse';\nimport get from 'lodash/get';\nimport path from 'path';\nimport imageProbe from 'probe-image-size';\nimport readChunk from 'read-chunk';\n\nimport { SchemerError, ValidationError } from './Error';\nimport { fieldPathToSchema, schemaPointerToFieldPath } from './Util';\n\ntype Options = {\n  allErrors?: boolean;\n  rootDir?: string;\n  verbose?: boolean;\n  format?: 'full' | 'empty'; //figure out later\n  metaValidation?: boolean;\n};\n\ntype Meta = {\n  asset?: boolean;\n  dimensions?: {\n    width: number;\n    height: number;\n  };\n  square?: boolean;\n  contentTypePattern?: string;\n  contentTypeHuman?: string;\n};\n\ntype AssetField = { fieldPath: string; data: string; meta: Meta };\n\nexport { SchemerError, ValidationError, ErrorCodes, ErrorCode } from './Error';\nexport default class Schemer {\n  options: Options;\n  ajv: Ajv.Ajv;\n  schema: object;\n  rootDir: string;\n  manualValidationErrors: ValidationError[];\n  // Schema is a JSON Schema object\n  constructor(schema: object, options: Options = {}) {\n    this.options = {\n      allErrors: true,\n      verbose: true,\n      format: 'full',\n      metaValidation: true,\n      ...options,\n    };\n\n    this.ajv = new Ajv(this.options);\n    this.schema = schema;\n    this.rootDir = this.options.rootDir || __dirname;\n    this.manualValidationErrors = [];\n  }\n\n  _formatAjvErrorMessage({\n    keyword,\n    dataPath,\n    params,\n    parentSchema,\n    data,\n    message,\n  }: Ajv.ErrorObject) {\n    const meta = parentSchema && (parentSchema as any).meta;\n    // This removes the \".\" in front of a fieldPath\n    dataPath = dataPath.slice(1);\n    switch (keyword) {\n      case 'additionalProperties': {\n        return new ValidationError({\n          errorCode: 'SCHEMA_ADDITIONAL_PROPERTY',\n          fieldPath: dataPath,\n          message: `should NOT have additional property '${(params as any).additionalProperty}'`,\n          data,\n          meta,\n        });\n      }\n      case 'required':\n        return new ValidationError({\n          errorCode: 'SCHEMA_MISSING_REQUIRED_PROPERTY',\n          fieldPath: dataPath,\n          message: `is missing required property '${(params as any).missingProperty}'`,\n          data,\n          meta,\n        });\n      case 'pattern': {\n        //@TODO Parse the message in a less hacky way. Perhaps for regex validation errors, embed the error message under the meta tag?\n        const regexHuman = meta?.regexHuman;\n        const regexErrorMessage = regexHuman\n          ? `'${dataPath}' should be a ${regexHuman[0].toLowerCase() + regexHuman.slice(1)}`\n          : `'${dataPath}' ${message}`;\n        return new ValidationError({\n          errorCode: 'SCHEMA_INVALID_PATTERN',\n          fieldPath: dataPath,\n          message: regexErrorMessage,\n          data,\n          meta,\n        });\n      }\n      default:\n        return new ValidationError({\n          errorCode: 'SCHEMA_VALIDATION_ERROR',\n          fieldPath: dataPath,\n          message: message || 'Validation error',\n          data,\n          meta,\n        });\n    }\n  }\n\n  getErrors(): ValidationError[] {\n    // Convert AJV JSONSchema errors to our ValidationErrors\n    let valErrors: ValidationError[] = [];\n    if (this.ajv.errors) {\n      valErrors = this.ajv.errors.map(e => this._formatAjvErrorMessage(e));\n    }\n    return [...valErrors, ...this.manualValidationErrors];\n  }\n\n  _throwOnErrors() {\n    // Clean error state after each validation\n    const errors = this.getErrors();\n    if (errors.length > 0) {\n      this.manualValidationErrors = [];\n      this.ajv.errors = [];\n      throw new SchemerError(errors);\n    }\n  }\n\n  async validateAll(data: any) {\n    await this._validateSchemaAsync(data);\n    await this._validateAssetsAsync(data);\n    this._throwOnErrors();\n  }\n\n  async validateAssetsAsync(data: any) {\n    await this._validateAssetsAsync(data);\n    this._throwOnErrors();\n  }\n\n  async validateSchemaAsync(data: any) {\n    await this._validateSchemaAsync(data);\n    this._throwOnErrors();\n  }\n\n  _validateSchemaAsync(data: any) {\n    this.ajv.validate(this.schema, data);\n  }\n\n  async _validateAssetsAsync(data: any) {\n    const assets: AssetField[] = [];\n    traverse(this.schema, { allKeys: true }, (subSchema, jsonPointer, a, b, c, d, property) => {\n      if (property && subSchema.meta && subSchema.meta.asset) {\n        const fieldPath = schemaPointerToFieldPath(jsonPointer);\n        assets.push({\n          fieldPath,\n          data: get(data, fieldPath),\n          meta: subSchema.meta,\n        });\n      }\n    });\n    await Promise.all(assets.map(this._validateAssetAsync.bind(this)));\n  }\n\n  async _validateImageAsync({ fieldPath, data, meta }: AssetField) {\n    if (meta && meta.asset && data) {\n      const { dimensions, square, contentTypePattern }: Meta = meta;\n      // filePath could be an URL\n      const filePath = path.resolve(this.rootDir, data);\n      try {\n        // NOTE(nikki): The '4100' below should be enough for most file types, though we\n        //              could probably go shorter....\n        //              http://www.garykessler.net/library/file_sigs.html\n        //  The metadata content for .jpgs might be located a lot farther down the file, so this\n        //  may pose problems in the future.\n        //  This cases on whether filePath is a remote URL or located on the machine\n        const probeResult = fs.existsSync(filePath)\n          ? imageProbe.sync(await readChunk(filePath, 0, 4100))\n          : await imageProbe(data, { useElectronNet: false });\n        if (!probeResult) {\n          return;\n        }\n\n        const { width, height, type, mime } = probeResult;\n\n        if (contentTypePattern && !mime.match(new RegExp(contentTypePattern))) {\n          this.manualValidationErrors.push(\n            new ValidationError({\n              errorCode: 'INVALID_CONTENT_TYPE',\n              fieldPath,\n              message: `field '${fieldPath}' should point to ${meta.contentTypeHuman} but the file at '${data}' has type ${type}`,\n              data,\n              meta,\n            })\n          );\n        }\n\n        if (dimensions && (dimensions.height !== height || dimensions.width !== width)) {\n          this.manualValidationErrors.push(\n            new ValidationError({\n              errorCode: 'INVALID_DIMENSIONS',\n              fieldPath,\n              message: `'${fieldPath}' should have dimensions ${dimensions.width}x${dimensions.height}, but the file at '${data}' has dimensions ${width}x${height}`,\n              data,\n              meta,\n            })\n          );\n        }\n\n        if (square && width !== height) {\n          this.manualValidationErrors.push(\n            new ValidationError({\n              errorCode: 'NOT_SQUARE',\n              fieldPath,\n              message: `image should be square, but the file at '${data}' has dimensions ${width}x${height}`,\n              data,\n              meta,\n            })\n          );\n        }\n      } catch (e) {\n        this.manualValidationErrors.push(\n          new ValidationError({\n            errorCode: 'INVALID_ASSET_URI',\n            fieldPath,\n            message: `cannot access file at '${data}'`,\n            data,\n            meta,\n          })\n        );\n      }\n    }\n  }\n\n  async _validateAssetAsync({ fieldPath, data, meta }: AssetField) {\n    if (meta && meta.asset && data) {\n      if (meta.contentTypePattern && meta.contentTypePattern.startsWith('^image')) {\n        await this._validateImageAsync({ fieldPath, data, meta });\n      }\n    }\n  }\n\n  async validateProperty(fieldPath: string, data: any) {\n    const subSchema = fieldPathToSchema(this.schema, fieldPath);\n    this.ajv.validate(subSchema, data);\n\n    if (subSchema.meta && subSchema.meta.asset) {\n      await this._validateAssetAsync({ fieldPath, data, meta: subSchema.meta });\n    }\n    this._throwOnErrors();\n  }\n\n  validateName(name: string) {\n    return this.validateProperty('name', name);\n  }\n\n  validateSlug(slug: string) {\n    return this.validateProperty('slug', slug);\n  }\n\n  validateSdkVersion(version: string) {\n    return this.validateProperty('sdkVersion', version);\n  }\n\n  validateIcon(iconPath: string) {\n    return this.validateProperty('icon', iconPath);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}