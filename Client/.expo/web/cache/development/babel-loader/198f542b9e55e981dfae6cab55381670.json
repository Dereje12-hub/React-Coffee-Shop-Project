{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDebugMode = void 0;\n\nvar getenv_1 = require(\"getenv\");\n\nvar is_wsl_1 = __importDefault(require(\"is-wsl\"));\n\nvar optimize_css_assets_webpack_plugin_1 = __importDefault(require(\"optimize-css-assets-webpack-plugin\"));\n\nvar postcss_safe_parser_1 = __importDefault(require(\"postcss-safe-parser\"));\n\nvar terser_webpack_plugin_1 = __importDefault(require(\"terser-webpack-plugin\"));\n\nfunction isDebugMode() {\n  return getenv_1.boolish('EXPO_WEB_DEBUG', false);\n}\n\nexports.isDebugMode = isDebugMode;\n\nfunction withOptimizations(webpackConfig) {\n  if (webpackConfig.mode !== 'production') {\n    return webpackConfig;\n  }\n\n  var shouldUseSourceMap = typeof webpackConfig.devtool === 'string';\n\n  var _isDebugMode = isDebugMode();\n\n  webpackConfig.optimization = _objectSpread(_objectSpread({}, webpackConfig.optimization || {}), {}, {\n    nodeEnv: false,\n    minimize: true,\n    minimizer: [new terser_webpack_plugin_1.default({\n      terserOptions: {\n        parse: {\n          ecma: 8\n        },\n        compress: {\n          warnings: _isDebugMode,\n          comparisons: false,\n          inline: 2\n        },\n        mangle: _isDebugMode ? false : {\n          safari10: true\n        },\n        output: {\n          ecma: 5,\n          comments: _isDebugMode,\n          ascii_only: true\n        }\n      },\n      parallel: !is_wsl_1.default,\n      cache: true,\n      sourceMap: shouldUseSourceMap\n    }), new optimize_css_assets_webpack_plugin_1.default({\n      cssProcessorOptions: {\n        parser: postcss_safe_parser_1.default,\n        map: shouldUseSourceMap ? {\n          inline: false,\n          annotation: true\n        } : false\n      }\n    })],\n    splitChunks: {\n      chunks: 'all',\n      name: false\n    },\n    runtimeChunk: true,\n    noEmitOnErrors: true\n  });\n  return webpackConfig;\n}\n\nexports.default = withOptimizations;","map":{"version":3,"sources":["../../src/addons/withOptimizations.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,oCAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oCAAA,CAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAQA,SAAgB,WAAhB,GAA2B;AACzB,SAAO,QAAA,CAAA,OAAA,CAAQ,gBAAR,EAA0B,KAA1B,CAAP;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAUA,SAAwB,iBAAxB,CAA0C,aAA1C,EAAyE;AACvE,MAAI,aAAa,CAAC,IAAd,KAAuB,YAA3B,EAAyC;AACvC,WAAO,aAAP;AACD;;AACD,MAAM,kBAAkB,GAAG,OAAO,aAAa,CAAC,OAArB,KAAiC,QAA5D;;AAEA,MAAM,YAAY,GAAG,WAAW,EAAhC;;AAEA,EAAA,aAAa,CAAC,YAAd,mCACM,aAAa,CAAC,YAAd,IAA8B,EADpC;AAEE,IAAA,OAAO,EAAE,KAFX;AAGE,IAAA,QAAQ,EAAE,IAHZ;AAIE,IAAA,SAAS,EAAE,CAET,IAAI,uBAAA,CAAA,OAAJ,CAAiB;AACf,MAAA,aAAa,EAAE;AACb,QAAA,KAAK,EAAE;AAML,UAAA,IAAI,EAAE;AAND,SADM;AASb,QAAA,QAAQ,EAAE;AACR,UAAA,QAAQ,EAAE,YADF;AAMR,UAAA,WAAW,EAAE,KANL;AAWR,UAAA,MAAM,EAAE;AAXA,SATG;AAsBb,QAAA,MAAM,EAAE,YAAY,GAChB,KADgB,GAEhB;AACE,UAAA,QAAQ,EAAE;AADZ,SAxBS;AA2Bb,QAAA,MAAM,EAAE;AACN,UAAA,IAAI,EAAE,CADA;AAEN,UAAA,QAAQ,EAAE,YAFJ;AAKN,UAAA,UAAU,EAAE;AALN;AA3BK,OADA;AAwCf,MAAA,QAAQ,EAAE,CAAC,QAAA,CAAA,OAxCI;AA0Cf,MAAA,KAAK,EAAE,IA1CQ;AA2Cf,MAAA,SAAS,EAAE;AA3CI,KAAjB,CAFS,EAgDT,IAAI,oCAAA,CAAA,OAAJ,CAA4B;AAC1B,MAAA,mBAAmB,EAAE;AACnB,QAAA,MAAM,EAAE,qBAAA,CAAA,OADW;AAEnB,QAAA,GAAG,EAAE,kBAAkB,GACnB;AAGE,UAAA,MAAM,EAAE,KAHV;AAME,UAAA,UAAU,EAAE;AANd,SADmB,GASnB;AAXe;AADK,KAA5B,CAhDS,CAJb;AAuEE,IAAA,WAAW,EAAE;AACX,MAAA,MAAM,EAAE,KADG;AAEX,MAAA,IAAI,EAAE;AAFK,KAvEf;AA6EE,IAAA,YAAY,EAAE,IA7EhB;AAgFE,IAAA,cAAc,EAAE;AAhFlB;AAmFA,SAAO,aAAP;AACD;;AA5FD,OAAA,CAAA,OAAA,GAAA,iBAAA","sourcesContent":["import { boolish } from 'getenv';\nimport isWsl from 'is-wsl';\nimport OptimizeCSSAssetsPlugin from 'optimize-css-assets-webpack-plugin';\nimport safePostCssParser from 'postcss-safe-parser';\nimport TerserPlugin from 'terser-webpack-plugin';\n\nimport { AnyConfiguration } from '../types';\n\n/**\n * Returns `true` if the Expo web environment variable enabled.\n * @internal\n */\nexport function isDebugMode(): boolean {\n  return boolish('EXPO_WEB_DEBUG', false);\n}\n\n/**\n * Add the minifier and other optimizations for production builds.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @category addons\n */\nexport default function withOptimizations(webpackConfig: AnyConfiguration): AnyConfiguration {\n  if (webpackConfig.mode !== 'production') {\n    return webpackConfig;\n  }\n  const shouldUseSourceMap = typeof webpackConfig.devtool === 'string';\n\n  const _isDebugMode = isDebugMode();\n\n  webpackConfig.optimization = {\n    ...(webpackConfig.optimization || {}),\n    nodeEnv: false,\n    minimize: true,\n    minimizer: [\n      // This is only used in production mode\n      new TerserPlugin({\n        terserOptions: {\n          parse: {\n            // we want terser to parse ecma 8 code. However, we don't want it\n            // to apply any minfication steps that turns valid ecma 5 code\n            // into invalid ecma 5 code. This is why the 'compress' and 'output'\n            // sections only apply transformations that are ecma 5 safe\n            // https://github.com/facebook/create-react-app/pull/4234\n            ecma: 8,\n          },\n          compress: {\n            warnings: _isDebugMode,\n            // Disabled because of an issue with Uglify breaking seemingly valid code:\n            // https://github.com/facebook/create-react-app/issues/2376\n            // Pending further investigation:\n            // https://github.com/mishoo/UglifyJS2/issues/2011\n            comparisons: false,\n            // Disabled because of an issue with Terser breaking valid code:\n            // https://github.com/facebook/create-react-app/issues/5250\n            // Pending futher investigation:\n            // https://github.com/terser-js/terser/issues/120\n            inline: 2,\n          },\n          mangle: _isDebugMode\n            ? false\n            : {\n                safari10: true,\n              },\n          output: {\n            ecma: 5,\n            comments: _isDebugMode,\n            // Turned on because emoji and regex is not minified properly using default\n            // https://github.com/facebook/create-react-app/issues/2488\n            ascii_only: true,\n          },\n        },\n        // Use multi-process parallel running to improve the build speed\n        // Default number of concurrent runs: os.cpus().length - 1\n        // Disabled on WSL (Windows Subsystem for Linux) due to an issue with Terser\n        // https://github.com/webpack-contrib/terser-webpack-plugin/issues/21\n        parallel: !isWsl,\n        // Enable file caching\n        cache: true,\n        sourceMap: shouldUseSourceMap,\n      }),\n      // This is only used in production mode\n      new OptimizeCSSAssetsPlugin({\n        cssProcessorOptions: {\n          parser: safePostCssParser,\n          map: shouldUseSourceMap\n            ? {\n                // `inline: false` forces the sourcemap to be output into a\n                // separate file\n                inline: false,\n                // `annotation: true` appends the sourceMappingURL to the end of\n                // the css file, helping the browser find the sourcemap\n                annotation: true,\n              }\n            : false,\n        },\n      }),\n    ],\n    // Automatically split vendor and commons\n    // https://twitter.com/wSokra/status/969633336732905474\n    // https://medium.com/webpack/webpack-4-code-splitting-chunk-graph-and-the-splitchunks-optimization-be739a861366\n    splitChunks: {\n      chunks: 'all',\n      name: false,\n    },\n    // Keep the runtime chunk separated to enable long term caching\n    // https://twitter.com/wSokra/status/969679223278505985\n    runtimeChunk: true,\n\n    // Skip the emitting phase whenever there are errors while compiling. This ensures that no erroring assets are emitted.\n    noEmitOnErrors: true,\n  };\n\n  return webpackConfig;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}