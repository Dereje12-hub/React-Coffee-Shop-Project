{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeAssetResolver = void 0;\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar util_1 = require(\"util\");\n\nvar escapeStringRegexp_1 = require(\"../../utils/escapeStringRegexp\");\n\nvar NativeAssetResolver = function () {\n  function NativeAssetResolver(config, compiler) {\n    _classCallCheck(this, NativeAssetResolver);\n\n    this.config = config;\n    this.compiler = compiler;\n\n    if (!this.config.test) {\n      this.config.test = new RegExp(\".(\" + this.config.assetExtensions.join('|') + \")$\");\n    }\n  }\n\n  _createClass(NativeAssetResolver, [{\n    key: \"isValidPath\",\n    value: function isValidPath(requestPath) {\n      return typeof requestPath === 'string' && this.config.test.test(requestPath);\n    }\n  }, {\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var _this$config = this.config,\n          platforms = _this$config.platforms,\n          assetExtensions = _this$config.assetExtensions;\n      var logger = this.compiler.getInfrastructureLogger('NativeAssetResolver');\n      var readdirAsync = util_1.promisify(resolver.fileSystem.readdir.bind(resolver.fileSystem));\n      resolver.getHook('file').tapAsync('NativeAssetResolver', function _callee(request, _context, callback) {\n        var _a, requestPath, files, dir, basename, name, type, resolved, map, key, resolvedFile;\n\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                requestPath = request.path;\n\n                if (_this.isValidPath(requestPath)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", callback());\n\n              case 3:\n                logger.debug('Processing asset:', requestPath);\n                dir = path_1.default.dirname(requestPath);\n                _context2.prev = 5;\n                _context2.next = 8;\n                return _regeneratorRuntime.awrap(readdirAsync(dir));\n\n              case 8:\n                files = _context2.sent.filter(function (result) {\n                  return typeof result === 'string';\n                });\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](5);\n                logger.error(\"Failed to read Webpack fs directory: \" + dir, _context2.t0);\n                return _context2.abrupt(\"return\", callback());\n\n              case 15:\n                basename = path_1.default.basename(requestPath);\n                name = basename.replace(/\\.[^.]+$/, '');\n                type = path_1.default.extname(requestPath).substring(1);\n                resolved = files.includes(basename) ? requestPath : undefined;\n\n                if (resolved) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                map = NativeAssetResolver.collectScales(files, {\n                  name: name,\n                  type: type,\n                  platforms: platforms,\n                  assetExtensions: assetExtensions\n                });\n                key = map['@1x'] ? '@1x' : Object.keys(map).sort(function (a, b) {\n                  return Number(a.replace(/[^\\d.]/g, '')) - Number(b.replace(/[^\\d.]/g, ''));\n                })[0];\n                resolved = ((_a = map[key]) === null || _a === void 0 ? void 0 : _a.name) ? path_1.default.resolve(path_1.default.dirname(requestPath), map[key].name) : undefined;\n\n                if (resolved) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                logger.error('Cannot resolve:', requestPath, {\n                  files: files,\n                  scales: map\n                });\n                callback();\n                return _context2.abrupt(\"return\");\n\n              case 27:\n                resolvedFile = _objectSpread(_objectSpread({}, request), {}, {\n                  path: resolved,\n                  relativePath: request.relativePath && resolver.join(request.relativePath, resolved),\n                  file: true\n                });\n                logger.debug('Asset resolved:', requestPath, '->', resolved);\n                callback(null, resolvedFile);\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[5, 11]], Promise);\n      });\n    }\n  }], [{\n    key: \"collectScales\",\n    value: function collectScales(files, _ref) {\n      var name = _ref.name,\n          type = _ref.type,\n          platforms = _ref.platforms,\n          assetExtensions = _ref.assetExtensions;\n      var platformRegexp = platforms.join('|');\n      var regex = new RegExp(\"^(\" + assetExtensions.join('|') + \")$\").test(type) ? new RegExp(\"^\" + escapeStringRegexp_1.escapeStringRegexp(name) + \"(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(\" + platformRegexp + \"))?\\\\.\" + type + \"$\") : new RegExp(\"^\" + escapeStringRegexp_1.escapeStringRegexp(name) + \"(\\\\.(\" + platformRegexp + \"))?\\\\.\" + type + \"$\");\n\n      var priority = function priority(queryPlatform) {\n        return platforms.reverse().indexOf(queryPlatform);\n      };\n\n      var output = {};\n\n      for (var _iterator = _createForOfIteratorHelperLoose(files), _step; !(_step = _iterator()).done;) {\n        var file = _step.value;\n        var match = regex.exec(file);\n\n        if (match) {\n          var _match = _slicedToArray(match, 5),\n              scale = _match[1],\n              platform = _match[4];\n\n          scale = scale || '@1x';\n\n          if (!output[scale] || priority(platform) > priority(output[scale].platform)) {\n            output[scale] = {\n              platform: platform,\n              name: file\n            };\n          }\n        }\n      }\n\n      return output;\n    }\n  }]);\n\n  return NativeAssetResolver;\n}();\n\nexports.NativeAssetResolver = NativeAssetResolver;","map":{"version":3,"sources":["../../../src/plugins/NativeAssetsPlugin/NativeAssetResolver.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2021 Callstack, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on https://github.com/callstack/repack/blob/3c1e059/packages/repack/src/webpack/plugins/AssetsPlugin/AssetResolver.ts\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport webpack from 'webpack';\n\nimport { escapeStringRegexp } from '../../utils/escapeStringRegexp';\n\nexport interface NativeAssetResolverConfig {\n  /**\n   * Override default test RegExp. If the asset matches the `test` RegExp, it will be process\n   * by the custom React Native asset resolver. Otherwise, the resolution will process normally and\n   * the asset will be handled by Webpack.\n   */\n  test?: RegExp;\n  /** Target application platform. */\n  platforms: string[];\n\n  /** Extensions to collect */\n  assetExtensions: string[];\n}\n\nexport interface CollectedScales {\n  [key: string]: {\n    platform: string;\n    name: string;\n  };\n}\n\ninterface CollectOptions {\n  name: string;\n  /**\n   * `['ios', 'native']`\n   */\n  platforms: string[];\n  type: string;\n  assetExtensions: string[];\n}\n\ntype Resolver = {\n  fileSystem: typeof fs;\n  getHook: (\n    type: string\n  ) => {\n    tapAsync: (type: string, callback: (request: any, context: any, callback: any) => void) => void;\n  };\n};\n\nexport class NativeAssetResolver {\n  static collectScales(\n    files: string[],\n    { name, type, platforms, assetExtensions }: CollectOptions\n  ): CollectedScales {\n    const platformRegexp = platforms.join('|');\n    const regex = new RegExp(`^(${assetExtensions.join('|')})$`).test(type)\n      ? new RegExp(\n          `^${escapeStringRegexp(name)}(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${platformRegexp}))?\\\\.${type}$`\n        )\n      : new RegExp(`^${escapeStringRegexp(name)}(\\\\.(${platformRegexp}))?\\\\.${type}$`);\n\n    const priority = (queryPlatform: string) => platforms.reverse().indexOf(queryPlatform);\n\n    // Build a map of files according to the scale\n    const output: CollectedScales = {};\n    for (const file of files) {\n      const match = regex.exec(file);\n      if (match) {\n        let [, scale, , , platform] = match;\n        scale = scale || '@1x';\n        if (!output[scale] || priority(platform) > priority(output[scale].platform)) {\n          output[scale] = { platform, name: file };\n        }\n      }\n    }\n\n    return output;\n  }\n\n  constructor(\n    public readonly config: NativeAssetResolverConfig,\n    private compiler: webpack.Compiler\n  ) {\n    if (!this.config.test) {\n      // Like: `/.(ios|native)$/`\n      this.config.test = new RegExp(`.(${this.config.assetExtensions.join('|')})$`);\n    }\n  }\n\n  private isValidPath(requestPath: string): requestPath is string {\n    return typeof requestPath === 'string' && this.config.test!.test(requestPath);\n  }\n\n  apply(resolver: Resolver) {\n    const { platforms, assetExtensions } = this.config;\n    const logger = this.compiler.getInfrastructureLogger('NativeAssetResolver');\n    const readdirAsync = promisify(resolver.fileSystem.readdir.bind(resolver.fileSystem));\n\n    resolver\n      .getHook('file')\n      .tapAsync('NativeAssetResolver', async (request, _context, callback) => {\n        const requestPath = request.path;\n        if (!this.isValidPath(requestPath)) {\n          return callback();\n        }\n\n        logger.debug('Processing asset:', requestPath);\n\n        let files: string[];\n        const dir = path.dirname(requestPath);\n        try {\n          files = (await readdirAsync(dir)).filter(result => typeof result === 'string');\n        } catch (error) {\n          logger.error(`Failed to read Webpack fs directory: ${dir}`, error);\n          return callback();\n        }\n\n        const basename = path.basename(requestPath);\n        const name = basename.replace(/\\.[^.]+$/, '');\n        const type = path.extname(requestPath).substring(1);\n        let resolved = files.includes(basename) ? requestPath : undefined;\n\n        if (!resolved) {\n          const map = NativeAssetResolver.collectScales(files, {\n            name,\n            type,\n            platforms,\n            assetExtensions,\n          });\n          const key = map['@1x']\n            ? '@1x'\n            : Object.keys(map).sort(\n                (a, b) => Number(a.replace(/[^\\d.]/g, '')) - Number(b.replace(/[^\\d.]/g, ''))\n              )[0];\n\n          resolved = map[key]?.name\n            ? path.resolve(path.dirname(requestPath), map[key].name)\n            : undefined;\n\n          if (!resolved) {\n            logger.error('Cannot resolve:', requestPath, {\n              files,\n              scales: map,\n            });\n            callback();\n            return;\n          }\n        }\n\n        const resolvedFile = {\n          ...request,\n          path: resolved,\n          // @ts-ignore\n          relativePath: request.relativePath && resolver.join(request.relativePath, resolved),\n          file: true,\n        };\n\n        logger.debug('Asset resolved:', requestPath, '->', resolved);\n\n        callback(null, resolvedFile);\n      });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}