{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getScheme = getScheme;\nexports.setScheme = setScheme;\nexports.appendScheme = appendScheme;\nexports.removeScheme = removeScheme;\nexports.hasScheme = hasScheme;\nexports.getSchemesFromPlist = getSchemesFromPlist;\nexports.withScheme = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withScheme = (0, _iosPlugins().createInfoPlistPlugin)(setScheme, 'withScheme');\nexports.withScheme = withScheme;\n\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n\n  return [];\n}\n\nfunction setScheme(config, infoPlist) {\n  var _config$ios, _config$ios2;\n\n  var scheme = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$ios = config.ios) !== null && _config$ios !== void 0 ? _config$ios : {})));\n\n  if ((_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleURLTypes: [{\n      CFBundleURLSchemes: scheme\n    }]\n  });\n}\n\nfunction appendScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleURLTypes: [].concat(_toConsumableArray(existingSchemes !== null && existingSchemes !== void 0 ? existingSchemes : []), [{\n      CFBundleURLSchemes: [scheme]\n    }])\n  });\n}\n\nfunction removeScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(function (bundleUrlType) {\n    var index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n\n    return bundleUrlType;\n  }).filter(Boolean);\n  return infoPlist;\n}\n\nfunction hasScheme(scheme, infoPlist) {\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  if (!Array.isArray(existingSchemes)) return false;\n  return existingSchemes.some(function (_ref) {\n    var schemes = _ref.CFBundleURLSchemes;\n    return Array.isArray(schemes) ? schemes.includes(scheme) : false;\n  });\n}\n\nfunction getSchemesFromPlist(infoPlist) {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce(function (schemes, _ref2) {\n      var CFBundleURLSchemes = _ref2.CFBundleURLSchemes;\n\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [].concat(_toConsumableArray(schemes), _toConsumableArray(CFBundleURLSchemes));\n      }\n\n      return schemes;\n    }, []);\n  }\n\n  return [];\n}","map":{"version":3,"sources":["../../src/ios/Scheme.ts"],"names":["withScheme","Array","config","validate","value","scheme","getScheme","CFBundleURLTypes","CFBundleURLSchemes","existingSchemes","infoPlist","bundleUrlType","index","schemes"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, URLScheme } from './IosConfig.types';\n\nexport const withScheme = createInfoPlistPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Partial<Pick<ExpoConfig, 'scheme' | 'ios'>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: ios.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.ios ?? {}),\n  ];\n  // Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.ios?.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [{ CFBundleURLSchemes: scheme }],\n  };\n}\n\n// TODO: update this to be idempotent!\nexport function appendScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [\n      ...(existingSchemes ?? []),\n      {\n        CFBundleURLSchemes: [scheme],\n      },\n    ],\n  };\n}\n\nexport function removeScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  // No need to remove if we don't have any\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(bundleUrlType => {\n    const index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean) as URLScheme[];\n\n  return infoPlist;\n}\n\nexport function hasScheme(scheme: string, infoPlist: InfoPlist): boolean {\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  if (!Array.isArray(existingSchemes)) return false;\n\n  return existingSchemes.some(({ CFBundleURLSchemes: schemes }: any) =>\n    Array.isArray(schemes) ? schemes.includes(scheme) : false\n  );\n}\n\nexport function getSchemesFromPlist(infoPlist: InfoPlist): string[] {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce<string[]>((schemes, { CFBundleURLSchemes }) => {\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [...schemes, ...CFBundleURLSchemes];\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}\n"]},"metadata":{},"sourceType":"script"}