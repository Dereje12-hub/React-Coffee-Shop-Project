{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withConfigPlugins = void 0;\n\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Serialize() {\n  var data = require(\"../Serialize\");\n\n  _Serialize = function _Serialize() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withConfigPlugins = function withConfigPlugins(config, skipPlugins) {\n  var _config$plugins;\n\n  if (!Array.isArray(config.plugins) || !((_config$plugins = config.plugins) !== null && _config$plugins !== void 0 && _config$plugins.length)) {\n    return config;\n  }\n\n  if (!skipPlugins) {\n    config = (0, _configPlugins().withPlugins)(config, config.plugins);\n  } else {\n    delete config.plugins;\n  }\n\n  return (0, _Serialize().serializeAfterStaticPlugins)(config);\n};\n\nexports.withConfigPlugins = withConfigPlugins;","map":{"version":3,"sources":["../../src/plugins/withConfigPlugins.ts"],"names":["withConfigPlugins","Array","config"],"mappings":";;;;;;;AAAA,SAAA,cAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAAA,EAAA,cAAA,GAAA,0BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,SAAA,UAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,gBAAA;;AAAA,EAAA,UAAA,GAAA,sBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAQO,IAAMA,iBAAwC,GAAG,SAA3CA,iBAA2C,CAAA,MAAA,EAAA,WAAA,EAAyB;AAAA,MAAA,eAAA;;AAE/E,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAcC,MAAM,CAArB,OAACD,CAAD,IAAkC,EAAA,CAAA,eAAA,GAACC,MAAM,CAAP,OAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,IAACA,eAAAA,CAAvC,MAAsC,CAAtC,EAA+D;AAC7D,WAAA,MAAA;AACD;;AACD,MAAI,CAAJ,WAAA,EAAkB;AAGhBA,IAAAA,MAAM,GAAG,CAAA,GAAA,cAAA,GAAA,WAAA,EAAA,MAAA,EAAoBA,MAAM,CAAnCA,OAAS,CAATA;AAHF,GAAA,MAIO;AAEL,WAAOA,MAAM,CAAb,OAAA;AAX6E;;AAc/E,SAAO,CAAA,GAAA,UAAA,GAAA,2BAAA,EAAP,MAAO,CAAP;AAdK,CAAA","sourcesContent":["import { ConfigPlugin, withPlugins } from '@expo/config-plugins';\n\nimport { serializeAfterStaticPlugins } from '../Serialize';\n\n/**\n * Resolves static plugins array as config plugin functions.\n *\n * @param config\n * @param projectRoot\n */\nexport const withConfigPlugins: ConfigPlugin<boolean> = (config, skipPlugins) => {\n  // @ts-ignore: plugins not on config type yet -- TODO\n  if (!Array.isArray(config.plugins) || !config.plugins?.length) {\n    return config;\n  }\n  if (!skipPlugins) {\n    // Resolve and evaluate plugins\n    // @ts-ignore: TODO: add plugins to the config schema\n    config = withPlugins(config, config.plugins);\n  } else {\n    // Delete the plugins array in case someone added functions or other values which cannot be automatically serialized.\n    delete config.plugins;\n  }\n  // plugins aren't serialized by default, serialize the plugins after resolving them.\n  return serializeAfterStaticPlugins(config);\n};\n"]},"metadata":{},"sourceType":"script"}