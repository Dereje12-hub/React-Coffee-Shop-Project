{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildSourceFile = createBuildSourceFile;\nexports.withBuildSourceFile = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withBuildSourceFile = function withBuildSourceFile(config, _ref) {\n  var filePath = _ref.filePath,\n      contents = _ref.contents,\n      overwrite = _ref.overwrite;\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    var projectName = (0, _Xcodeproj().getProjectName)(config.modRequest.projectRoot);\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: _path().default.join(projectName, filePath),\n      overwrite: overwrite\n    });\n    return config;\n  });\n};\n\nexports.withBuildSourceFile = withBuildSourceFile;\n\nfunction createBuildSourceFile(_ref2) {\n  var project = _ref2.project,\n      nativeProjectRoot = _ref2.nativeProjectRoot,\n      filePath = _ref2.filePath,\n      fileContents = _ref2.fileContents,\n      overwrite = _ref2.overwrite;\n\n  var absoluteFilePath = _path().default.join(nativeProjectRoot, filePath);\n\n  if (overwrite || !_fsExtra().default.existsSync(absoluteFilePath)) {\n    _fsExtra().default.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  var groupName = _path().default.dirname(filePath);\n\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addBuildSourceFileToGroup)({\n      filepath: filePath,\n      groupName: groupName,\n      project: project\n    });\n  }\n\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/XcodeProjectFile.ts"],"names":["withBuildSourceFile","overwrite","config","projectName","createBuildSourceFile","project","nativeProjectRoot","fileContents","filePath","path","absoluteFilePath","fs","groupName","filepath"],"mappings":";;;;;;;;AAAA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,KAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAAA,EAAA,KAAA,GAAA,iBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,UAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,UAAA,GAAA,sBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAWO,IAAMA,mBAIX,GAAG,SAJQA,mBAIR,CAAA,MAAA,QAA+C;AAAA,MAAtC,QAAsC,QAAtC,QAAsC;AAAA,MAAtC,QAAsC,QAAtC,QAAsC;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAClD,SAAO,CAAA,GAAA,WAAA,GAAA,gBAAA,EAAA,MAAA,EAAyBC,UAAAA,MAAM,EAAI;AACxC,QAAMC,WAAW,GAAG,CAAA,GAAA,UAAA,GAAA,cAAA,EAAeD,MAAM,CAANA,UAAAA,CAAnC,WAAoB,CAApB;AAEAA,IAAAA,MAAM,CAANA,UAAAA,GAAoBE,qBAAqB,CAAC;AACxCC,MAAAA,OAAO,EAAEH,MAAM,CADyB,UAAA;AAExCI,MAAAA,iBAAiB,EAAEJ,MAAM,CAANA,UAAAA,CAFqB,mBAAA;AAGxCK,MAAAA,YAAY,EAH4B,QAAA;AAIxCC,MAAAA,QAAQ,EAAEC,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,WAAAA,EAJ8B,QAI9BA,CAJ8B;AAKxCR,MAAAA,SAAAA,EAAAA;AALwC,KAAD,CAAzCC;AAOA,WAAA,MAAA;AAVF,GAAO,CAAP;AALK,CAAA;;;;AA2BA,SAAA,qBAAA,QAYU;AAAA,MAZqB,OAYrB,SAZqB,OAYrB;AAAA,MAZqB,iBAYrB,SAZqB,iBAYrB;AAAA,MAZqB,QAYrB,SAZqB,QAYrB;AAAA,MAZqB,YAYrB,SAZqB,YAYrB;AAAA,MAPfD,SAOe,SAPfA,SAOe;;AACf,MAAMS,gBAAgB,GAAGD,KAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAAAA,iBAAAA,EAAzB,QAAyBA,CAAzB;;AACA,MAAIR,SAAS,IAAI,CAACU,QAAAA,GAAAA,OAAAA,CAAAA,UAAAA,CAAlB,gBAAkBA,CAAlB,EAAmD;AAEjDA,IAAAA,QAAAA,GAAAA,OAAAA,CAAAA,aAAAA,CAAAA,gBAAAA,EAAAA,YAAAA,EAAAA,MAAAA;AAJa;;AAQf,MAAMC,SAAS,GAAGH,KAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CARH,QAQGA,CAAlB;;AAGA,MAAI,CAACJ,OAAO,CAAPA,OAAAA,CAAL,QAAKA,CAAL,EAAgC;AAC9BA,IAAAA,OAAO,GAAG,CAAA,GAAA,UAAA,GAAA,yBAAA,EAA0B;AAClCQ,MAAAA,QAAQ,EAD0B,QAAA;AAElCD,MAAAA,SAFkC,EAElCA,SAFkC;AAGlCP,MAAAA,OAAAA,EAAAA;AAHkC,KAA1B,CAAVA;AAKD;;AACD,SAAA,OAAA;AACD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addBuildSourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\n/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */\nexport const withBuildSourceFile: ConfigPlugin<{\n  filePath: string;\n  contents: string;\n  overwrite?: boolean;\n}> = (config, { filePath, contents, overwrite }) => {\n  return withXcodeProject(config, config => {\n    const projectName = getProjectName(config.modRequest.projectRoot);\n\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, filePath),\n      overwrite,\n    });\n    return config;\n  });\n};\n\n/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */\nexport function createBuildSourceFile({\n  project,\n  nativeProjectRoot,\n  filePath,\n  fileContents,\n  overwrite,\n}: {\n  project: XcodeProject;\n  nativeProjectRoot: string;\n  filePath: string;\n  fileContents: string;\n  overwrite?: boolean;\n}): XcodeProject {\n  const absoluteFilePath = path.join(nativeProjectRoot, filePath);\n  if (overwrite || !fs.existsSync(absoluteFilePath)) {\n    // Create the file\n    fs.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  // `myapp`\n  const groupName = path.dirname(filePath);\n\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addBuildSourceFileToGroup({\n      filepath: filePath,\n      groupName,\n      project,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}