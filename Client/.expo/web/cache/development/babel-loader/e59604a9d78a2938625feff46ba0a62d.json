{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectName = getProjectName;\nexports.resolvePathOrProject = resolvePathOrProject;\nexports.sanitizedName = sanitizedName;\nexports.getHackyProjectName = getHackyProjectName;\nexports.addResourceFileToGroup = addResourceFileToGroup;\nexports.addBuildSourceFileToGroup = addBuildSourceFileToGroup;\nexports.addFileToGroupAndLink = addFileToGroupAndLink;\nexports.getApplicationNativeTarget = getApplicationNativeTarget;\nexports.addFramework = addFramework;\nexports.ensureGroupRecursively = ensureGroupRecursively;\nexports.getPbxproj = getPbxproj;\nexports.getProductName = getProductName;\nexports.getProjectSection = getProjectSection;\nexports.getXCConfigurationListEntries = getXCConfigurationListEntries;\nexports.getBuildConfigurationsForListId = getBuildConfigurationsForListId;\nexports.getBuildConfigurationForListIdAndName = getBuildConfigurationForListIdAndName;\nexports.isBuildConfig = isBuildConfig;\nexports.isNotTestHost = isNotTestHost;\nexports.isNotComment = isNotComment;\nexports.unquote = unquote;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n\n  _slugify = function _slugify() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _pbxFile() {\n  var data = _interopRequireDefault(require(\"xcode/lib/pbxFile\"));\n\n  _pbxFile = function _pbxFile() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"../Paths\"));\n\n  Paths = function Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getProjectName(projectRoot) {\n  var sourceRoot = Paths().getSourceRoot(projectRoot);\n  return _path().default.basename(sourceRoot);\n}\n\nfunction resolvePathOrProject(projectRootOrProject) {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch (_unused) {\n      return null;\n    }\n  }\n\n  return projectRootOrProject;\n}\n\nfunction sanitizedName(name) {\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects((0, _slugify().default)(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name) {\n  return name.replace(/[\\W_]+/g, '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\n\nfunction getHackyProjectName(projectRoot, config) {\n  try {\n    return getProjectName(projectRoot);\n  } catch (_unused2) {\n    var projectName = config.name;\n    (0, _assert().default)(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup(_ref) {\n  var filepath = _ref.filepath,\n      group = _ref.group;\n  var file = new (_pbxFile().default)(filepath);\n  var conflictingFile = group.children.find(function (child) {\n    return child.comment === file.basename;\n  });\n\n  if (conflictingFile) {\n    return null;\n  }\n\n  return file;\n}\n\nfunction addResourceFileToGroup(_ref2) {\n  var filepath = _ref2.filepath,\n      groupName = _ref2.groupName,\n      isBuildFile = _ref2.isBuildFile,\n      project = _ref2.project,\n      verbose = _ref2.verbose;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    addFileToProject: function addFileToProject(_ref3) {\n      var project = _ref3.project,\n          file = _ref3.file;\n      project.addToPbxFileReferenceSection(file);\n\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n\n      project.addToPbxResourcesBuildPhase(file);\n    }\n  });\n}\n\nfunction addBuildSourceFileToGroup(_ref4) {\n  var filepath = _ref4.filepath,\n      groupName = _ref4.groupName,\n      project = _ref4.project,\n      verbose = _ref4.verbose,\n      targetUuid = _ref4.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    addFileToProject: function addFileToProject(_ref5) {\n      var project = _ref5.project,\n          file = _ref5.file;\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    }\n  });\n}\n\nfunction addFileToGroupAndLink(_ref6) {\n  var filepath = _ref6.filepath,\n      groupName = _ref6.groupName,\n      project = _ref6.project,\n      verbose = _ref6.verbose,\n      addFileToProject = _ref6.addFileToProject,\n      targetUuid = _ref6.targetUuid;\n  var group = pbxGroupByPathOrAssert(project, groupName);\n  var file = createProjectFileForGroup({\n    filepath: filepath,\n    group: group\n  });\n\n  if (!file) {\n    if (verbose) {\n      (0, _warnings().addWarningIOS)('ios-xcode-project', \"Skipped adding duplicate file \\\"\" + filepath + \"\\\" to PBXGroup named \\\"\" + groupName + \"\\\"\");\n    }\n\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget === null || applicationNativeTarget === void 0 ? void 0 : applicationNativeTarget.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  addFileToProject({\n    project: project,\n    file: file\n  });\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename\n  });\n  return project;\n}\n\nfunction getApplicationNativeTarget(_ref7) {\n  var project = _ref7.project,\n      projectName = _ref7.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  (0, _assert().default)(applicationNativeTarget, \"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");\n  (0, _assert().default)(String(applicationNativeTarget.target.name) === projectName, \"Application native target name mismatch. Expected \" + projectName + \", but found \" + applicationNativeTarget.target.name + \".\");\n  return applicationNativeTarget;\n}\n\nfunction addFramework(_ref8) {\n  var project = _ref8.project,\n      projectName = _ref8.projectName,\n      framework = _ref8.framework;\n  var target = getApplicationNativeTarget({\n    project: project,\n    projectName: projectName\n  });\n  return project.addFramework(framework, {\n    target: target.uuid\n  });\n}\n\nfunction splitPath(path) {\n  return path.split('/');\n}\n\nvar findGroup = function findGroup(group, name) {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(function (group) {\n    return group.comment === name;\n  });\n};\n\nfunction findGroupInsideGroup(project, group, name) {\n  var foundGroup = findGroup(group, name);\n\n  if (foundGroup) {\n    var _project$getPBXGroupB;\n\n    return (_project$getPBXGroupB = project.getPBXGroupByKey(foundGroup.value)) !== null && _project$getPBXGroupB !== void 0 ? _project$getPBXGroupB : null;\n  }\n\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project, path) {\n  var _project$getFirstProj = project.getFirstProject(),\n      firstProject = _project$getFirstProj.firstProject;\n\n  var group = project.getPBXGroupByKey(firstProject.mainGroup);\n  var components = splitPath(path);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(components), _step; !(_step = _iterator()).done;) {\n    var name = _step.value;\n    var nextGroup = findGroupInsideGroup(project, group, name);\n\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(\"Xcode PBXGroup with name \\\"\" + path + \"\\\" could not be found in the Xcode project.\");\n  }\n\n  return group;\n}\n\nfunction ensureGroupRecursively(project, filepath) {\n  var _topMostGroup;\n\n  var components = splitPath(filepath);\n\n  var hasChild = function hasChild(group, name) {\n    return group.children.find(function (_ref9) {\n      var comment = _ref9.comment;\n      return comment === name;\n    });\n  };\n\n  var _project$getFirstProj2 = project.getFirstProject(),\n      firstProject = _project$getFirstProj2.firstProject;\n\n  var topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(components), _step2; !(_step2 = _iterator2()).done;) {\n    var pathComponent = _step2.value;\n\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"')\n      });\n    }\n\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n\n  return (_topMostGroup = topMostGroup) !== null && _topMostGroup !== void 0 ? _topMostGroup : null;\n}\n\nfunction getPbxproj(projectRoot) {\n  var projectPath = Paths().getPBXProjectPath(projectRoot);\n\n  var project = _xcode().default.project(projectPath);\n\n  project.parseSync();\n  return project;\n}\n\nfunction getProductName(project) {\n  var productName = '$(TARGET_NAME)';\n\n  try {\n    productName = project.productName;\n  } catch (_unused3) {}\n\n  if (productName === '$(TARGET_NAME)') {\n    var _project$getFirstTarg, _project$getFirstTarg2;\n\n    var targetName = (_project$getFirstTarg = project.getFirstTarget()) === null || _project$getFirstTarg === void 0 ? void 0 : (_project$getFirstTarg2 = _project$getFirstTarg.firstTarget) === null || _project$getFirstTarg2 === void 0 ? void 0 : _project$getFirstTarg2.productName;\n    productName = targetName !== null && targetName !== void 0 ? targetName : productName;\n  }\n\n  return productName;\n}\n\nfunction getProjectSection(project) {\n  return project.pbxProjectSection();\n}\n\nfunction getXCConfigurationListEntries(project) {\n  var lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nfunction getBuildConfigurationsForListId(project, configurationListId) {\n  var configurationListEntries = getXCConfigurationListEntries(project);\n\n  var _configurationListEnt = configurationListEntries.find(function (_ref10) {\n    var _ref11 = _slicedToArray(_ref10, 1),\n        key = _ref11[0];\n\n    return key === configurationListId;\n  }),\n      _configurationListEnt2 = _slicedToArray(_configurationListEnt, 2),\n      configurationList = _configurationListEnt2[1];\n\n  var buildConfigurations = configurationList.buildConfigurations.map(function (i) {\n    return i.value;\n  });\n  return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 1),\n        key = _ref13[0];\n\n    return buildConfigurations.includes(key);\n  });\n}\n\nfunction getBuildConfigurationForListIdAndName(project, _ref14) {\n  var configurationListId = _ref14.configurationListId,\n      buildConfiguration = _ref14.buildConfiguration;\n  var xcBuildConfigurationEntry = getBuildConfigurationsForListId(project, configurationListId).find(function (i) {\n    return i[1].name === buildConfiguration;\n  });\n\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\"Build configuration '\" + buildConfiguration + \"' does not exist in list with id '\" + configurationListId + \"'\");\n  }\n\n  return xcBuildConfigurationEntry;\n}\n\nfunction isBuildConfig(_ref15) {\n  var _ref16 = _slicedToArray(_ref15, 2),\n      sectionItem = _ref16[1];\n\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nfunction isNotTestHost(_ref17) {\n  var _ref18 = _slicedToArray(_ref17, 2),\n      sectionItem = _ref18[1];\n\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nfunction isNotComment(_ref19) {\n  var _ref20 = _slicedToArray(_ref19, 1),\n      key = _ref20[0];\n\n  return !key.endsWith(\"_comment\");\n}\n\nfunction unquote(value) {\n  var _value$match$, _value$match;\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  return (_value$match$ = (_value$match = value.match(/^\"(.*)\"$/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : value;\n}","map":{"version":3,"sources":["../../../src/ios/utils/Xcodeproj.ts"],"names":["sourceRoot","Paths","path","getPbxproj","sanitizedNameForProjects","name","getProjectName","projectName","config","sanitizedName","group","file","pbxFile","conflictingFile","child","verbose","addFileToGroupAndLink","filepath","groupName","project","addFileToProject","targetUuid","pbxGroupByPathOrAssert","createProjectFileForGroup","applicationNativeTarget","value","comment","basename","String","framework","target","getApplicationNativeTarget","uuid","findGroup","foundGroup","firstProject","components","splitPath","nextGroup","findGroupInsideGroup","Error","hasChild","topMostGroup","projectPath","xcode","productName","targetName","lists","Object","configurationListEntries","getXCConfigurationListEntries","key","buildConfigurations","configurationList","i","buildConfiguration","xcBuildConfigurationEntry","getBuildConfigurationsForListId","sectionItem"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find(child => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(group => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map(i => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find(i => i[1].name === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}