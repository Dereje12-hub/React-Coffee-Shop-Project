{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersion = getVersion;\nexports.setVersion = setVersion;\nexports.getBuildNumber = getBuildNumber;\nexports.setBuildNumber = setBuildNumber;\nexports.withBuildNumber = exports.withVersion = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withVersion = (0, _iosPlugins().createInfoPlistPlugin)(setVersion, 'withVersion');\nexports.withVersion = withVersion;\nvar withBuildNumber = (0, _iosPlugins().createInfoPlistPlugin)(setBuildNumber, 'withBuildNumber');\nexports.withBuildNumber = withBuildNumber;\n\nfunction getVersion(config) {\n  return config.version || '1.0.0';\n}\n\nfunction setVersion(config, infoPlist) {\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleShortVersionString: getVersion(config)\n  });\n}\n\nfunction getBuildNumber(config) {\n  var _config$ios;\n\n  return (_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.buildNumber ? config.ios.buildNumber : '1';\n}\n\nfunction setBuildNumber(config, infoPlist) {\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleVersion: getBuildNumber(config)\n  });\n}","map":{"version":3,"sources":["../../src/ios/Version.ts"],"names":["withVersion","withBuildNumber","config","CFBundleShortVersionString","getVersion","CFBundleVersion","getBuildNumber"],"mappings":";;;;;;;;;;;;;;;;;AAEA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,IAAMA,WAAW,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,UAAA,EAApB,aAAoB,CAApB;;AAEA,IAAMC,eAAe,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,cAAA,EAAxB,iBAAwB,CAAxB;;;AAEA,SAAA,UAAA,CAAA,MAAA,EAAyD;AAC9D,SAAOC,MAAM,CAANA,OAAAA,IAAP,OAAA;AACD;;AAEM,SAAA,UAAA,CAAA,MAAA,EAAA,SAAA,EAA0F;AAC/F,yCAAO,SAAP;AAEEC,IAAAA,0BAA0B,EAAEC,UAAU,CAAA,MAAA;AAFxC;AAID;;AAEM,SAAA,cAAA,CAAA,MAAA,EAAyD;AAAA,MAAA,WAAA;;AAC9D,SAAO,CAAA,WAAA,GAAA,MAAM,CAAN,GAAA,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,IAAA,WAAA,CAAA,WAAA,GAA0BF,MAAM,CAANA,GAAAA,CAA1B,WAAA,GAAP,GAAA;AACD;;AAEM,SAAA,cAAA,CAAA,MAAA,EAAA,SAAA,EAA0F;AAC/F,yCAAO,SAAP;AAEEG,IAAAA,eAAe,EAAEC,cAAc,CAAA,MAAA;AAFjC;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withVersion = createInfoPlistPlugin(setVersion, 'withVersion');\n\nexport const withBuildNumber = createInfoPlistPlugin(setBuildNumber, 'withBuildNumber');\n\nexport function getVersion(config: Pick<ExpoConfig, 'version'>) {\n  return config.version || '1.0.0';\n}\n\nexport function setVersion(config: Pick<ExpoConfig, 'version'>, infoPlist: InfoPlist): InfoPlist {\n  return {\n    ...infoPlist,\n    CFBundleShortVersionString: getVersion(config),\n  };\n}\n\nexport function getBuildNumber(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.buildNumber ? config.ios.buildNumber : '1';\n}\n\nexport function setBuildNumber(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  return {\n    ...infoPlist,\n    CFBundleVersion: getBuildNumber(config),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}