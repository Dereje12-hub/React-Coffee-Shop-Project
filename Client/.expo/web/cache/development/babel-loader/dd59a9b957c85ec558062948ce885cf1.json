{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar paths_1 = require(\"@expo/config/paths\");\n\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\n\nvar utils_1 = require(\"../utils\");\n\nfunction withEntry(webpackConfig) {\n  var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 ? arguments[2] : undefined;\n  env.projectRoot = env.projectRoot || paths_1.getPossibleProjectRoot();\n  var extraAppEntry = resolve_from_1.default.silent(env.projectRoot, options.entryPath);\n\n  if (!extraAppEntry) {\n    if (options.strict) {\n      throw new Error(\"[WEBPACK]: The required app entry module: \\\"\" + options.entryPath + \"\\\" couldn't be found.\");\n    }\n\n    return webpackConfig;\n  }\n\n  var expoEntry = webpackConfig.entry;\n\n  webpackConfig.entry = function _callee() {\n    var entries;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(utils_1.resolveEntryAsync(expoEntry));\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.app) {\n              _context.next = 7;\n              break;\n            }\n\n            if (!entries.app.includes(extraAppEntry)) {\n              if (!Array.isArray(entries.app)) {\n                entries.app = [entries.app];\n              }\n\n              entries.app.unshift(extraAppEntry);\n            }\n\n            _context.next = 9;\n            break;\n\n          case 7:\n            if (!options.strict) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"[WEBPACK]: Failed to include required app entry module: \\\"\" + options.entryPath + \"\\\" because the webpack entry object doesn't contain an `app` field.\");\n\n          case 9:\n            return _context.abrupt(\"return\", entries);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return webpackConfig;\n}\n\nexports.default = withEntry;","map":{"version":3,"sources":["../../src/addons/withEntry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,YAAA;;AAUA,SAAwB,SAAxB,CACE,aADF,EAGkD;AAAA,MADhD,GACgD,uEADsB,EACtB;AAAA,MAAhD,OAAgD;AAEhD,EAAA,GAAG,CAAC,WAAJ,GAAkB,GAAG,CAAC,WAAJ,IAAmB,OAAA,CAAA,sBAAA,EAArC;AAEA,MAAM,aAAa,GAAG,cAAA,CAAA,OAAA,CAAY,MAAZ,CAAmB,GAAG,CAAC,WAAvB,EAAoC,OAAO,CAAC,SAA5C,CAAtB;;AAEA,MAAI,CAAC,aAAL,EAAoB;AAClB,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,YAAM,IAAI,KAAJ,kDAC0C,OAAO,CAAC,SADlD,2BAAN;AAGD;;AAED,WAAO,aAAP;AACD;;AAED,MAAM,SAAS,GAAG,aAAa,CAAC,KAAhC;;AACA,EAAA,aAAa,CAAC,KAAd,GAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACE,OAAA,CAAA,iBAAA,CAAkB,SAAlB,CADF;;AAAA;AACd,YAAA,OADc;;AAAA,iBAEhB,OAAO,CAAC,GAFQ;AAAA;AAAA;AAAA;;AAGlB,gBAAI,CAAC,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,aAArB,CAAL,EAA0C;AACxC,kBAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAO,CAAC,GAAtB,CAAL,EAAiC;AAC/B,gBAAA,OAAO,CAAC,GAAR,GAAc,CAAC,OAAO,CAAC,GAAT,CAAd;AACD;;AACD,cAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,CAAoB,aAApB;AACD;;AARiB;AAAA;;AAAA;AAAA,iBAST,OAAO,CAAC,MATC;AAAA;AAAA;AAAA;;AAAA,kBAWZ,IAAI,KAAJ,gEACwD,OAAO,CAAC,SADhE,yEAXY;;AAAA;AAAA,6CAeb,OAfa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAkBA,SAAO,aAAP;AACD;;AAvCD,OAAA,CAAA,OAAA,GAAA,SAAA","sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport resolveFrom from 'resolve-from';\n\nimport { AnyConfiguration, InputEnvironment } from '../types';\nimport { resolveEntryAsync } from '../utils';\n\n/**\n * Inject a new entry path into an existing Webpack config.\n *\n * @param webpackConfig Existing Webpack config to modify.\n * @param env Environment props used to get the Expo config.\n * @param options new entry path to inject.\n * @category addons\n */\nexport default function withEntry(\n  webpackConfig: AnyConfiguration,\n  env: Pick<InputEnvironment, 'projectRoot' | 'config' | 'locations'> = {},\n  options: { entryPath: string; strict?: boolean }\n): AnyConfiguration {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n\n  const extraAppEntry = resolveFrom.silent(env.projectRoot, options.entryPath);\n\n  if (!extraAppEntry) {\n    if (options.strict) {\n      throw new Error(\n        `[WEBPACK]: The required app entry module: \"${options.entryPath}\" couldn't be found.`\n      );\n    }\n    // Couldn't resolve the app entry so return the config without modifying it.\n    return webpackConfig;\n  }\n\n  const expoEntry = webpackConfig.entry;\n  webpackConfig.entry = async () => {\n    const entries = await resolveEntryAsync(expoEntry);\n    if (entries.app) {\n      if (!entries.app.includes(extraAppEntry)) {\n        if (!Array.isArray(entries.app)) {\n          entries.app = [entries.app];\n        }\n        entries.app.unshift(extraAppEntry);\n      }\n    } else if (options.strict) {\n      // Better to be safe...\n      throw new Error(\n        `[WEBPACK]: Failed to include required app entry module: \"${options.entryPath}\" because the webpack entry object doesn't contain an \\`app\\` field.`\n      );\n    }\n    return entries;\n  };\n\n  return webpackConfig;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}