{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setWindowSoftInputModeMode = setWindowSoftInputModeMode;\nexports.getWindowSoftInputModeMode = getWindowSoftInputModeMode;\nexports.withWindowSoftInputMode = void 0;\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n\n  _Manifest = function _Manifest() {\n    return data;\n  };\n\n  return data;\n}\n\nvar ANDROID_WINDOW_SOFT_INPUT_MODE = 'android:windowSoftInputMode';\nvar MAPPING = {\n  pan: 'adjustPan',\n  resize: 'adjustResize'\n};\n\nvar withWindowSoftInputMode = function withWindowSoftInputMode(config) {\n  return (0, _androidPlugins().withAndroidManifest)(config, function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config.modResults = setWindowSoftInputModeMode(config, config.modResults);\n            return _context.abrupt(\"return\", config);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};\n\nexports.withWindowSoftInputMode = withWindowSoftInputMode;\n\nfunction setWindowSoftInputModeMode(config, androidManifest) {\n  var app = (0, _Manifest().getMainActivityOrThrow)(androidManifest);\n  app.$[ANDROID_WINDOW_SOFT_INPUT_MODE] = getWindowSoftInputModeMode(config);\n  return androidManifest;\n}\n\nfunction getWindowSoftInputModeMode(config) {\n  var _config$android, _MAPPING$value;\n\n  var value = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.softwareKeyboardLayoutMode;\n\n  if (!value) {\n    return 'adjustResize';\n  }\n\n  return (_MAPPING$value = MAPPING[value]) !== null && _MAPPING$value !== void 0 ? _MAPPING$value : value;\n}","map":{"version":3,"sources":["../../src/android/WindowSoftInputMode.ts"],"names":["ANDROID_WINDOW_SOFT_INPUT_MODE","MAPPING","pan","resize","withWindowSoftInputMode","config","setWindowSoftInputModeMode","app","getWindowSoftInputModeMode","value"],"mappings":";;;;;;;;;;;AAGA,SAAA,eAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,8BAAA;;AAAA,EAAA,eAAA,GAAA,2BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,cAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,IAAMA,8BAA8B,GAApC,6BAAA;AAEA,IAAMC,OAA+B,GAAG;AACtCC,EAAAA,GAAG,EADmC,WAAA;AAEtCC,EAAAA,MAAM,EAAE;AAF8B,CAAxC;;AAKO,IAAMC,uBAAqC,GAAGC,SAAxCD,uBAAwCC,CAAAA,MAAM,EAAI;AAC7D,SAAO,CAAA,GAAA,eAAA,GAAA,mBAAA,EAAA,MAAA,EAA4B,iBAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AACjCA,YAAAA,MAAM,CAANA,UAAAA,GAAoBC,0BAA0B,CAAA,MAAA,EAASD,MAAM,CAA7DA,UAA8C,CAA9CA;AADiC,6CAEjC,MAFiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B,CAAP;AADK,CAAA;;;;AAOA,SAAA,0BAAA,CAAA,MAAA,EAAA,eAAA,EAGL;AACA,MAAME,GAAG,GAAG,CAAA,GAAA,SAAA,GAAA,sBAAA,EAAZ,eAAY,CAAZ;AACAA,EAAAA,GAAG,CAAHA,CAAAA,CAAAA,8BAAAA,IAAwCC,0BAA0B,CAAlED,MAAkE,CAAlEA;AACA,SAAA,eAAA;AACD;;AAEM,SAAA,0BAAA,CAAA,MAAA,EAAyE;AAAA,MAAA,eAAA,EAAA,cAAA;;AAC9E,MAAME,KAAK,GAAA,CAAA,eAAA,GAAGJ,MAAM,CAAT,OAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,eAAAA,CAAd,0BAAA;;AAEA,MAAI,CAAJ,KAAA,EAAY;AAEV,WAAA,cAAA;AACD;;AACD,SAAA,CAAA,cAAA,GAAOJ,OAAO,CAAd,KAAc,CAAd,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,cAAA,GAAA,KAAA;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\nconst ANDROID_WINDOW_SOFT_INPUT_MODE = 'android:windowSoftInputMode';\n\nconst MAPPING: Record<string, string> = {\n  pan: 'adjustPan',\n  resize: 'adjustResize',\n};\n\nexport const withWindowSoftInputMode: ConfigPlugin = config => {\n  return withAndroidManifest(config, async config => {\n    config.modResults = setWindowSoftInputModeMode(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setWindowSoftInputModeMode(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const app = getMainActivityOrThrow(androidManifest);\n  app.$[ANDROID_WINDOW_SOFT_INPUT_MODE] = getWindowSoftInputModeMode(config);\n  return androidManifest;\n}\n\nexport function getWindowSoftInputModeMode(config: Pick<ExpoConfig, 'android'>) {\n  const value = config.android?.softwareKeyboardLayoutMode;\n\n  if (!value) {\n    // Default to `adjustResize` or `resize`.\n    return 'adjustResize';\n  }\n  return MAPPING[value] ?? value;\n}\n"]},"metadata":{},"sourceType":"script"}