{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _ws() {\n  var data = _interopRequireDefault(require(\"ws\"));\n\n  _ws = function _ws() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n\n  _cliTools = function _cliTools() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction attachToServer(server, path) {\n  var WebSocketServer = _ws().default.Server;\n\n  var wss = new WebSocketServer({\n    server: server,\n    path: path\n  });\n  var debuggerSocket;\n  var clientSocket;\n\n  function send(dest, message) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      _cliTools().logger.warn(e);\n    }\n  }\n\n  var debuggerSocketCloseHandler = function debuggerSocketCloseHandler() {\n    debuggerSocket = null;\n\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  var clientSocketCloseHandler = function clientSocketCloseHandler() {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({\n      method: '$disconnected'\n    }));\n  };\n\n  wss.on('connection', function (connection) {\n    var url = connection.upgradeReq.url;\n\n    if (url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        connection.close(1011, 'Another debugger is already connected');\n        return;\n      }\n\n      debuggerSocket = connection;\n\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n\n        debuggerSocket.onmessage = function (_ref) {\n          var data = _ref.data;\n          return send(clientSocket, data);\n        };\n      }\n    } else if (url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        clientSocket.onerror = null;\n        clientSocket.onclose = null;\n        clientSocket.onmessage = null;\n        clientSocket.close(1011, 'Another client connected');\n      }\n\n      clientSocket = connection;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n\n      clientSocket.onmessage = function (_ref2) {\n        var data = _ref2.data;\n        return send(debuggerSocket, data);\n      };\n    } else {\n      connection.close(1011, 'Missing role param');\n    }\n  });\n  return {\n    server: wss,\n    isDebuggerConnected: function isDebuggerConnected() {\n      return !!debuggerSocket;\n    }\n  };\n}\n\nvar _default = {\n  attachToServer: attachToServer\n};\nexports.default = _default;","map":{"version":3,"sources":["../../src/websocket/debuggerProxyServer.ts"],"names":["WebSocketServer","ws","wss","server","path","dest","logger","debuggerSocketCloseHandler","debuggerSocket","clientSocket","clientSocketCloseHandler","send","method","connection","url","data","isDebuggerConnected","attachToServer"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport ws from 'ws';\nimport {logger} from '@react-native-community/cli-tools';\nimport {Server as HttpServer} from 'http';\nimport {Server as HttpsServer} from 'https';\n\ntype Server = HttpServer | HttpsServer;\nfunction attachToServer(server: Server, path: string) {\n  const WebSocketServer = ws.Server;\n  const wss = new WebSocketServer({\n    server,\n    path,\n  });\n\n  let debuggerSocket: ws | null;\n  let clientSocket: ws | null;\n\n  function send(dest: ws | null, message: ws.Data) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      logger.warn(e);\n      // Sometimes this call throws 'not opened'\n    }\n  }\n\n  const debuggerSocketCloseHandler = () => {\n    debuggerSocket = null;\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  const clientSocketCloseHandler = () => {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({method: '$disconnected'}));\n  };\n\n  wss.on('connection', (connection: ws) => {\n    // @ts-ignore current definition of ws does not have upgradeReq type\n    const {url} = connection.upgradeReq;\n\n    if (url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        connection.close(1011, 'Another debugger is already connected');\n        return;\n      }\n      debuggerSocket = connection;\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n        debuggerSocket.onmessage = ({data}) => send(clientSocket, data);\n      }\n    } else if (url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onerror = null;\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onclose = null;\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onmessage = null;\n        clientSocket.close(1011, 'Another client connected');\n      }\n      clientSocket = connection;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n      clientSocket.onmessage = ({data}) => send(debuggerSocket, data);\n    } else {\n      connection.close(1011, 'Missing role param');\n    }\n  });\n\n  return {\n    server: wss,\n    isDebuggerConnected() {\n      return !!debuggerSocket;\n    },\n  };\n}\n\nexport default {\n  attachToServer,\n};\n"]},"metadata":{},"sourceType":"script"}