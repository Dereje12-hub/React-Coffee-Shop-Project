{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAbsolute = exports.getProductionPath = exports.getPublicPaths = exports.getServedPath = exports.getPathsAsync = exports.getPaths = void 0;\n\nvar config_1 = require(\"@expo/config\");\n\nvar paths_1 = require(\"@expo/config/paths\");\n\nvar find_yarn_workspace_root_1 = __importDefault(require(\"find-yarn-workspace-root\"));\n\nvar fs_1 = __importDefault(require(\"fs\"));\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar url_1 = __importDefault(require(\"url\"));\n\nvar getMode_1 = __importDefault(require(\"./getMode\"));\n\nfunction getAbsolutePathWithProjectRoot(projectRoot) {\n  var _path_1$default;\n\n  for (var _len = arguments.length, pathComponents = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pathComponents[_key - 1] = arguments[_key];\n  }\n\n  if ((pathComponents === null || pathComponents === void 0 ? void 0 : pathComponents.length) === 1 && pathComponents[0].startsWith('http')) {\n    return pathComponents[0];\n  }\n\n  return (_path_1$default = path_1.default).resolve.apply(_path_1$default, [projectRoot].concat(pathComponents));\n}\n\nfunction getModulesPath(projectRoot) {\n  var workspaceRoot = find_yarn_workspace_root_1.default(path_1.default.resolve(projectRoot));\n\n  if (workspaceRoot) {\n    return path_1.default.resolve(workspaceRoot, 'node_modules');\n  }\n\n  return path_1.default.resolve(projectRoot, 'node_modules');\n}\n\nfunction getPlatformExtensions(platform) {\n  if (platform === 'ios' || platform === 'android') {\n    return [platform, 'native'];\n  }\n\n  return [platform];\n}\n\nfunction parsePaths(projectRoot, nativeAppManifest) {\n  var env = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  var inputProjectRoot = projectRoot || paths_1.getPossibleProjectRoot();\n\n  function absolute() {\n    for (var _len2 = arguments.length, pathComponents = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      pathComponents[_key2] = arguments[_key2];\n    }\n\n    return getAbsolutePathWithProjectRoot.apply(void 0, [inputProjectRoot].concat(pathComponents));\n  }\n\n  var packageJsonPath = absolute('package.json');\n  var modulesPath = getModulesPath(inputProjectRoot);\n  var productionPath = absolute(config_1.getWebOutputPath(nativeAppManifest));\n\n  function templatePath() {\n    var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    var _a;\n\n    var overridePath = absolute((_a = env.platform) !== null && _a !== void 0 ? _a : 'web', filename);\n\n    if (fs_1.default.existsSync(overridePath)) {\n      return overridePath;\n    }\n\n    return path_1.default.join(__dirname, '../../web-default', filename);\n  }\n\n  function getProductionPath() {\n    var _path_1$default2;\n\n    for (var _len3 = arguments.length, props = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      props[_key3] = arguments[_key3];\n    }\n\n    return (_path_1$default2 = path_1.default).resolve.apply(_path_1$default2, [productionPath].concat(props));\n  }\n\n  function getIncludeModule() {\n    var _path_1$default3;\n\n    for (var _len4 = arguments.length, props = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      props[_key4] = arguments[_key4];\n    }\n\n    return (_path_1$default3 = path_1.default).resolve.apply(_path_1$default3, [modulesPath].concat(props));\n  }\n\n  var appMain = null;\n\n  try {\n    appMain = paths_1.getEntryPoint(inputProjectRoot, ['./index', './src/index'], getPlatformExtensions((_a = env.platform) !== null && _a !== void 0 ? _a : 'web'));\n  } catch (_unused) {}\n\n  return {\n    absolute: absolute,\n    includeModule: getIncludeModule,\n    packageJson: packageJsonPath,\n    root: path_1.default.resolve(inputProjectRoot),\n    appMain: appMain,\n    modules: modulesPath,\n    servedPath: getServedPath(inputProjectRoot),\n    template: {\n      get: templatePath,\n      folder: templatePath(),\n      indexHtml: templatePath('index.html'),\n      manifest: templatePath('manifest.json'),\n      serveJson: templatePath('serve.json'),\n      favicon: templatePath('favicon.ico')\n    },\n    production: {\n      get: getProductionPath,\n      folder: getProductionPath(),\n      indexHtml: getProductionPath('index.html'),\n      manifest: getProductionPath('manifest.json'),\n      serveJson: getProductionPath('serve.json'),\n      favicon: getProductionPath('favicon.ico')\n    }\n  };\n}\n\nfunction getPaths(projectRoot) {\n  var env = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _config_1$getConfig = config_1.getConfig(projectRoot, {\n    skipSDKVersionRequirement: true\n  }),\n      exp = _config_1$getConfig.exp;\n\n  return parsePaths(projectRoot, exp, env);\n}\n\nexports.getPaths = getPaths;\n\nfunction getPathsAsync(projectRoot) {\n  var env,\n      exp,\n      _args = arguments;\n  return _regeneratorRuntime.async(function getPathsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          env = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n          try {\n            exp = config_1.getConfig(projectRoot, {\n              skipSDKVersionRequirement: true\n            }).exp;\n          } catch (error) {}\n\n          return _context.abrupt(\"return\", parsePaths(projectRoot, exp, env));\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getPathsAsync = getPathsAsync;\n\nfunction getServedPath(projectRoot) {\n  var _config_1$getConfig2 = config_1.getConfig(projectRoot, {\n    skipSDKVersionRequirement: true\n  }),\n      pkg = _config_1$getConfig2.pkg;\n\n  var envPublicUrl = process.env.WEB_PUBLIC_URL;\n  var publicUrl = envPublicUrl || pkg.homepage;\n  var servedUrl = envPublicUrl || (publicUrl ? url_1.default.parse(publicUrl).pathname : '/');\n  return paths_1.ensureSlash(servedUrl, true);\n}\n\nexports.getServedPath = getServedPath;\n\nfunction getPublicPaths(env) {\n  var parsedMode = getMode_1.default(env);\n\n  if (parsedMode === 'production') {\n    var publicPath = getServedPath(env.projectRoot);\n    return {\n      publicPath: publicPath,\n      publicUrl: publicPath.slice(0, -1)\n    };\n  }\n\n  return {\n    publicUrl: '',\n    publicPath: '/'\n  };\n}\n\nexports.getPublicPaths = getPublicPaths;\n\nfunction getProductionPath(projectRoot) {\n  var _config_1$getConfig3 = config_1.getConfig(projectRoot, {\n    skipSDKVersionRequirement: true\n  }),\n      exp = _config_1$getConfig3.exp;\n\n  return getAbsolutePathWithProjectRoot(projectRoot, config_1.getWebOutputPath(exp));\n}\n\nexports.getProductionPath = getProductionPath;\n\nfunction getAbsolute(projectRoot) {\n  var inputProjectRoot = projectRoot || paths_1.getPossibleProjectRoot();\n\n  for (var _len5 = arguments.length, pathComponents = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    pathComponents[_key5 - 1] = arguments[_key5];\n  }\n\n  return getAbsolutePathWithProjectRoot.apply(void 0, [inputProjectRoot].concat(pathComponents));\n}\n\nexports.getAbsolute = getAbsolute;","map":{"version":3,"sources":["../../src/env/paths.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-env node */\nimport { ExpoConfig, getConfig, getWebOutputPath } from '@expo/config';\nimport { ensureSlash, getEntryPoint, getPossibleProjectRoot } from '@expo/config/paths';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nimport { Environment, FilePaths, InputEnvironment } from '../types';\nimport getMode from './getMode';\n\nfunction getAbsolutePathWithProjectRoot(projectRoot: string, ...pathComponents: string[]): string {\n  // Simple check if we are dealing with a URL.\n  if (pathComponents?.length === 1 && pathComponents[0].startsWith('http')) {\n    return pathComponents[0];\n  }\n\n  return path.resolve(projectRoot, ...pathComponents);\n}\n\nfunction getModulesPath(projectRoot: string): string {\n  const workspaceRoot = findWorkspaceRoot(path.resolve(projectRoot)); // Absolute path or null\n  if (workspaceRoot) {\n    return path.resolve(workspaceRoot, 'node_modules');\n  }\n\n  return path.resolve(projectRoot, 'node_modules');\n}\n\nfunction getPlatformExtensions(platform: string): string[] {\n  if (platform === 'ios' || platform === 'android') {\n    return [platform, 'native'];\n  }\n  return [platform];\n}\n\nfunction parsePaths(\n  projectRoot: string,\n  nativeAppManifest?: ExpoConfig,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): FilePaths {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n\n  function absolute(...pathComponents: string[]): string {\n    return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n  }\n\n  const packageJsonPath = absolute('package.json');\n  const modulesPath = getModulesPath(inputProjectRoot);\n  const productionPath = absolute(getWebOutputPath(nativeAppManifest));\n\n  function templatePath(filename: string = ''): string {\n    const overridePath = absolute(env.platform ?? 'web', filename);\n    if (fs.existsSync(overridePath)) {\n      return overridePath;\n    }\n    return path.join(__dirname, '../../web-default', filename);\n  }\n\n  function getProductionPath(...props: string[]): string {\n    return path.resolve(productionPath, ...props);\n  }\n\n  function getIncludeModule(...props: string[]): string {\n    return path.resolve(modulesPath, ...props);\n  }\n\n  let appMain: string | null = null;\n  try {\n    appMain = getEntryPoint(\n      inputProjectRoot,\n      ['./index', './src/index'],\n      getPlatformExtensions(env.platform ?? 'web')\n    );\n  } catch {\n    // ignore the error\n  }\n\n  return {\n    absolute,\n    includeModule: getIncludeModule,\n    packageJson: packageJsonPath,\n    root: path.resolve(inputProjectRoot),\n    appMain,\n    modules: modulesPath,\n    servedPath: getServedPath(inputProjectRoot),\n    template: {\n      get: templatePath,\n      folder: templatePath(),\n      indexHtml: templatePath('index.html'),\n      manifest: templatePath('manifest.json'),\n      serveJson: templatePath('serve.json'),\n      favicon: templatePath('favicon.ico'),\n    },\n    production: {\n      get: getProductionPath,\n      folder: getProductionPath(),\n      indexHtml: getProductionPath('index.html'),\n      manifest: getProductionPath('manifest.json'),\n      serveJson: getProductionPath('serve.json'),\n      favicon: getProductionPath('favicon.ico'),\n    },\n  };\n}\n\n/**\n * Sync method for getting default paths used throughout the Webpack config.\n * This is useful for Next.js which doesn't support async Webpack configs.\n *\n * @param projectRoot\n * @category env\n */\nexport function getPaths(\n  projectRoot: string,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): FilePaths {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  return parsePaths(projectRoot, exp, env);\n}\n\n/**\n * Async method for getting default paths used throughout the Webpack config.\n *\n * @param projectRoot\n * @category env\n */\nexport async function getPathsAsync(\n  projectRoot: string,\n  env: Pick<InputEnvironment, 'platform'> = {}\n): Promise<FilePaths> {\n  let exp;\n  try {\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n  } catch (error) {}\n  return parsePaths(projectRoot, exp, env);\n}\n\n/**\n * Get paths dictating where the app is served regardless of the current Webpack mode.\n *\n * @param projectRoot\n * @category env\n */\nexport function getServedPath(projectRoot: string): string {\n  const { pkg } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  const envPublicUrl = process.env.WEB_PUBLIC_URL;\n\n  // We use `WEB_PUBLIC_URL` environment variable or \"homepage\" field to infer\n  // \"public path\" at which the app is served.\n  // Webpack needs to know it to put the right <script> hrefs into HTML even in\n  // single-page apps that may serve index.html for nested URLs like /todos/42.\n  // We can't use a relative path in HTML because we don't want to load something\n  // like /todos/42/static/js/bundle.7289d.js. We have to know the root.\n  const publicUrl = envPublicUrl || pkg.homepage;\n  const servedUrl = envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/');\n  return ensureSlash(servedUrl!, true);\n}\n\n/**\n * Get paths dictating where the app is served. In development mode this returns default values.\n *\n * @param env\n * @category env\n */\nexport function getPublicPaths(\n  env: Pick<Environment, 'mode' | 'projectRoot'>\n): {\n  /**\n   * Webpack uses `publicPath` to determine where the app is being served from.\n   * It requires a trailing slash, or the file assets will get an incorrect path.\n   * In development, we always serve from the root. This makes config easier.\n   */\n  publicPath: string;\n\n  /**\n   * `publicUrl` is just like `publicPath`, but we will provide it to our app\n   * as %WEB_PUBLIC_URL% in `index.html` and `process.env.WEB_PUBLIC_URL` in JavaScript.\n   * Omit trailing slash as %WEB_PUBLIC_URL%/xyz looks better than %WEB_PUBLIC_URL%xyz.\n   */\n  publicUrl: string;\n} {\n  const parsedMode = getMode(env);\n  if (parsedMode === 'production') {\n    const publicPath = getServedPath(env.projectRoot);\n    return {\n      publicPath,\n      publicUrl: publicPath.slice(0, -1),\n    };\n  }\n\n  return { publicUrl: '', publicPath: '/' };\n}\n\n/**\n * Get the output folder path. Defaults to `web-build`.\n *\n * @param projectRoot\n * @category env\n */\nexport function getProductionPath(projectRoot: string): string {\n  const { exp } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n  return getAbsolutePathWithProjectRoot(projectRoot, getWebOutputPath(exp));\n}\n\n/**\n * Get an absolute path relative to the project root while accounting for remote paths (`https://`).\n *\n * @param projectRoot\n * @category env\n */\nexport function getAbsolute(projectRoot: string, ...pathComponents: string[]): string {\n  const inputProjectRoot = projectRoot || getPossibleProjectRoot();\n  return getAbsolutePathWithProjectRoot(inputProjectRoot, ...pathComponents);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}