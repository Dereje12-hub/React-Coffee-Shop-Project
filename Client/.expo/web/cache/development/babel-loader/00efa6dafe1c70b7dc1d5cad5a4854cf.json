{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar expo_pwa_1 = require(\"expo-pwa\");\n\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\n\nvar PwaManifestWebpackPlugin_1 = __importDefault(require(\"./PwaManifestWebpackPlugin\"));\n\nvar ExpoPwaManifestWebpackPlugin = function (_PwaManifestWebpackPl) {\n  _inherits(ExpoPwaManifestWebpackPlugin, _PwaManifestWebpackPl);\n\n  var _super = _createSuper(ExpoPwaManifestWebpackPlugin);\n\n  function ExpoPwaManifestWebpackPlugin(pwaOptions, config) {\n    _classCallCheck(this, ExpoPwaManifestWebpackPlugin);\n\n    var inputJson;\n\n    try {\n      if (fs_extra_1.default.existsSync(pwaOptions.template)) {\n        inputJson = JSON.parse(fs_extra_1.default.readFileSync(pwaOptions.template, {\n          encoding: 'utf8'\n        }));\n      }\n    } catch (_ref) {\n      var message = _ref.message;\n      console.log(chalk_1.default.yellow(\"\\u203A PWA manifest: failed to use template file: \" + message));\n    }\n\n    if (!inputJson) inputJson = expo_pwa_1.generateManifestJson({}, config);\n    return _super.call(this, pwaOptions, inputJson);\n  }\n\n  return _createClass(ExpoPwaManifestWebpackPlugin);\n}(PwaManifestWebpackPlugin_1.default);\n\nexports.default = ExpoPwaManifestWebpackPlugin;","map":{"version":3,"sources":["../../src/plugins/ExpoPwaManifestWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAEA,IAAA,0BAAA,GAAA,eAAA,CAAA,OAAA,8BAAA,CAAA;;IASqB,4B;;;;;AACnB,wCAAY,UAAZ,EAAgD,MAAhD,EAAkE;AAAA;;AAChE,QAAI,SAAJ;;AACA,QAAI;AACF,UAAI,UAAA,CAAA,OAAA,CAAG,UAAH,CAAc,UAAU,CAAC,QAAzB,CAAJ,EAAwC;AACtC,QAAA,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,UAAA,CAAA,OAAA,CAAG,YAAH,CAAgB,UAAU,CAAC,QAA3B,EAAqC;AAAE,UAAA,QAAQ,EAAE;AAAZ,SAArC,CAAX,CAAZ;AACD;AACF,KAJD,CAIE,aAAoB;AAAA,UAAX,OAAW,QAAX,OAAW;AACpB,MAAA,OAAO,CAAC,GAAR,CAAY,OAAA,CAAA,OAAA,CAAM,MAAN,wDAAkE,OAAlE,CAAZ;AACD;;AAED,QAAI,CAAC,SAAL,EAAgB,SAAS,GAAG,UAAA,CAAA,oBAAA,CAAqB,EAArB,EAAyB,MAAzB,CAAZ;AAVgD,6BAY1D,UAZ0D,EAY9C,SAZ8C;AAajE;;;EAduD,0BAAA,CAAA,O;;AAA1D,OAAA,CAAA,OAAA,GAAA,4BAAA","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { generateManifestJson } from 'expo-pwa';\nimport fs from 'fs-extra';\n\nimport PwaManifestWebpackPlugin, { PwaManifestOptions } from './PwaManifestWebpackPlugin';\n\nexport type ExpoPwaManifestOptions = PwaManifestOptions & {\n  /**\n   * The path to a template manifest.json.\n   */\n  template: string;\n};\n\nexport default class ExpoPwaManifestWebpackPlugin extends PwaManifestWebpackPlugin {\n  constructor(pwaOptions: ExpoPwaManifestOptions, config: ExpoConfig) {\n    let inputJson: any;\n    try {\n      if (fs.existsSync(pwaOptions.template)) {\n        inputJson = JSON.parse(fs.readFileSync(pwaOptions.template, { encoding: 'utf8' }));\n      }\n    } catch ({ message }) {\n      console.log(chalk.yellow(`\\u203A PWA manifest: failed to use template file: ${message}`));\n    }\n\n    if (!inputJson) inputJson = generateManifestJson({}, config);\n\n    super(pwaOptions, inputJson);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}