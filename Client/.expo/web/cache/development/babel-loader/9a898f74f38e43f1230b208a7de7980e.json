{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDevicePlatformFromAppRegistryStartupMessage = void 0;\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nfunction clientLogsMiddleware(logger) {\n  return function (req, res, next) {\n    try {\n      var deviceId = req.headers['device-id'];\n      var deviceName = req.headers['device-name'];\n      var expoPlatform = req.headers['expo-platform'];\n\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform === null || expoPlatform === void 0 ? void 0 : expoPlatform.toString()\n      });\n    } catch (error) {\n      logger.error({\n        tag: 'expo'\n      }, \"Error getting device logs: \" + error + \" \" + error.stack);\n      next(error);\n    }\n\n    res.end('Success');\n  };\n}\n\nexports.default = clientLogsMiddleware;\n\nfunction isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction isAppRegistryStartupMessage(body) {\n  return body.length === 1 && (/^Running application \"main\" with appParams:/.test(body[0]) || /^Running \"main\" with \\{/.test(body[0]));\n}\n\nfunction getDevicePlatformFromAppRegistryStartupMessage(body) {\n  var _a, _b;\n\n  if (body.length === 1 && typeof body[0] === 'string') {\n    return (_b = (_a = body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : null;\n  }\n\n  return null;\n}\n\nexports.getDevicePlatformFromAppRegistryStartupMessage = getDevicePlatformFromAppRegistryStartupMessage;\n\nfunction formatDevicePlatform(platform) {\n  var formatted = {\n    ios: 'iOS',\n    android: 'Android',\n    web: 'Web'\n  }[platform] || platform;\n  return chalk_1.default.bold(formatted) + \" \";\n}\n\nfunction handleDeviceLogs(logger, _ref) {\n  var deviceId = _ref.deviceId,\n      deviceName = _ref.deviceName,\n      logs = _ref.logs,\n      devicePlatform = _ref.devicePlatform;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(logs), _step; !(_step = _iterator()).done;) {\n    var log = _step.value;\n    var body = Array.isArray(log.body) ? log.body : [log.body];\n    var level = log.level;\n\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n\n    if (isAppRegistryStartupMessage(body)) {\n      var platformId = devicePlatform ? devicePlatform : getDevicePlatformFromAppRegistryStartupMessage(body);\n      var platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [platform + \"Running app on \" + deviceName];\n    }\n\n    var args = body.map(function (obj) {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n\n      if (obj === 'null') {\n        return 'null';\n      }\n\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    var logLevel = level === 'info' || level === 'warn' || level === 'error' || level === 'debug' ? level : 'info';\n    logger[logLevel].apply(logger, [{\n      tag: 'device',\n      deviceId: deviceId,\n      deviceName: deviceName,\n      groupDepth: log.groupDepth,\n      shouldHide: log.shouldHide,\n      includesStack: log.includesStack\n    }].concat(_toConsumableArray(args)));\n  }\n}","map":{"version":3,"sources":["../../src/middleware/clientLogsMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import Log from '@expo/bunyan';\nimport chalk from 'chalk';\nimport { HandleFunction } from 'connect';\nimport http from 'http';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nexport default function clientLogsMiddleware(logger: Log): HandleFunction {\n  return function (\n    req: http.IncomingMessage & { body?: any },\n    res: http.ServerResponse,\n    next: (err?: Error) => void\n  ) {\n    try {\n      const deviceId = req.headers['device-id'];\n      const deviceName = req.headers['device-name'];\n      const expoPlatform = req.headers['expo-platform'];\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform?.toString(),\n      });\n    } catch (error) {\n      logger.error({ tag: 'expo' }, `Error getting device logs: ${error} ${error.stack}`);\n      next(error);\n    }\n    res.end('Success');\n  };\n}\n\nfunction isIgnorableBugReportingExtraData(body: any[]): boolean {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction isAppRegistryStartupMessage(body: any[]): boolean {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nexport function getDevicePlatformFromAppRegistryStartupMessage(body: string[]): string | null {\n  if (body.length === 1 && typeof body[0] === 'string') {\n    // Dangerously pick the platform out of the request URL\n    // like: http:\\\\\\\\/\\\\\\\\/192.168.6.113:19000\\\\\\\\/index.bundle&platform=android\\dev=true&hot=false&minify=false\n    return body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)?.[1] ?? null;\n  }\n  return null;\n}\n\nfunction formatDevicePlatform(platform: string): string {\n  // Map the ID like \"ios\" to \"iOS\"\n  const formatted = { ios: 'iOS', android: 'Android', web: 'Web' }[platform] || platform;\n  return `${chalk.bold(formatted)} `;\n}\n\nfunction handleDeviceLogs(\n  logger: Log,\n  {\n    deviceId,\n    deviceName,\n    logs,\n    devicePlatform,\n  }: { deviceId: string; deviceName: string; devicePlatform?: string; logs: any }\n): void {\n  for (const log of logs) {\n    let body = Array.isArray(log.body) ? log.body : [log.body];\n    let { level } = log;\n\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (isAppRegistryStartupMessage(body)) {\n      // If the installed version of expo is sending back the `device-platform` header\n      // then use that, otherwise find it in the query string.\n      const platformId = devicePlatform\n        ? devicePlatform\n        : getDevicePlatformFromAppRegistryStartupMessage(body);\n\n      const platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [`${platform}Running app on ${deviceName}`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (e) {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    logger[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}