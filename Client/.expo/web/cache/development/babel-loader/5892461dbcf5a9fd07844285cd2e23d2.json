{"ast":null,"code":"var _require = require(\"./constants\"),\n    MAX_SAFE_COMPONENT_LENGTH = _require.MAX_SAFE_COMPONENT_LENGTH;\n\nvar debug = require(\"./debug\");\n\nexports = module.exports = {};\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar t = exports.t = {};\nvar R = 0;\n\nvar createToken = function createToken(name, value, isGlobal) {\n  var index = R++;\n  debug(index, value);\n  t[name] = index;\n  src[index] = value;\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n};\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+');\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*');\ncreateToken('MAINVERSION', \"(\" + src[t.NUMERICIDENTIFIER] + \")\\\\.\" + (\"(\" + src[t.NUMERICIDENTIFIER] + \")\\\\.\") + (\"(\" + src[t.NUMERICIDENTIFIER] + \")\"));\ncreateToken('MAINVERSIONLOOSE', \"(\" + src[t.NUMERICIDENTIFIERLOOSE] + \")\\\\.\" + (\"(\" + src[t.NUMERICIDENTIFIERLOOSE] + \")\\\\.\") + (\"(\" + src[t.NUMERICIDENTIFIERLOOSE] + \")\"));\ncreateToken('PRERELEASEIDENTIFIER', \"(?:\" + src[t.NUMERICIDENTIFIER] + \"|\" + src[t.NONNUMERICIDENTIFIER] + \")\");\ncreateToken('PRERELEASEIDENTIFIERLOOSE', \"(?:\" + src[t.NUMERICIDENTIFIERLOOSE] + \"|\" + src[t.NONNUMERICIDENTIFIER] + \")\");\ncreateToken('PRERELEASE', \"(?:-(\" + src[t.PRERELEASEIDENTIFIER] + \"(?:\\\\.\" + src[t.PRERELEASEIDENTIFIER] + \")*))\");\ncreateToken('PRERELEASELOOSE', \"(?:-?(\" + src[t.PRERELEASEIDENTIFIERLOOSE] + \"(?:\\\\.\" + src[t.PRERELEASEIDENTIFIERLOOSE] + \")*))\");\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+');\ncreateToken('BUILD', \"(?:\\\\+(\" + src[t.BUILDIDENTIFIER] + \"(?:\\\\.\" + src[t.BUILDIDENTIFIER] + \")*))\");\ncreateToken('FULLPLAIN', \"v?\" + src[t.MAINVERSION] + src[t.PRERELEASE] + \"?\" + src[t.BUILD] + \"?\");\ncreateToken('FULL', \"^\" + src[t.FULLPLAIN] + \"$\");\ncreateToken('LOOSEPLAIN', \"[v=\\\\s]*\" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + \"?\" + src[t.BUILD] + \"?\");\ncreateToken('LOOSE', \"^\" + src[t.LOOSEPLAIN] + \"$\");\ncreateToken('GTLT', '((?:<|>)?=?)');\ncreateToken('XRANGEIDENTIFIERLOOSE', src[t.NUMERICIDENTIFIERLOOSE] + \"|x|X|\\\\*\");\ncreateToken('XRANGEIDENTIFIER', src[t.NUMERICIDENTIFIER] + \"|x|X|\\\\*\");\ncreateToken('XRANGEPLAIN', \"[v=\\\\s]*(\" + src[t.XRANGEIDENTIFIER] + \")\" + (\"(?:\\\\.(\" + src[t.XRANGEIDENTIFIER] + \")\") + (\"(?:\\\\.(\" + src[t.XRANGEIDENTIFIER] + \")\") + (\"(?:\" + src[t.PRERELEASE] + \")?\" + src[t.BUILD] + \"?\") + \")?)?\");\ncreateToken('XRANGEPLAINLOOSE', \"[v=\\\\s]*(\" + src[t.XRANGEIDENTIFIERLOOSE] + \")\" + (\"(?:\\\\.(\" + src[t.XRANGEIDENTIFIERLOOSE] + \")\") + (\"(?:\\\\.(\" + src[t.XRANGEIDENTIFIERLOOSE] + \")\") + (\"(?:\" + src[t.PRERELEASELOOSE] + \")?\" + src[t.BUILD] + \"?\") + \")?)?\");\ncreateToken('XRANGE', \"^\" + src[t.GTLT] + \"\\\\s*\" + src[t.XRANGEPLAIN] + \"$\");\ncreateToken('XRANGELOOSE', \"^\" + src[t.GTLT] + \"\\\\s*\" + src[t.XRANGEPLAINLOOSE] + \"$\");\ncreateToken('COERCE', \"\" + ('(^|[^\\\\d])' + '(\\\\d{1,') + MAX_SAFE_COMPONENT_LENGTH + \"})\" + (\"(?:\\\\.(\\\\d{1,\" + MAX_SAFE_COMPONENT_LENGTH + \"}))?\") + (\"(?:\\\\.(\\\\d{1,\" + MAX_SAFE_COMPONENT_LENGTH + \"}))?\") + \"(?:$|[^\\\\d])\");\ncreateToken('COERCERTL', src[t.COERCE], true);\ncreateToken('LONETILDE', '(?:~>?)');\ncreateToken('TILDETRIM', \"(\\\\s*)\" + src[t.LONETILDE] + \"\\\\s+\", true);\nexports.tildeTrimReplace = '$1~';\ncreateToken('TILDE', \"^\" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + \"$\");\ncreateToken('TILDELOOSE', \"^\" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + \"$\");\ncreateToken('LONECARET', '(?:\\\\^)');\ncreateToken('CARETTRIM', \"(\\\\s*)\" + src[t.LONECARET] + \"\\\\s+\", true);\nexports.caretTrimReplace = '$1^';\ncreateToken('CARET', \"^\" + src[t.LONECARET] + src[t.XRANGEPLAIN] + \"$\");\ncreateToken('CARETLOOSE', \"^\" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + \"$\");\ncreateToken('COMPARATORLOOSE', \"^\" + src[t.GTLT] + \"\\\\s*(\" + src[t.LOOSEPLAIN] + \")$|^$\");\ncreateToken('COMPARATOR', \"^\" + src[t.GTLT] + \"\\\\s*(\" + src[t.FULLPLAIN] + \")$|^$\");\ncreateToken('COMPARATORTRIM', \"(\\\\s*)\" + src[t.GTLT] + \"\\\\s*(\" + src[t.LOOSEPLAIN] + \"|\" + src[t.XRANGEPLAIN] + \")\", true);\nexports.comparatorTrimReplace = '$1$2$3';\ncreateToken('HYPHENRANGE', \"^\\\\s*(\" + src[t.XRANGEPLAIN] + \")\" + \"\\\\s+-\\\\s+\" + (\"(\" + src[t.XRANGEPLAIN] + \")\") + \"\\\\s*$\");\ncreateToken('HYPHENRANGELOOSE', \"^\\\\s*(\" + src[t.XRANGEPLAINLOOSE] + \")\" + \"\\\\s+-\\\\s+\" + (\"(\" + src[t.XRANGEPLAINLOOSE] + \")\") + \"\\\\s*$\");\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*');\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$');\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$');","map":{"version":3,"sources":["C:/Users/Dereje/node_modules/@expo/config-plugins/node_modules/semver/internal/re.js"],"names":["require","MAX_SAFE_COMPONENT_LENGTH","debug","exports","module","re","src","t","R","createToken","name","value","isGlobal","index","RegExp","undefined","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace"],"mappings":"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","sourcesContent":["const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n"]},"metadata":{},"sourceType":"script"}