{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluginError = exports.UnexpectedError = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar UnexpectedError = function (_Error) {\n  _inherits(UnexpectedError, _Error);\n\n  var _super = _createSuper(UnexpectedError);\n\n  function UnexpectedError(message) {\n    var _this;\n\n    _classCallCheck(this, UnexpectedError);\n\n    _this = _super.call(this, message + \"\\nPlease report this as an issue on https://github.com/expo/expo-cli/issues\");\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", 'UnexpectedError');\n\n    return _this;\n  }\n\n  return _createClass(UnexpectedError);\n}(_wrapNativeSuper(Error));\n\nexports.UnexpectedError = UnexpectedError;\n\nvar PluginError = function (_Error2) {\n  _inherits(PluginError, _Error2);\n\n  var _super2 = _createSuper(PluginError);\n\n  function PluginError(message, code, cause) {\n    var _this2;\n\n    _classCallCheck(this, PluginError);\n\n    _this2 = _super2.call(this, cause ? message + \"\\n\\u2514\\u2500 Cause: \" + cause.name + \": \" + cause.message : message);\n    _this2.code = code;\n    _this2.cause = cause;\n\n    _defineProperty(_assertThisInitialized(_this2), \"name\", 'PluginError');\n\n    _defineProperty(_assertThisInitialized(_this2), \"isPluginError\", true);\n\n    return _this2;\n  }\n\n  return _createClass(PluginError);\n}(_wrapNativeSuper(Error));\n\nexports.PluginError = PluginError;","map":{"version":3,"sources":["../../src/utils/errors.ts"],"names":["constructor","code","cause","message","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAO,e;;;;;AAGLA,2BAAW,OAAXA,EAA6B;AAAA;;AAAA;;AAC3B,8BAAA,OAAA;;AAD2B,IAAA,eAAA,gCAAA,MAAA,EAFb,iBAEa,CAAA;;AAAA;AAE5B;;;mBALI,K;;;;IAmBA,W;;;;;AAILA,uBAAW,OAAXA,EAAW,IAAXA,EAAW,KAAXA,EAAiF;AAAA;;AAAA;;AAC/E,gCAAME,KAAK,GAAMC,OAAN,8BAA4BD,KAAK,CAACE,IAAlC,UAA2CF,KAAK,CAAhD,OAAA,GAAX,OAAA;AAD+E,WAA7CD,IAA6C,GAA7CA,IAA6C;AAAA,WAAfC,KAAe,GAAfA,KAAe;;AAAA,IAAA,eAAA,iCAAA,MAAA,EAHjE,aAGiE,CAAA;;AAAA,IAAA,eAAA,iCAAA,eAAA,EAFxD,IAEwD,CAAA;;AAAA;AAEhF;;;mBANI,K","sourcesContent":["export class UnexpectedError extends Error {\n  readonly name = 'UnexpectedError';\n\n  constructor(message: string) {\n    super(`${message}\\nPlease report this as an issue on https://github.com/expo/expo-cli/issues`);\n  }\n}\n\nexport type PluginErrorCode =\n  | 'INVALID_PLUGIN_TYPE'\n  | 'INVALID_PLUGIN_IMPORT'\n  | 'PLUGIN_NOT_FOUND'\n  | 'CONFLICTING_PROVIDER'\n  | 'INVALID_MOD_ORDER'\n  | 'MISSING_PROVIDER';\n\n/**\n * Based on `JsonFileError` from `@expo/json-file`\n */\nexport class PluginError extends Error {\n  readonly name = 'PluginError';\n  readonly isPluginError = true;\n\n  constructor(message: string, public code: PluginErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.name}: ${cause.message}` : message);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}