{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureSlash = ensureSlash;\nexports.getPossibleProjectRoot = getPossibleProjectRoot;\nexports.resolveEntryPoint = resolveEntryPoint;\nexports.getEntryPoint = getEntryPoint;\nexports.getEntryPointWithExtensions = getEntryPointWithExtensions;\nexports.resolveFromSilentWithExtensions = resolveFromSilentWithExtensions;\nexports.getFileWithExtensions = getFileWithExtensions;\n\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Config() {\n  var data = require(\"../Config\");\n\n  _Config = function _Config() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _extensions() {\n  var data = require(\"./extensions\");\n\n  _extensions = function _extensions() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ensureSlash(inputPath, needsSlash) {\n  var hasSlash = inputPath.endsWith('/');\n\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return inputPath + \"/\";\n  } else {\n    return inputPath;\n  }\n}\n\nfunction getPossibleProjectRoot() {\n  return _fs().default.realpathSync(process.cwd());\n}\n\nvar nativePlatforms = ['ios', 'android'];\n\nfunction resolveEntryPoint(projectRoot, _ref) {\n  var platform = _ref.platform,\n      projectConfig = _ref.projectConfig;\n  var platforms = nativePlatforms.includes(platform) ? [platform, 'native'] : [platform];\n  return getEntryPoint(projectRoot, ['./index'], platforms, projectConfig);\n}\n\nfunction getEntryPoint(projectRoot, entryFiles, platforms, projectConfig) {\n  var extensions = (0, _extensions().getBareExtensions)(platforms);\n  return getEntryPointWithExtensions(projectRoot, entryFiles, extensions, projectConfig);\n}\n\nfunction getEntryPointWithExtensions(projectRoot, entryFiles, extensions, projectConfig) {\n  var _ref2 = projectConfig !== null && projectConfig !== void 0 ? projectConfig : (0, _Config().getConfig)(projectRoot, {\n    skipSDKVersionRequirement: true\n  }),\n      exp = _ref2.exp,\n      pkg = _ref2.pkg;\n\n  if (exp && exp.entryPoint && typeof exp.entryPoint === 'string') {\n    var entry = getFileWithExtensions(projectRoot, exp.entryPoint, extensions);\n\n    if (!entry) {\n      entry = resolveFromSilentWithExtensions(projectRoot, exp.entryPoint, extensions);\n\n      if (!entry) {\n        return exp.entryPoint;\n      }\n    }\n\n    return entry;\n  } else if (pkg) {\n    var main = pkg.main;\n\n    if (main && typeof main === 'string') {\n      var _entry = getFileWithExtensions(projectRoot, main, extensions);\n\n      if (!_entry) {\n        _entry = resolveFromSilentWithExtensions(projectRoot, main, extensions);\n        if (!_entry) throw new Error(\"Cannot resolve entry file: The `main` field defined in your `package.json` points to a non-existent path.\");\n      }\n\n      return _entry;\n    }\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(entryFiles), _step; !(_step = _iterator()).done;) {\n    var fileName = _step.value;\n\n    var _entry2 = resolveFromSilentWithExtensions(projectRoot, fileName, extensions);\n\n    if (_entry2) return _entry2;\n  }\n\n  try {\n    return (0, _resolveFrom().default)(projectRoot, 'expo/AppEntry');\n  } catch (_unused) {\n    throw new Error(\"The project entry file could not be resolved. Please either define it in the `package.json` (main), `app.json` (expo.entryPoint), create an `index.js`, or install the `expo` package.\");\n  }\n}\n\nfunction resolveFromSilentWithExtensions(fromDirectory, moduleId, extensions) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(extensions), _step2; !(_step2 = _iterator2()).done;) {\n    var extension = _step2.value;\n\n    var modulePath = _resolveFrom().default.silent(fromDirectory, moduleId + \".\" + extension);\n\n    if (modulePath && modulePath.endsWith(extension)) {\n      return modulePath;\n    }\n  }\n\n  return _resolveFrom().default.silent(fromDirectory, moduleId) || null;\n}\n\nfunction getFileWithExtensions(fromDirectory, moduleId, extensions) {\n  var modulePath = _path().default.join(fromDirectory, moduleId);\n\n  if (_fs().default.existsSync(modulePath)) {\n    return modulePath;\n  }\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(extensions), _step3; !(_step3 = _iterator3()).done;) {\n    var extension = _step3.value;\n\n    var _modulePath = _path().default.join(fromDirectory, moduleId + \".\" + extension);\n\n    if (_fs().default.existsSync(_modulePath)) {\n      return _modulePath;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../src/paths/paths.ts"],"names":["hasSlash","inputPath","fs","process","nativePlatforms","projectConfig","platforms","getEntryPoint","extensions","getEntryPointWithExtensions","pkg","skipSDKVersionRequirement","exp","entry","getFileWithExtensions","resolveFromSilentWithExtensions","main","modulePath","resolveFrom","moduleId","path"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { getConfig } from '../Config';\nimport { ProjectConfig } from '../Config.types';\nimport { getBareExtensions } from './extensions';\n\n// https://github.com/facebook/create-react-app/blob/9750738cce89a967cc71f28390daf5d4311b193c/packages/react-scripts/config/paths.js#L22\nexport function ensureSlash(inputPath: string, needsSlash: boolean): string {\n  const hasSlash = inputPath.endsWith('/');\n  if (hasSlash && !needsSlash) {\n    return inputPath.substr(0, inputPath.length - 1);\n  } else if (!hasSlash && needsSlash) {\n    return `${inputPath}/`;\n  } else {\n    return inputPath;\n  }\n}\n\nexport function getPossibleProjectRoot(): string {\n  return fs.realpathSync(process.cwd());\n}\n\nconst nativePlatforms = ['ios', 'android'];\n\nexport function resolveEntryPoint(\n  projectRoot: string,\n  { platform, projectConfig }: { platform: string; projectConfig?: ProjectConfig }\n) {\n  const platforms = nativePlatforms.includes(platform) ? [platform, 'native'] : [platform];\n  return getEntryPoint(projectRoot, ['./index'], platforms, projectConfig);\n}\n\nexport function getEntryPoint(\n  projectRoot: string,\n  entryFiles: string[],\n  platforms: string[],\n  projectConfig?: ProjectConfig\n): string | null {\n  const extensions = getBareExtensions(platforms);\n  return getEntryPointWithExtensions(projectRoot, entryFiles, extensions, projectConfig);\n}\n\n// Used to resolve the main entry file for a project.\nexport function getEntryPointWithExtensions(\n  projectRoot: string,\n  entryFiles: string[],\n  extensions: string[],\n  projectConfig?: ProjectConfig\n): string {\n  const { exp, pkg } = projectConfig ?? getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  // This will first look in the `app.json`s `expo.entryPoint` field for a potential main file.\n  // We check the Expo config first in case you want your project to start differently with Expo then in a standalone environment.\n  if (exp && exp.entryPoint && typeof exp.entryPoint === 'string') {\n    // If the field exists then we want to test it against every one of the supplied extensions\n    // to ensure the bundler resolves the same way.\n    let entry = getFileWithExtensions(projectRoot, exp.entryPoint, extensions);\n    if (!entry) {\n      // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n      entry = resolveFromSilentWithExtensions(projectRoot, exp.entryPoint, extensions);\n\n      // If it doesn't resolve then just return the entryPoint as-is. This makes\n      // it possible for people who have an unconventional setup (eg: multiple\n      // apps in monorepo with metro at root) to customize entry point without\n      // us imposing our assumptions.\n      if (!entry) {\n        return exp.entryPoint;\n      }\n    }\n    return entry;\n  } else if (pkg) {\n    // If the config doesn't define a custom entry then we want to look at the `package.json`s `main` field, and try again.\n    const { main } = pkg;\n    if (main && typeof main === 'string') {\n      // Testing the main field against all of the provided extensions - for legacy reasons we can't use node module resolution as the package.json allows you to pass in a file without a relative path and expect it as a relative path.\n      let entry = getFileWithExtensions(projectRoot, main, extensions);\n      if (!entry) {\n        // Allow for paths like: `{ \"main\": \"expo/AppEntry\" }`\n        entry = resolveFromSilentWithExtensions(projectRoot, main, extensions);\n        if (!entry)\n          throw new Error(\n            `Cannot resolve entry file: The \\`main\\` field defined in your \\`package.json\\` points to a non-existent path.`\n          );\n      }\n      return entry;\n    }\n  }\n\n  // Now we will start looking for a default entry point using the provided `entryFiles` argument.\n  // This will add support for create-react-app (src/index.js) and react-native-cli (index.js) which don't define a main.\n  for (const fileName of entryFiles) {\n    const entry = resolveFromSilentWithExtensions(projectRoot, fileName, extensions);\n    if (entry) return entry;\n  }\n\n  try {\n    // If none of the default files exist then we will attempt to use the main Expo entry point.\n    // This requires `expo` to be installed in the project to work as it will use `node_module/expo/AppEntry.js`\n    // Doing this enables us to create a bare minimum Expo project.\n\n    // TODO(Bacon): We may want to do a check against `./App` and `expo` in the `package.json` `dependencies` as we can more accurately ensure that the project is expo-min without needing the modules installed.\n    return resolveFrom(projectRoot, 'expo/AppEntry');\n  } catch {\n    throw new Error(\n      `The project entry file could not be resolved. Please either define it in the \\`package.json\\` (main), \\`app.json\\` (expo.entryPoint), create an \\`index.js\\`, or install the \\`expo\\` package.`\n    );\n  }\n}\n\n// Resolve from but with the ability to resolve like a bundler\nexport function resolveFromSilentWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  for (const extension of extensions) {\n    const modulePath = resolveFrom.silent(fromDirectory, `${moduleId}.${extension}`);\n    if (modulePath && modulePath.endsWith(extension)) {\n      return modulePath;\n    }\n  }\n  return resolveFrom.silent(fromDirectory, moduleId) || null;\n}\n\n// Statically attempt to resolve a module but with the ability to resolve like a bundler.\n// This won't use node module resolution.\nexport function getFileWithExtensions(\n  fromDirectory: string,\n  moduleId: string,\n  extensions: string[]\n): string | null {\n  const modulePath = path.join(fromDirectory, moduleId);\n  if (fs.existsSync(modulePath)) {\n    return modulePath;\n  }\n  for (const extension of extensions) {\n    const modulePath = path.join(fromDirectory, `${moduleId}.${extension}`);\n    if (fs.existsSync(modulePath)) {\n      return modulePath;\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}