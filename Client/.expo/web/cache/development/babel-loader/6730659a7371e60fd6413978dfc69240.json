{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gteSdkVersion = gteSdkVersion;\nexports.lteSdkVersion = lteSdkVersion;\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction gteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return _semver().default.gte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}\n\nfunction lteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return _semver().default.lte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"sources":["../../src/utils/versions.ts"],"names":["exp","semver"],"mappings":";;;;;;;;AACA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAEO,SAAA,aAAA,CAAA,GAAA,EAAA,UAAA,EAAyF;AAC9F,MAAI,CAACA,GAAG,CAAR,UAAA,EAAqB;AACnB,WAAA,KAAA;AACD;;AAED,MAAIA,GAAG,CAAHA,UAAAA,KAAJ,aAAA,EAAsC;AACpC,WAAA,IAAA;AACD;;AAED,MAAI;AACF,WAAOC,OAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAWD,GAAG,CAAdC,UAAAA,EAAP,UAAOA,CAAP;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,UAAM,IAAA,KAAA,CAAaD,GAAG,CAAtB,UAAM,2DAAN;AACD;AACF;;AAEM,SAAA,aAAA,CAAA,GAAA,EAAA,UAAA,EAAyF;AAC9F,MAAI,CAACA,GAAG,CAAR,UAAA,EAAqB;AACnB,WAAA,KAAA;AACD;;AAED,MAAIA,GAAG,CAAHA,UAAAA,KAAJ,aAAA,EAAsC;AACpC,WAAA,KAAA;AACD;;AAED,MAAI;AACF,WAAOC,OAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAWD,GAAG,CAAdC,UAAAA,EAAP,UAAOA,CAAP;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,UAAM,IAAA,KAAA,CAAaD,GAAG,CAAtB,UAAM,2DAAN;AACD;AACF","sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport semver from 'semver';\n\nexport function gteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}