{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar PwaManifestWebpackPlugin_1 = __importDefault(require(\"./PwaManifestWebpackPlugin\"));\n\nvar ExpoAppManifestWebpackPlugin = function (_PwaManifestWebpackPl) {\n  _inherits(ExpoAppManifestWebpackPlugin, _PwaManifestWebpackPl);\n\n  var _super = _createSuper(ExpoAppManifestWebpackPlugin);\n\n  function ExpoAppManifestWebpackPlugin(pwaOptions, config) {\n    var _this;\n\n    _classCallCheck(this, ExpoAppManifestWebpackPlugin);\n\n    _this = _super.call(this, pwaOptions, config);\n    _this.rel = 'expo';\n    return _this;\n  }\n\n  return _createClass(ExpoAppManifestWebpackPlugin);\n}(PwaManifestWebpackPlugin_1.default);\n\nexports.default = ExpoAppManifestWebpackPlugin;","map":{"version":3,"sources":["../../src/plugins/ExpoAppManifestWebpackPlugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAA,0BAAA,GAAA,eAAA,CAAA,OAAA,8BAAA,CAAA;;IASqB,4B;;;;;AACnB,wCAAY,UAAZ,EAAgD,MAAhD,EAAkE;AAAA;;AAAA;;AAChE,8BAAM,UAAN,EAAkB,MAAlB;AAEA,UAAK,GAAL,GAAW,MAAX;AAHgE;AAIjE;;;EALuD,0BAAA,CAAA,O;;AAA1D,OAAA,CAAA,OAAA,GAAA,4BAAA","sourcesContent":["import { ExpoConfig } from '@expo/config';\n\nimport PwaManifestWebpackPlugin, { PwaManifestOptions } from './PwaManifestWebpackPlugin';\n\nexport type ExpoPwaManifestOptions = PwaManifestOptions & {\n  /**\n   * The path to a template manifest.json.\n   */\n  template: string;\n};\n\nexport default class ExpoAppManifestWebpackPlugin extends PwaManifestWebpackPlugin {\n  constructor(pwaOptions: ExpoPwaManifestOptions, config: ExpoConfig) {\n    super(pwaOptions, config);\n\n    this.rel = 'expo';\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}