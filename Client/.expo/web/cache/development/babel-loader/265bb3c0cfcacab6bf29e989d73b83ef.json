{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CocoaPodsPackageManager = exports.extractMissingDependencyError = exports.CocoaPodsError = void 0;\n\nvar spawn_async_1 = __importDefault(require(\"@expo/spawn-async\"));\n\nvar chalk_1 = __importDefault(require(\"chalk\"));\n\nvar fs_1 = require(\"fs\");\n\nvar path_1 = __importDefault(require(\"path\"));\n\nvar PackageManager_1 = require(\"./PackageManager\");\n\nvar CocoaPodsError = function (_Error) {\n  _inherits(CocoaPodsError, _Error);\n\n  var _super = _createSuper(CocoaPodsError);\n\n  function CocoaPodsError(message, code, cause) {\n    var _this;\n\n    _classCallCheck(this, CocoaPodsError);\n\n    _this = _super.call(this, cause ? message + \"\\n\\u2514\\u2500 Cause: \" + cause.message : message);\n    _this.code = code;\n    _this.cause = cause;\n    _this.name = 'CocoaPodsError';\n    _this.isPackageManagerError = true;\n    return _this;\n  }\n\n  return _createClass(CocoaPodsError);\n}(_wrapNativeSuper(Error));\n\nexports.CocoaPodsError = CocoaPodsError;\n\nfunction extractMissingDependencyError(error) {\n  var results = error.match(/Unable to find a specification for ['\"`]([\\w-_\\d\\s]+)['\"`] depended upon by ['\"`]([\\w-_\\d\\s]+)['\"`]/);\n\n  if (results) {\n    return [results[1], results[2]];\n  }\n\n  return null;\n}\n\nexports.extractMissingDependencyError = extractMissingDependencyError;\n\nvar CocoaPodsPackageManager = function () {\n  function CocoaPodsPackageManager(_ref) {\n    var cwd = _ref.cwd,\n        silent = _ref.silent;\n\n    _classCallCheck(this, CocoaPodsPackageManager);\n\n    this.silent = !!silent;\n    this.options = _objectSpread({\n      cwd: cwd\n    }, silent ? {\n      stdio: 'pipe'\n    } : {\n      stdio: ['inherit', 'inherit', 'pipe']\n    });\n  }\n\n  _createClass(CocoaPodsPackageManager, [{\n    key: \"name\",\n    get: function get() {\n      return 'CocoaPods';\n    }\n  }, {\n    key: \"installAsync\",\n    value: function installAsync() {\n      var _ref2,\n          spinner,\n          _args = arguments;\n\n      return _regeneratorRuntime.async(function installAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, spinner = _ref2.spinner;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(this._installAsync({\n                spinner: spinner\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"isCLIInstalledAsync\",\n    value: function isCLIInstalledAsync() {\n      return CocoaPodsPackageManager.isCLIInstalledAsync(this.options);\n    }\n  }, {\n    key: \"installCLIAsync\",\n    value: function installCLIAsync() {\n      return CocoaPodsPackageManager.installCLIAsync({\n        nonInteractive: true,\n        spawnOptions: this.options\n      });\n    }\n  }, {\n    key: \"_installAsync\",\n    value: function _installAsync() {\n      var _ref3,\n          spinner,\n          _ref3$shouldUpdate,\n          shouldUpdate,\n          _a,\n          output,\n          isPodRepoUpdateError,\n          warningInfo,\n          message,\n          cwd,\n          _warningInfo,\n          reason,\n          solution,\n          stderr,\n          usefulError,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.async(function _installAsync$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, spinner = _ref3.spinner, _ref3$shouldUpdate = _ref3.shouldUpdate, shouldUpdate = _ref3$shouldUpdate === void 0 ? true : _ref3$shouldUpdate;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(this._runAsync(['install']));\n\n            case 4:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](1);\n              output = _context2.t0.output.join('\\n').trim();\n              isPodRepoUpdateError = output.includes('pod repo update');\n\n              if (!(isPodRepoUpdateError && shouldUpdate)) {\n                _context2.next = 24;\n                break;\n              }\n\n              warningInfo = extractMissingDependencyError(output);\n\n              if (warningInfo) {\n                message = \"Couldn't install: \" + warningInfo[1] + \" \\xBB \" + chalk_1.default.underline(warningInfo[0]) + \".\";\n              } else {\n                message = \"Couldn't install Pods.\";\n              }\n\n              message += \" Updating the Pods project and trying again...\";\n\n              if (spinner) {\n                spinner.text = chalk_1.default.bold(message);\n              }\n\n              !this.silent && console.warn(chalk_1.default.yellow(message));\n              _context2.next = 19;\n              return _regeneratorRuntime.awrap(this.podRepoUpdateAsync());\n\n            case 19:\n              _context2.next = 21;\n              return _regeneratorRuntime.awrap(this._installAsync({\n                spinner: spinner,\n                shouldUpdate: false\n              }));\n\n            case 21:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 24:\n              cwd = this.options.cwd || process.cwd();\n\n              if (!_context2.t0.stdout.match(/No [`'\"]Podfile[`'\"] found in the project directory/)) {\n                _context2.next = 29;\n                break;\n              }\n\n              _context2.t0.message = \"No Podfile found in directory: \" + cwd + \". Ensure CocoaPods is setup any try again.\";\n              _context2.next = 41;\n              break;\n\n            case 29:\n              if (!isPodRepoUpdateError) {\n                _context2.next = 37;\n                break;\n              }\n\n              _warningInfo = extractMissingDependencyError(output);\n\n              if (_warningInfo) {\n                reason = \"Couldn't install: \" + _warningInfo[1] + \" \\xBB \" + chalk_1.default.underline(_warningInfo[0]);\n              } else {\n                reason = \"This is often due to native package versions mismatching\";\n              }\n\n              if (_warningInfo === null || _warningInfo === void 0 ? void 0 : _warningInfo[0]) {\n                if (_warningInfo[0].match(/^(?:@?expo|@?react)(-|\\/)/)) {\n                  solution = \"Ensure the node module \\\"\" + _warningInfo[0] + \"\\\" is installed in your project, then run `npx pod-install` to try again.\";\n                } else {\n                  solution = \"Ensure the CocoaPod \\\"\" + _warningInfo[0] + \"\\\" is installed in your project, then run `npx pod-install` to try again.\";\n                }\n              } else {\n                solution = \"Try deleting the `ios/Pods` folder or the `ios/Podfile.lock` file and running `npx pod-install` to resolve.\";\n              }\n\n              _context2.t0.message = reason + \". \" + solution;\n              throw new CocoaPodsError('Command `pod repo update` failed.', 'COMMAND_FAILED', _context2.t0);\n\n            case 37:\n              stderr = _context2.t0.stderr.trim();\n              usefulError = (_a = _context2.t0.stdout.match(/\\[!\\]\\s((?:.|\\n)*)/)) === null || _a === void 0 ? void 0 : _a[1];\n\n              if (usefulError) {\n                if (_context2.t0.message.match(/pod exited with non-zero code: 1/)) {\n                  _context2.t0.message = null;\n                }\n\n                if (stderr.match(/PBXResourcesBuildPhase/)) {\n                  stderr = null;\n                }\n              }\n\n              _context2.t0.message = [usefulError, _context2.t0.message, stderr].filter(Boolean).join('\\n');\n\n            case 41:\n              throw new CocoaPodsError('Command `pod install` failed.', 'COMMAND_FAILED', _context2.t0);\n\n            case 42:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[1, 7]], Promise);\n    }\n  }, {\n    key: \"addAsync\",\n    value: function addAsync() {\n      return _regeneratorRuntime.async(function addAsync$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              throw new Error('Unimplemented');\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"addDevAsync\",\n    value: function addDevAsync() {\n      return _regeneratorRuntime.async(function addDevAsync$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              throw new Error('Unimplemented');\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"versionAsync\",\n    value: function versionAsync() {\n      var _await$spawn_async_1$, stdout;\n\n      return _regeneratorRuntime.async(function versionAsync$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(spawn_async_1.default('pod', ['--version'], this.options));\n\n            case 2:\n              _await$spawn_async_1$ = _context5.sent;\n              stdout = _await$spawn_async_1$.stdout;\n              return _context5.abrupt(\"return\", stdout.trim());\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getConfigAsync\",\n    value: function getConfigAsync(key) {\n      return _regeneratorRuntime.async(function getConfigAsync$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              throw new Error('Unimplemented');\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"removeLockfileAsync\",\n    value: function removeLockfileAsync() {\n      return _regeneratorRuntime.async(function removeLockfileAsync$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              throw new Error('Unimplemented');\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"cleanAsync\",\n    value: function cleanAsync() {\n      return _regeneratorRuntime.async(function cleanAsync$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              throw new Error('Unimplemented');\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"podRepoUpdateAsync\",\n    value: function podRepoUpdateAsync() {\n      var _a;\n\n      return _regeneratorRuntime.async(function podRepoUpdateAsync$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return _regeneratorRuntime.awrap(this._runAsync(['repo', 'update']));\n\n            case 3:\n              _context9.next = 9;\n              break;\n\n            case 5:\n              _context9.prev = 5;\n              _context9.t0 = _context9[\"catch\"](0);\n              _context9.t0.message = _context9.t0.message || ((_a = _context9.t0.stderr) !== null && _a !== void 0 ? _a : _context9.t0.stdout);\n              throw new CocoaPodsError('The command `pod repo update` failed', 'COMMAND_FAILED', _context9.t0);\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this, [[0, 5]], Promise);\n    }\n  }, {\n    key: \"_runAsync\",\n    value: function _runAsync(args) {\n      return _regeneratorRuntime.async(function _runAsync$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              if (!this.silent) {\n                console.log(\"> pod \" + args.join(' '));\n              }\n\n              return _context10.abrupt(\"return\", spawn_async_1.default('pod', _toConsumableArray(args), this.options));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }], [{\n    key: \"getPodProjectRoot\",\n    value: function getPodProjectRoot(projectRoot) {\n      if (CocoaPodsPackageManager.isUsingPods(projectRoot)) return projectRoot;\n      var iosProject = path_1.default.join(projectRoot, 'ios');\n      if (CocoaPodsPackageManager.isUsingPods(iosProject)) return iosProject;\n      var macOsProject = path_1.default.join(projectRoot, 'macos');\n      if (CocoaPodsPackageManager.isUsingPods(macOsProject)) return macOsProject;\n      return null;\n    }\n  }, {\n    key: \"isUsingPods\",\n    value: function isUsingPods(projectRoot) {\n      return fs_1.existsSync(path_1.default.join(projectRoot, 'Podfile'));\n    }\n  }, {\n    key: \"gemInstallCLIAsync\",\n    value: function gemInstallCLIAsync() {\n      var nonInteractive,\n          spawnOptions,\n          options,\n          _args11 = arguments;\n      return _regeneratorRuntime.async(function gemInstallCLIAsync$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              nonInteractive = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : false;\n              spawnOptions = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {\n                stdio: 'inherit'\n              };\n              options = ['install', 'cocoapods', '--no-document'];\n              _context11.prev = 3;\n              _context11.next = 6;\n              return _regeneratorRuntime.awrap(spawn_async_1.default('gem', options, spawnOptions));\n\n            case 6:\n              _context11.next = 14;\n              break;\n\n            case 8:\n              _context11.prev = 8;\n              _context11.t0 = _context11[\"catch\"](3);\n\n              if (!nonInteractive) {\n                _context11.next = 12;\n                break;\n              }\n\n              throw new CocoaPodsError('Failed to install CocoaPods CLI with gem (recommended)', 'COMMAND_FAILED', _context11.t0);\n\n            case 12:\n              _context11.next = 14;\n              return _regeneratorRuntime.awrap(PackageManager_1.spawnSudoAsync(['gem'].concat(options), spawnOptions));\n\n            case 14:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, [[3, 8]], Promise);\n    }\n  }, {\n    key: \"brewLinkCLIAsync\",\n    value: function brewLinkCLIAsync() {\n      var spawnOptions,\n          _args12 = arguments;\n      return _regeneratorRuntime.async(function brewLinkCLIAsync$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              spawnOptions = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {\n                stdio: 'inherit'\n              };\n              _context12.next = 3;\n              return _regeneratorRuntime.awrap(spawn_async_1.default('brew', ['link', 'cocoapods'], spawnOptions));\n\n            case 3:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"brewInstallCLIAsync\",\n    value: function brewInstallCLIAsync() {\n      var spawnOptions,\n          _args13 = arguments;\n      return _regeneratorRuntime.async(function brewInstallCLIAsync$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              spawnOptions = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {\n                stdio: 'inherit'\n              };\n              _context13.next = 3;\n              return _regeneratorRuntime.awrap(spawn_async_1.default('brew', ['install', 'cocoapods'], spawnOptions));\n\n            case 3:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"installCLIAsync\",\n    value: function installCLIAsync(_ref4) {\n      var _ref4$nonInteractive, nonInteractive, _ref4$spawnOptions, spawnOptions, _a, silent;\n\n      return _regeneratorRuntime.async(function installCLIAsync$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _ref4$nonInteractive = _ref4.nonInteractive, nonInteractive = _ref4$nonInteractive === void 0 ? false : _ref4$nonInteractive, _ref4$spawnOptions = _ref4.spawnOptions, spawnOptions = _ref4$spawnOptions === void 0 ? {\n                stdio: 'inherit'\n              } : _ref4$spawnOptions;\n\n              if (!spawnOptions) {\n                spawnOptions = {\n                  stdio: 'inherit'\n                };\n              }\n\n              silent = !!spawnOptions.ignoreStdio;\n              _context14.prev = 3;\n              !silent && console.log(\"\\u203A Attempting to install CocoaPods CLI with Gem\");\n              _context14.next = 7;\n              return _regeneratorRuntime.awrap(CocoaPodsPackageManager.gemInstallCLIAsync(nonInteractive, spawnOptions));\n\n            case 7:\n              !silent && console.log(\"\\u203A Successfully installed CocoaPods CLI with Gem\");\n              return _context14.abrupt(\"return\", true);\n\n            case 11:\n              _context14.prev = 11;\n              _context14.t0 = _context14[\"catch\"](3);\n\n              if (!silent) {\n                console.log(chalk_1.default.yellow(\"\\u203A Failed to install CocoaPods CLI with Gem\"));\n                console.log(chalk_1.default.red((_a = _context14.t0.stderr) !== null && _a !== void 0 ? _a : _context14.t0.message));\n                console.log(\"\\u203A Attempting to install CocoaPods CLI with Homebrew\");\n              }\n\n              _context14.prev = 14;\n              _context14.next = 17;\n              return _regeneratorRuntime.awrap(CocoaPodsPackageManager.brewInstallCLIAsync(spawnOptions));\n\n            case 17:\n              _context14.next = 19;\n              return _regeneratorRuntime.awrap(CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions));\n\n            case 19:\n              if (_context14.sent) {\n                _context14.next = 32;\n                break;\n              }\n\n              _context14.prev = 20;\n              _context14.next = 23;\n              return _regeneratorRuntime.awrap(CocoaPodsPackageManager.brewLinkCLIAsync(spawnOptions));\n\n            case 23:\n              _context14.next = 25;\n              return _regeneratorRuntime.awrap(CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions));\n\n            case 25:\n              if (_context14.sent) {\n                _context14.next = 27;\n                break;\n              }\n\n              throw new CocoaPodsError('CLI could not be installed automatically with gem or Homebrew, please install CocoaPods manually and try again', 'NO_CLI', _context14.t0);\n\n            case 27:\n              _context14.next = 32;\n              break;\n\n            case 29:\n              _context14.prev = 29;\n              _context14.t1 = _context14[\"catch\"](20);\n              throw new CocoaPodsError('Homebrew installation appeared to succeed but CocoaPods CLI not found in PATH and unable to link.', 'NO_CLI', _context14.t1);\n\n            case 32:\n              !silent && console.log(\"\\u203A Successfully installed CocoaPods CLI with Homebrew\");\n              return _context14.abrupt(\"return\", true);\n\n            case 36:\n              _context14.prev = 36;\n              _context14.t2 = _context14[\"catch\"](14);\n              !silent && console.warn(chalk_1.default.yellow(\"\\u203A Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.\"));\n              throw new CocoaPodsError(\"Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.\", 'NO_CLI', _context14.t2);\n\n            case 40:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, null, null, [[3, 11], [14, 36], [20, 29]], Promise);\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable(projectRoot, silent) {\n      if (process.platform !== 'darwin') {\n        !silent && console.log(chalk_1.default.red('CocoaPods is only supported on macOS machines'));\n        return false;\n      }\n\n      if (!CocoaPodsPackageManager.isUsingPods(projectRoot)) {\n        !silent && console.log(chalk_1.default.yellow('CocoaPods is not supported in this project'));\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isCLIInstalledAsync\",\n    value: function isCLIInstalledAsync() {\n      var spawnOptions,\n          _args15 = arguments;\n      return _regeneratorRuntime.async(function isCLIInstalledAsync$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              spawnOptions = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {\n                stdio: 'inherit'\n              };\n              _context15.prev = 1;\n              _context15.next = 4;\n              return _regeneratorRuntime.awrap(spawn_async_1.default('pod', ['--version'], spawnOptions));\n\n            case 4:\n              return _context15.abrupt(\"return\", true);\n\n            case 7:\n              _context15.prev = 7;\n              _context15.t0 = _context15[\"catch\"](1);\n              return _context15.abrupt(\"return\", false);\n\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    }\n  }]);\n\n  return CocoaPodsPackageManager;\n}();\n\nexports.CocoaPodsPackageManager = CocoaPodsPackageManager;","map":{"version":3,"sources":["../src/CocoaPodsPackageManager.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { existsSync } from 'fs';\nimport { Ora } from 'ora';\nimport path from 'path';\n\nimport { PackageManager, spawnSudoAsync } from './PackageManager';\n\nexport type CocoaPodsErrorCode = 'NON_INTERACTIVE' | 'NO_CLI' | 'COMMAND_FAILED';\n\nexport class CocoaPodsError extends Error {\n  readonly name = 'CocoaPodsError';\n  readonly isPackageManagerError = true;\n\n  constructor(message: string, public code: CocoaPodsErrorCode, public cause?: Error) {\n    super(cause ? `${message}\\n└─ Cause: ${cause.message}` : message);\n  }\n}\n\nexport function extractMissingDependencyError(error: string): [string, string] | null {\n  // [!] Unable to find a specification for `expo-dev-menu-interface` depended upon by `expo-dev-launcher`\n  const results = error.match(\n    /Unable to find a specification for ['\"`]([\\w-_\\d\\s]+)['\"`] depended upon by ['\"`]([\\w-_\\d\\s]+)['\"`]/\n  );\n  if (results) {\n    return [results[1], results[2]];\n  }\n  return null;\n}\n\nexport class CocoaPodsPackageManager implements PackageManager {\n  options: SpawnOptions;\n\n  private silent: boolean;\n\n  static getPodProjectRoot(projectRoot: string): string | null {\n    if (CocoaPodsPackageManager.isUsingPods(projectRoot)) return projectRoot;\n    const iosProject = path.join(projectRoot, 'ios');\n    if (CocoaPodsPackageManager.isUsingPods(iosProject)) return iosProject;\n    const macOsProject = path.join(projectRoot, 'macos');\n    if (CocoaPodsPackageManager.isUsingPods(macOsProject)) return macOsProject;\n    return null;\n  }\n\n  static isUsingPods(projectRoot: string): boolean {\n    return existsSync(path.join(projectRoot, 'Podfile'));\n  }\n\n  static async gemInstallCLIAsync(\n    nonInteractive: boolean = false,\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    const options = ['install', 'cocoapods', '--no-document'];\n\n    try {\n      // In case the user has run sudo before running the command we can properly install CocoaPods without prompting for an interaction.\n      await spawnAsync('gem', options, spawnOptions);\n    } catch (error) {\n      if (nonInteractive) {\n        throw new CocoaPodsError(\n          'Failed to install CocoaPods CLI with gem (recommended)',\n          'COMMAND_FAILED',\n          error\n        );\n      }\n      // If the user doesn't have permission then we can prompt them to use sudo.\n      await spawnSudoAsync(['gem', ...options], spawnOptions);\n    }\n  }\n\n  static async brewLinkCLIAsync(spawnOptions: SpawnOptions = { stdio: 'inherit' }): Promise<void> {\n    await spawnAsync('brew', ['link', 'cocoapods'], spawnOptions);\n  }\n\n  static async brewInstallCLIAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<void> {\n    await spawnAsync('brew', ['install', 'cocoapods'], spawnOptions);\n  }\n\n  static async installCLIAsync({\n    nonInteractive = false,\n    spawnOptions = { stdio: 'inherit' },\n  }: {\n    nonInteractive?: boolean;\n    spawnOptions?: SpawnOptions;\n  }): Promise<boolean> {\n    if (!spawnOptions) {\n      spawnOptions = { stdio: 'inherit' };\n    }\n    const silent = !!spawnOptions.ignoreStdio;\n\n    try {\n      !silent && console.log(`\\u203A Attempting to install CocoaPods CLI with Gem`);\n      await CocoaPodsPackageManager.gemInstallCLIAsync(nonInteractive, spawnOptions);\n      !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Gem`);\n      return true;\n    } catch (error) {\n      if (!silent) {\n        console.log(chalk.yellow(`\\u203A Failed to install CocoaPods CLI with Gem`));\n        console.log(chalk.red(error.stderr ?? error.message));\n        console.log(`\\u203A Attempting to install CocoaPods CLI with Homebrew`);\n      }\n      try {\n        await CocoaPodsPackageManager.brewInstallCLIAsync(spawnOptions);\n        if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n          try {\n            await CocoaPodsPackageManager.brewLinkCLIAsync(spawnOptions);\n            // Still not available after linking? Bail out\n            if (!(await CocoaPodsPackageManager.isCLIInstalledAsync(spawnOptions))) {\n              throw new CocoaPodsError(\n                'CLI could not be installed automatically with gem or Homebrew, please install CocoaPods manually and try again',\n                'NO_CLI',\n                error\n              );\n            }\n          } catch (error) {\n            throw new CocoaPodsError(\n              'Homebrew installation appeared to succeed but CocoaPods CLI not found in PATH and unable to link.',\n              'NO_CLI',\n              error\n            );\n          }\n        }\n\n        !silent && console.log(`\\u203A Successfully installed CocoaPods CLI with Homebrew`);\n        return true;\n      } catch (error) {\n        !silent &&\n          console.warn(\n            chalk.yellow(\n              `\\u203A Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`\n            )\n          );\n        throw new CocoaPodsError(\n          `Failed to install CocoaPods with Homebrew. Please install CocoaPods CLI manually and try again.`,\n          'NO_CLI',\n          error\n        );\n      }\n    }\n  }\n\n  static isAvailable(projectRoot: string, silent: boolean): boolean {\n    if (process.platform !== 'darwin') {\n      !silent && console.log(chalk.red('CocoaPods is only supported on macOS machines'));\n      return false;\n    }\n    if (!CocoaPodsPackageManager.isUsingPods(projectRoot)) {\n      !silent && console.log(chalk.yellow('CocoaPods is not supported in this project'));\n      return false;\n    }\n    return true;\n  }\n\n  static async isCLIInstalledAsync(\n    spawnOptions: SpawnOptions = { stdio: 'inherit' }\n  ): Promise<boolean> {\n    try {\n      await spawnAsync('pod', ['--version'], spawnOptions);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  constructor({ cwd, silent }: { cwd: string; silent?: boolean }) {\n    this.silent = !!silent;\n    this.options = {\n      cwd,\n      ...(silent\n        ? { stdio: 'pipe' }\n        : {\n            stdio: ['inherit', 'inherit', 'pipe'],\n          }),\n    };\n  }\n\n  get name() {\n    return 'CocoaPods';\n  }\n\n  async installAsync({ spinner }: { spinner?: Ora } = {}) {\n    await this._installAsync({ spinner });\n  }\n\n  public isCLIInstalledAsync() {\n    return CocoaPodsPackageManager.isCLIInstalledAsync(this.options);\n  }\n\n  public installCLIAsync() {\n    return CocoaPodsPackageManager.installCLIAsync({\n      nonInteractive: true,\n      spawnOptions: this.options,\n    });\n  }\n\n  private async _installAsync({\n    spinner,\n    shouldUpdate = true,\n  }: { spinner?: Ora; shouldUpdate?: boolean } = {}): Promise<SpawnResult> {\n    try {\n      return await this._runAsync(['install']);\n    } catch (error) {\n      const output = error.output.join('\\n').trim();\n\n      const isPodRepoUpdateError = output.includes('pod repo update');\n      // When pods are outdated, they'll throw an error informing you to run \"pod repo update\"\n      // Attempt to run that command and try installing again.\n      if (isPodRepoUpdateError && shouldUpdate) {\n        const warningInfo = extractMissingDependencyError(output);\n        let message: string;\n        if (warningInfo) {\n          message = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}.`;\n        } else {\n          message = `Couldn't install Pods.`;\n        }\n        message += ` Updating the Pods project and trying again...`;\n        if (spinner) {\n          spinner.text = chalk.bold(message);\n        }\n        !this.silent && console.warn(chalk.yellow(message));\n        await this.podRepoUpdateAsync();\n        // Include a boolean to ensure pod repo update isn't invoked in the unlikely case where the pods fail to update.\n        return await this._installAsync({ spinner, shouldUpdate: false });\n      } else {\n        const cwd = this.options.cwd || process.cwd();\n        if (error.stdout.match(/No [`'\"]Podfile[`'\"] found in the project directory/)) {\n          error.message = `No Podfile found in directory: ${cwd}. Ensure CocoaPods is setup any try again.`;\n        } else if (isPodRepoUpdateError) {\n          const warningInfo = extractMissingDependencyError(output);\n          let reason: string;\n          if (warningInfo) {\n            reason = `Couldn't install: ${warningInfo[1]} » ${chalk.underline(warningInfo[0])}`;\n          } else {\n            reason = `This is often due to native package versions mismatching`;\n          }\n\n          let solution: string;\n          if (warningInfo?.[0]) {\n            // If the missing package is named `expo-dev-menu`, `react-native`, etc. then it might not be installed in the project.\n            if (warningInfo[0].match(/^(?:@?expo|@?react)(-|\\/)/)) {\n              solution = `Ensure the node module \"${warningInfo[0]}\" is installed in your project, then run \\`npx pod-install\\` to try again.`;\n            } else {\n              solution = `Ensure the CocoaPod \"${warningInfo[0]}\" is installed in your project, then run \\`npx pod-install\\` to try again.`;\n            }\n          } else {\n            solution = `Try deleting the \\`ios/Pods\\` folder or the \\`ios/Podfile.lock\\` file and running \\`npx pod-install\\` to resolve.`;\n          }\n          error.message = `${reason}. ${solution}`;\n          throw new CocoaPodsError('Command `pod repo update` failed.', 'COMMAND_FAILED', error);\n        } else {\n          let stderr = error.stderr.trim();\n\n          // CocoaPods CLI prints the useful error to stdout...\n          const usefulError = error.stdout.match(/\\[!\\]\\s((?:.|\\n)*)/)?.[1];\n\n          // If there is a useful error message then prune the less useful info.\n          if (usefulError) {\n            // Delete unhelpful CocoaPods CLI error message.\n            if (error.message.match(/pod exited with non-zero code: 1/)) {\n              error.message = null;\n            }\n            // Remove `<PBXResourcesBuildPhase UUID=`13B07F8E1A680F5B00A75B9A`>` type errors when useful messages exist.\n            if (stderr.match(/PBXResourcesBuildPhase/)) {\n              stderr = null;\n            }\n          }\n\n          error.message = [usefulError, error.message, stderr].filter(Boolean).join('\\n');\n        }\n\n        throw new CocoaPodsError('Command `pod install` failed.', 'COMMAND_FAILED', error);\n      }\n    }\n  }\n\n  async addAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async addDevAsync(...names: string[]) {\n    throw new Error('Unimplemented');\n  }\n\n  async versionAsync() {\n    const { stdout } = await spawnAsync('pod', ['--version'], this.options);\n    return stdout.trim();\n  }\n\n  async getConfigAsync(key: string): Promise<string> {\n    throw new Error('Unimplemented');\n  }\n\n  async removeLockfileAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  async cleanAsync() {\n    throw new Error('Unimplemented');\n  }\n\n  // Private\n  private async podRepoUpdateAsync(): Promise<void> {\n    try {\n      await this._runAsync(['repo', 'update']);\n    } catch (error) {\n      error.message = error.message || (error.stderr ?? error.stdout);\n\n      throw new CocoaPodsError('The command `pod repo update` failed', 'COMMAND_FAILED', error);\n    }\n  }\n\n  private async _runAsync(args: string[]): Promise<SpawnResult> {\n    if (!this.silent) {\n      console.log(`> pod ${args.join(' ')}`);\n    }\n    return spawnAsync('pod', [...args], this.options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}