{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar net_1 = __importDefault(require(\"net\"));\n\nvar tls_1 = require(\"tls\");\n\nvar url_1 = require(\"url\");\n\nvar JsInspector_1 = require(\"../JsInspector\");\n\nfunction createJsInspectorMiddleware() {\n  return function _callee(req, res, next) {\n    var _a, _url_1$URL, origin, searchParams, applicationId, app, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _url_1$URL = new url_1.URL((_a = req.url) !== null && _a !== void 0 ? _a : '/', getServerBase(req)), origin = _url_1$URL.origin, searchParams = _url_1$URL.searchParams;\n            applicationId = searchParams.get('applicationId');\n\n            if (applicationId) {\n              _context.next = 5;\n              break;\n            }\n\n            res.writeHead(400).end('Missing applicationId');\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(JsInspector_1.queryInspectorAppAsync(origin, applicationId));\n\n          case 7:\n            app = _context.sent;\n\n            if (app) {\n              _context.next = 11;\n              break;\n            }\n\n            res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (req.method === 'GET') {\n              data = JSON.stringify(app);\n              res.writeHead(200, {\n                'Content-Type': 'application/json; charset=UTF-8',\n                'Cache-Control': 'no-cache',\n                'Content-Length': data.length.toString()\n              });\n              res.end(data);\n            } else if (req.method === 'POST' || req.method === 'PUT') {\n              JsInspector_1.openJsInspector(app);\n              res.end();\n            } else {\n              res.writeHead(405);\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n}\n\nexports.default = createJsInspectorMiddleware;\n\nfunction getServerBase(req) {\n  var scheme = req.socket instanceof tls_1.TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  var _req$socket = req.socket,\n      localAddress = _req$socket.localAddress,\n      localPort = _req$socket.localPort;\n  var address = net_1.default.isIPv6(localAddress) ? \"[\" + localAddress + \"]\" : localAddress;\n  return scheme + \":\" + address + \":\" + localPort;\n}","map":{"version":3,"sources":["../../src/middleware/createJsInspectorMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,IAAA,KAAA,GAAA,eAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,kBAAA;;AAEA,SAAwB,2BAAxB,GAAmD;AACjD,SAAO,iBAAgB,GAAhB,EAAsC,GAAtC,EAA2D,IAA3D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBAC4B,IAAI,KAAA,CAAA,GAAJ,CAAQ,CAAA,EAAA,GAAA,GAAG,CAAC,GAAJ,MAAO,IAAP,IAAO,EAAA,KAAA,KAAA,CAAP,GAAO,EAAP,GAAW,GAAnB,EAAwB,aAAa,CAAC,GAAD,CAArC,CAD5B,EACG,MADH,cACG,MADH,EACW,YADX,cACW,YADX;AAEC,YAAA,aAFD,GAEiB,YAAY,CAAC,GAAb,CAAiB,eAAjB,CAFjB;;AAAA,gBAGA,aAHA;AAAA;AAAA;AAAA;;AAIH,YAAA,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB,GAAnB,CAAuB,uBAAvB;AAJG;;AAAA;AAAA;AAAA,6CAQa,aAAA,CAAA,sBAAA,CAAuB,MAAvB,EAA+B,aAA/B,CARb;;AAAA;AAQC,YAAA,GARD;;AAAA,gBASA,GATA;AAAA;AAAA;AAAA;;AAUH,YAAA,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB,GAAnB,CAAuB,4DAAvB;AAVG;;AAAA;AAcL,gBAAI,GAAG,CAAC,MAAJ,KAAe,KAAnB,EAA0B;AAClB,cAAA,IADkB,GACX,IAAI,CAAC,SAAL,CAAe,GAAf,CADW;AAExB,cAAA,GAAG,CAAC,SAAJ,CAAc,GAAd,EAAmB;AACjB,gCAAgB,iCADC;AAEjB,iCAAiB,UAFA;AAGjB,kCAAkB,IAAI,CAAC,MAAL,CAAY,QAAZ;AAHD,eAAnB;AAKA,cAAA,GAAG,CAAC,GAAJ,CAAQ,IAAR;AACD,aARD,MAQO,IAAI,GAAG,CAAC,MAAJ,KAAe,MAAf,IAAyB,GAAG,CAAC,MAAJ,KAAe,KAA5C,EAAmD;AACxD,cAAA,aAAA,CAAA,eAAA,CAAgB,GAAhB;AACA,cAAA,GAAG,CAAC,GAAJ;AACD,aAHM,MAGA;AACL,cAAA,GAAG,CAAC,SAAJ,CAAc,GAAd;AACD;;AA3BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA6BD;;AA9BD,OAAA,CAAA,OAAA,GAAA,2BAAA;;AAgCA,SAAS,aAAT,CAAuB,GAAvB,EAA2C;AACzC,MAAM,MAAM,GACV,GAAG,CAAC,MAAJ,YAAsB,KAAA,CAAA,SAAtB,IAAmC,GAAG,CAAC,MAAJ,CAAW,SAAX,KAAyB,IAA5D,GAAmE,OAAnE,GAA6E,MAD/E;AAEA,oBAAoC,GAAG,CAAC,MAAxC;AAAA,MAAQ,YAAR,eAAQ,YAAR;AAAA,MAAsB,SAAtB,eAAsB,SAAtB;AACA,MAAM,OAAO,GAAG,KAAA,CAAA,OAAA,CAAI,MAAJ,CAAW,YAAX,UAA+B,YAA/B,SAAiD,YAAjE;AACA,SAAU,MAAV,SAAoB,OAApB,SAA+B,SAA/B;AACD","sourcesContent":["import type { NextHandleFunction } from 'connect';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport net from 'net';\nimport { TLSSocket } from 'tls';\nimport { URL } from 'url';\n\nimport { openJsInspector, queryInspectorAppAsync } from '../JsInspector';\n\nexport default function createJsInspectorMiddleware(): NextHandleFunction {\n  return async function (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) {\n    const { origin, searchParams } = new URL(req.url ?? '/', getServerBase(req));\n    const applicationId = searchParams.get('applicationId');\n    if (!applicationId) {\n      res.writeHead(400).end('Missing applicationId');\n      return;\n    }\n\n    const app = await queryInspectorAppAsync(origin, applicationId);\n    if (!app) {\n      res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n      return;\n    }\n\n    if (req.method === 'GET') {\n      const data = JSON.stringify(app);\n      res.writeHead(200, {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Cache-Control': 'no-cache',\n        'Content-Length': data.length.toString(),\n      });\n      res.end(data);\n    } else if (req.method === 'POST' || req.method === 'PUT') {\n      openJsInspector(app);\n      res.end();\n    } else {\n      res.writeHead(405);\n    }\n  };\n}\n\nfunction getServerBase(req: IncomingMessage): string {\n  const scheme =\n    req.socket instanceof TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  const { localAddress, localPort } = req.socket;\n  const address = net.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}