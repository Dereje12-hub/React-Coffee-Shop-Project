{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.overrideWithPropertyOrConfig = exports.enableWithPropertyOrConfig = void 0;\n\nfunction isObject(val) {\n  if (val === null) {\n    return false;\n  }\n\n  return typeof val === 'function' || typeof val === 'object';\n}\n\nfunction enableWithPropertyOrConfig(prop, config) {\n  var merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (prop) {\n    if (isObject(prop)) {\n      if (merge) {\n        if (config == null || typeof config !== 'object') {\n          throw new Error('enableWithPropertyOrConfig cannot merge config: ' + config);\n        }\n\n        return _objectSpread(_objectSpread({}, config), prop);\n      }\n\n      return prop;\n    }\n\n    return config;\n  }\n\n  return prop;\n}\n\nexports.enableWithPropertyOrConfig = enableWithPropertyOrConfig;\n\nfunction overrideWithPropertyOrConfig(prop, config) {\n  var merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (prop === undefined) {\n    return config;\n  }\n\n  return enableWithPropertyOrConfig(prop, config, merge);\n}\n\nexports.overrideWithPropertyOrConfig = overrideWithPropertyOrConfig;","map":{"version":3,"sources":["../../src/utils/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,SAAS,QAAT,CAAkB,GAAlB,EAA0B;AACxB,MAAI,GAAG,KAAK,IAAZ,EAAkB;AAChB,WAAO,KAAP;AACD;;AACD,SAAO,OAAO,GAAP,KAAe,UAAf,IAA6B,OAAO,GAAP,KAAe,QAAnD;AACD;;AAUD,SAAgB,0BAAhB,CACE,IADF,EAEE,MAFF,EAGwB;AAAA,MAAtB,KAAsB,uEAAL,KAAK;;AAGtB,MAAI,IAAJ,EAAU;AACR,QAAI,QAAQ,CAAC,IAAD,CAAZ,EAAoB;AAClB,UAAI,KAAJ,EAAW;AACT,YAAI,MAAM,IAAI,IAAV,IAAkB,OAAO,MAAP,KAAkB,QAAxC,EAAkD;AAChD,gBAAM,IAAI,KAAJ,CAAU,qDAAqD,MAA/D,CAAN;AACD;;AACD,+CACK,MADL,GAEK,IAFL;AAID;;AAGD,aAAO,IAAP;AACD;;AAGD,WAAO,MAAP;AACD;;AAED,SAAO,IAAP;AACD;;AA3BD,OAAA,CAAA,0BAAA,GAAA,0BAAA;;AAkCA,SAAgB,4BAAhB,CACE,IADF,EAEE,MAFF,EAGwB;AAAA,MAAtB,KAAsB,uEAAL,KAAK;;AAEtB,MAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,WAAO,MAAP;AACD;;AACD,SAAO,0BAA0B,CAAC,IAAD,EAAO,MAAP,EAAe,KAAf,CAAjC;AACD;;AATD,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourcesContent":["function isObject(val: any): boolean {\n  if (val === null) {\n    return false;\n  }\n  return typeof val === 'function' || typeof val === 'object';\n}\n\n/**\n * Given a config option that could evalutate to true, config, or null; return a config.\n * e.g.\n * `polyfill: true` returns the `config`\n * `polyfill: {}` returns `{}`\n *\n * @category utils\n */\nexport function enableWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  // Value is truthy.\n  if (prop) {\n    if (isObject(prop)) {\n      if (merge) {\n        if (config == null || typeof config !== 'object') {\n          throw new Error('enableWithPropertyOrConfig cannot merge config: ' + config);\n        }\n        return {\n          ...config,\n          ...prop,\n        };\n      }\n\n      // Return property\n      return prop;\n    }\n\n    // Value is truthy but not a replacement config, thus return the default config.\n    return config;\n  }\n  // Return falsey.\n  return prop;\n}\n\n/**\n * Used for features that are enabled by default unless specified otherwise.\n *\n * @category utils\n */\nexport function overrideWithPropertyOrConfig(\n  prop: any,\n  config: boolean | { [key: string]: any },\n  merge: boolean = false\n): any {\n  if (prop === undefined) {\n    return config;\n  }\n  return enableWithPropertyOrConfig(prop, config, merge);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}