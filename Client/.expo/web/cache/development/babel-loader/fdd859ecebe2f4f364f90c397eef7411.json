{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersionName = getVersionName;\nexports.setVersionName = setVersionName;\nexports.getVersionCode = getVersionCode;\nexports.setVersionCode = setVersionCode;\nexports.withVersion = void 0;\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withVersion = function withVersion(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.versionCode', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withVersion = withVersion;\n\nfunction getVersionName(config) {\n  var _config$version;\n\n  return (_config$version = config.version) !== null && _config$version !== void 0 ? _config$version : null;\n}\n\nfunction setVersionName(config, buildGradle) {\n  var versionName = getVersionName(config);\n\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"versionName \\\".*\\\"\");\n  return buildGradle.replace(pattern, \"versionName \\\"\" + versionName + \"\\\"\");\n}\n\nfunction getVersionCode(config) {\n  var _config$android$versi, _config$android;\n\n  return (_config$android$versi = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.versionCode) !== null && _config$android$versi !== void 0 ? _config$android$versi : 1;\n}\n\nfunction setVersionCode(config, buildGradle) {\n  var versionCode = getVersionCode(config);\n\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  var pattern = new RegExp(\"versionCode.*\");\n  return buildGradle.replace(pattern, \"versionCode \" + versionCode);\n}","map":{"version":3,"sources":["../../src/android/Version.ts"],"names":["withVersion","config","setVersionCode","setVersionName","versionName","getVersionName","pattern","buildGradle","versionCode","getVersionCode"],"mappings":";;;;;;;;;;;AAGA,SAAA,eAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,8BAAA;;AAAA,EAAA,eAAA,GAAA,2BAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEO,IAAMA,WAAyB,GAAGC,SAA5BD,WAA4BC,CAAAA,MAAM,EAAI;AACjD,SAAO,CAAA,GAAA,eAAA,GAAA,kBAAA,EAAA,MAAA,EAA2BA,UAAAA,MAAM,EAAI;AAC1C,QAAIA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAA6C;AAC3CA,MAAAA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,GAA6BC,cAAc,CAAA,MAAA,EAASD,MAAM,CAANA,UAAAA,CAApDA,QAA2C,CAA3CA;AACAA,MAAAA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,GAA6BE,cAAc,CAAA,MAAA,EAASF,MAAM,CAANA,UAAAA,CAApDA,QAA2C,CAA3CA;AAFF,KAAA,MAGO;AACL,OAAA,GAAA,SAAA,GAAA,iBAAA,EAAA,qBAAA;AAID;;AACD,WAAA,MAAA;AAVF,GAAO,CAAP;AADK,CAAA;;;;AAeA,SAAA,cAAA,CAAA,MAAA,EAA6D;AAAA,MAAA,eAAA;;AAClE,SAAA,CAAA,eAAA,GAAOA,MAAM,CAAb,OAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,eAAA,GAAA,IAAA;AACD;;AAEM,SAAA,cAAA,CAAA,MAAA,EAAA,WAAA,EAAkF;AACvF,MAAMG,WAAW,GAAGC,cAAc,CAAlC,MAAkC,CAAlC;;AACA,MAAID,WAAW,KAAf,IAAA,EAA0B;AACxB,WAAA,WAAA;AACD;;AAED,MAAME,OAAO,GAAG,IAAhB,MAAgB,sBAAhB;AACA,SAAOC,WAAW,CAAXA,OAAAA,CAAAA,OAAAA,qBAAP,WAAOA,QAAP;AACD;;AAEM,SAAA,cAAA,CAAA,MAAA,EAA6D;AAAA,MAAA,qBAAA,EAAA,eAAA;;AAClE,SAAA,CAAA,qBAAA,GAAA,CAAA,eAAA,GAAON,MAAM,CAAb,OAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,eAAAA,CAAP,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,CAAA;AACD;;AAEM,SAAA,cAAA,CAAA,MAAA,EAAA,WAAA,EAAkF;AACvF,MAAMO,WAAW,GAAGC,cAAc,CAAlC,MAAkC,CAAlC;;AACA,MAAID,WAAW,KAAf,IAAA,EAA0B;AACxB,WAAA,WAAA;AACD;;AAED,MAAMF,OAAO,GAAG,IAAhB,MAAgB,iBAAhB;AACA,SAAOC,WAAW,CAAXA,OAAAA,CAAAA,OAAAA,mBAAP,WAAOA,CAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\n\nexport const withVersion: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.versionCode',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getVersionName(config: Pick<ExpoConfig, 'version'>) {\n  return config.version ?? null;\n}\n\nexport function setVersionName(config: Pick<ExpoConfig, 'version'>, buildGradle: string) {\n  const versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\n\nexport function getVersionCode(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.versionCode ?? 1;\n}\n\nexport function setVersionCode(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}\n"]},"metadata":{},"sourceType":"script"}