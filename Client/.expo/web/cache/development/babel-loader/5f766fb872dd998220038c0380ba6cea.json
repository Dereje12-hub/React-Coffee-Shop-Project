{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setStatusBarColors = setStatusBarColors;\nexports.setStatusBarStyles = setStatusBarStyles;\nexports.getStatusBarColor = getStatusBarColor;\nexports.getStatusBarTranslucent = getStatusBarTranslucent;\nexports.getStatusBarStyle = getStatusBarStyle;\nexports.withStatusBar = void 0;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Colors() {\n  var data = require(\"./Colors\");\n\n  _Colors = function _Colors() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Styles() {\n  var data = require(\"./Styles\");\n\n  _Styles = function _Styles() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nvar WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nvar WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nvar withStatusBar = function withStatusBar(config) {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nexports.withStatusBar = withStatusBar;\n\nvar withStatusBarColors = function withStatusBarColors(config) {\n  return (0, _androidPlugins().withAndroidColors)(config, function (config) {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nvar withStatusBarStyles = function withStatusBarStyles(config) {\n  return (0, _androidPlugins().withAndroidStyles)(config, function (config) {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nfunction setStatusBarColors(config, colors) {\n  return (0, _Colors().assignColorValue)(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config)\n  });\n}\n\nfunction setStatusBarStyles(config, styles) {\n  var hexString = getStatusBarColor(config);\n  var floatElement = getStatusBarTranslucent(config);\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    add: getStatusBarStyle(config) === 'dark-content'\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    add: floatElement\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: \"@color/\" + COLOR_PRIMARY_DARK_KEY,\n    add: !!hexString\n  });\n  return styles;\n}\n\nfunction getStatusBarColor(config) {\n  var _config$androidStatus;\n\n  var backgroundColor = (_config$androidStatus = config.androidStatusBar) === null || _config$androidStatus === void 0 ? void 0 : _config$androidStatus.backgroundColor;\n\n  if (backgroundColor) {\n    (0, _assert().default)(backgroundColor !== 'translucent', \"androidStatusBar.backgroundColor must be a valid hex string, instead got: \\\"\" + backgroundColor + \"\\\"\");\n  }\n\n  return backgroundColor;\n}\n\nfunction getStatusBarTranslucent(config) {\n  var _config$androidStatus2, _config$androidStatus3;\n\n  return (_config$androidStatus2 = (_config$androidStatus3 = config.androidStatusBar) === null || _config$androidStatus3 === void 0 ? void 0 : _config$androidStatus3.translucent) !== null && _config$androidStatus2 !== void 0 ? _config$androidStatus2 : false;\n}\n\nfunction getStatusBarStyle(config) {\n  var _config$androidStatus4;\n\n  return ((_config$androidStatus4 = config.androidStatusBar) === null || _config$androidStatus4 === void 0 ? void 0 : _config$androidStatus4.barStyle) || 'light-content';\n}","map":{"version":3,"sources":["../../src/android/StatusBar.ts"],"names":["COLOR_PRIMARY_DARK_KEY","WINDOW_TRANSLUCENT_STATUS","WINDOW_LIGHT_STATUS_BAR","withStatusBar","config","withStatusBarColors","withStatusBarStyles","setStatusBarColors","setStatusBarStyles","name","value","getStatusBarColor","hexString","floatElement","getStatusBarTranslucent","styles","parent","targetApi","add","getStatusBarStyle","backgroundColor"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\n// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\n// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\n// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n  const floatElement = getStatusBarTranslucent(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: floatElement,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\n/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */\nexport function getStatusBarTranslucent(config: Pick<ExpoConfig, 'androidStatusBar'>): boolean {\n  return config.androidStatusBar?.translucent ?? false;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"]},"metadata":{},"sourceType":"script"}