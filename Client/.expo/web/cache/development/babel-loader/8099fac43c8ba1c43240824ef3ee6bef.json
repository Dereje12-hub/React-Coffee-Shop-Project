{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUpdateUrl = getUpdateUrl;\nexports.getNativeVersion = getNativeVersion;\nexports.getRuntimeVersion = getRuntimeVersion;\nexports.withRuntimeVersion = void 0;\n\nfunction _sdkRuntimeVersions() {\n  var data = require(\"@expo/sdk-runtime-versions\");\n\n  _sdkRuntimeVersions = function _sdkRuntimeVersions() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _() {\n  var data = require(\"..\");\n\n  _ = function _() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction getUpdateUrl(config, username) {\n  var _config$updates;\n\n  if ((_config$updates = config.updates) !== null && _config$updates !== void 0 && _config$updates.url) {\n    var _config$updates2;\n\n    return (_config$updates2 = config.updates) === null || _config$updates2 === void 0 ? void 0 : _config$updates2.url;\n  }\n\n  var user = typeof config.owner === 'string' ? config.owner : username;\n\n  if (!user) {\n    return null;\n  }\n\n  return \"https://exp.host/@\" + user + \"/\" + config.slug;\n}\n\nfunction getNativeVersion(config, platform) {\n  var version = _().IOSConfig.Version.getVersion(config);\n\n  switch (platform) {\n    case 'ios':\n      {\n        var buildNumber = _().IOSConfig.Version.getBuildNumber(config);\n\n        return version + \"(\" + buildNumber + \")\";\n      }\n\n    case 'android':\n      {\n        var versionCode = _().AndroidConfig.Version.getVersionCode(config);\n\n        return version + \"(\" + versionCode + \")\";\n      }\n\n    default:\n      {\n        throw new Error(\"\\\"\" + platform + \"\\\" is not a supported platform. Choose either \\\"ios\\\" or \\\"android\\\".\");\n      }\n  }\n}\n\nvar withRuntimeVersion = function withRuntimeVersion(config) {\n  var _config$ios, _config$android;\n\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.runtimeVersion || config.runtimeVersion) {\n    config.ios = _objectSpread(_objectSpread({}, config.ios), {}, {\n      runtimeVersion: getRuntimeVersion(config, 'ios')\n    });\n  }\n\n  if ((_config$android = config.android) !== null && _config$android !== void 0 && _config$android.runtimeVersion || config.runtimeVersion) {\n    config.android = _objectSpread(_objectSpread({}, config.android), {}, {\n      runtimeVersion: getRuntimeVersion(config, 'android')\n    });\n  }\n\n  delete config.runtimeVersion;\n  return config;\n};\n\nexports.withRuntimeVersion = withRuntimeVersion;\n\nfunction getRuntimeVersion(config, platform) {\n  var _config$platform$runt, _config$platform;\n\n  var runtimeVersion = (_config$platform$runt = (_config$platform = config[platform]) === null || _config$platform === void 0 ? void 0 : _config$platform.runtimeVersion) !== null && _config$platform$runt !== void 0 ? _config$platform$runt : config.runtimeVersion;\n\n  if (!runtimeVersion) {\n    throw new Error(\"There is neither a value or a policy set for the runtime version on \\\"\" + platform + \"\\\"\");\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n\n    return (0, _sdkRuntimeVersions().getRuntimeVersionForSDKVersion)(config.sdkVersion);\n  }\n\n  throw new Error(\"\\\"\" + (typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion) + \"\\\" is not a valid runtime version. getRuntimeVersion only supports a string, \\\"sdkVersion\\\", or \\\"nativeVersion\\\" policy.\");\n}","map":{"version":3,"sources":["../../src/utils/Updates.ts"],"names":["config","user","version","IOSConfig","buildNumber","versionCode","AndroidConfig","withRuntimeVersion","runtimeVersion","getRuntimeVersion","getNativeVersion","JSON"],"mappings":"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","sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\n\nimport { AndroidConfig, IOSConfig } from '..';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): string | null {\n  if (config.updates?.url) {\n    return config.updates?.url;\n  }\n\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig = config => {\n  if (config.ios?.runtimeVersion || config.runtimeVersion) {\n    config.ios = {\n      ...config.ios,\n      runtimeVersion: getRuntimeVersion(config, 'ios'),\n    };\n  }\n  if (config.android?.runtimeVersion || config.runtimeVersion) {\n    config.android = {\n      ...config.android,\n      runtimeVersion: getRuntimeVersion(config, 'android'),\n    };\n  }\n  delete config.runtimeVersion;\n  return config;\n};\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    throw new Error(\n      `There is neither a value or a policy set for the runtime version on \"${platform}\"`\n    );\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", or \"nativeVersion\" policy.`\n  );\n}\n"]},"metadata":{},"sourceType":"script"}