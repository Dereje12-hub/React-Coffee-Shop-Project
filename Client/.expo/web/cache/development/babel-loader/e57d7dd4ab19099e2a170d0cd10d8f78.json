{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDevServerMiddleware = createDevServerMiddleware;\nObject.defineProperty(exports, \"devToolsMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _devToolsMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"indexPageMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _indexPageMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"openStackFrameInEditorMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _openStackFrameInEditorMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"openURLMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _openURLMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"rawBodyMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _rawBodyMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"securityHeadersMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _securityHeadersMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"statusPageMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _statusPageMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"systraceProfileMiddleware\", {\n  enumerable: true,\n  get: function get() {\n    return _systraceProfileMiddleware.default;\n  }\n});\nObject.defineProperty(exports, \"debuggerProxyServer\", {\n  enumerable: true,\n  get: function get() {\n    return _debuggerProxyServer.default;\n  }\n});\nObject.defineProperty(exports, \"eventsSocketServer\", {\n  enumerable: true,\n  get: function get() {\n    return _eventsSocketServer.default;\n  }\n});\nObject.defineProperty(exports, \"messageSocketServer\", {\n  enumerable: true,\n  get: function get() {\n    return _messageSocketServer.default;\n  }\n});\n\nfunction _compression() {\n  var data = _interopRequireDefault(require(\"compression\"));\n\n  _compression = function _compression() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _connect() {\n  var data = _interopRequireDefault(require(\"connect\"));\n\n  _connect = function _connect() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _errorhandler() {\n  var data = _interopRequireDefault(require(\"errorhandler\"));\n\n  _errorhandler = function _errorhandler() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _nocache() {\n  var data = _interopRequireDefault(require(\"nocache\"));\n\n  _nocache = function _nocache() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _serveStatic() {\n  var data = _interopRequireDefault(require(\"serve-static\"));\n\n  _serveStatic = function _serveStatic() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _cliDebuggerUi() {\n  var data = require(\"@react-native-community/cli-debugger-ui\");\n\n  _cliDebuggerUi = function _cliDebuggerUi() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _devToolsMiddleware = _interopRequireDefault(require(\"./devToolsMiddleware\"));\n\nvar _indexPageMiddleware = _interopRequireDefault(require(\"./indexPageMiddleware\"));\n\nvar _openStackFrameInEditorMiddleware = _interopRequireDefault(require(\"./openStackFrameInEditorMiddleware\"));\n\nvar _openURLMiddleware = _interopRequireDefault(require(\"./openURLMiddleware\"));\n\nvar _rawBodyMiddleware = _interopRequireDefault(require(\"./rawBodyMiddleware\"));\n\nvar _securityHeadersMiddleware = _interopRequireDefault(require(\"./securityHeadersMiddleware\"));\n\nvar _statusPageMiddleware = _interopRequireDefault(require(\"./statusPageMiddleware\"));\n\nvar _systraceProfileMiddleware = _interopRequireDefault(require(\"./systraceProfileMiddleware\"));\n\nvar _debuggerProxyServer = _interopRequireDefault(require(\"./websocket/debuggerProxyServer\"));\n\nvar _eventsSocketServer = _interopRequireDefault(require(\"./websocket/eventsSocketServer\"));\n\nvar _messageSocketServer = _interopRequireDefault(require(\"./websocket/messageSocketServer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction createDevServerMiddleware(options) {\n  var isDebuggerConnected = function isDebuggerConnected() {\n    return false;\n  };\n\n  var broadcast = function broadcast(_event) {};\n\n  var middleware = (0, _connect().default)().use(_securityHeadersMiddleware.default).use((0, _compression().default)()).use((0, _nocache().default)()).use('/debugger-ui', (0, _cliDebuggerUi().debuggerUIMiddleware)()).use('/launch-js-devtools', (0, _devToolsMiddleware.default)(options, function () {\n    return isDebuggerConnected();\n  })).use('/open-stack-frame', (0, _openStackFrameInEditorMiddleware.default)(options)).use('/open-url', _openURLMiddleware.default).use('/status', _statusPageMiddleware.default).use('/symbolicate', _rawBodyMiddleware.default).use('/systrace', _systraceProfileMiddleware.default).use('/reload', function (_req, res) {\n    broadcast('reload');\n    res.end('OK');\n  }).use((0, _errorhandler().default)());\n  options.watchFolders.forEach(function (folder) {\n    middleware.use((0, _serveStatic().default)(folder));\n  });\n  return {\n    attachToServer: function attachToServer(server) {\n      var debuggerProxy = _debuggerProxyServer.default.attachToServer(server, '/debugger-proxy');\n\n      var messageSocket = _messageSocketServer.default.attachToServer(server, '/message');\n\n      broadcast = messageSocket.broadcast;\n      isDebuggerConnected = debuggerProxy.isDebuggerConnected;\n\n      var eventsSocket = _eventsSocketServer.default.attachToServer(server, '/events', messageSocket);\n\n      return {\n        debuggerProxy: debuggerProxy,\n        eventsSocket: eventsSocket,\n        messageSocket: messageSocket\n      };\n    },\n    middleware: middleware\n  };\n}","map":{"version":3,"sources":["../src/index.ts"],"names":["isDebuggerConnected","broadcast","_event","middleware","securityHeadersMiddleware","openURLMiddleware","statusPageMiddleware","rawBodyMiddleware","systraceProfileMiddleware","res","options","folder","attachToServer","debuggerProxy","debuggerProxyServer","messageSocket","messageSocketServer","eventsSocket","eventsSocketServer"],"mappings":"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","sourcesContent":["import http, {Server as HttpServer} from 'http';\nimport {Server as HttpsServer} from 'https';\n\nimport compression from 'compression';\nimport connect from 'connect';\nimport errorhandler from 'errorhandler';\nimport nocache from 'nocache';\nimport serveStatic from 'serve-static';\nimport {debuggerUIMiddleware} from '@react-native-community/cli-debugger-ui';\n\nimport devToolsMiddleware from './devToolsMiddleware';\nimport indexPageMiddleware from './indexPageMiddleware';\nimport openStackFrameInEditorMiddleware from './openStackFrameInEditorMiddleware';\nimport openURLMiddleware from './openURLMiddleware';\nimport rawBodyMiddleware from './rawBodyMiddleware';\nimport securityHeadersMiddleware from './securityHeadersMiddleware';\nimport statusPageMiddleware from './statusPageMiddleware';\nimport systraceProfileMiddleware from './systraceProfileMiddleware';\n\nimport debuggerProxyServer from './websocket/debuggerProxyServer';\nimport eventsSocketServer from './websocket/eventsSocketServer';\nimport messageSocketServer from './websocket/messageSocketServer';\n\nexport {devToolsMiddleware};\nexport {indexPageMiddleware};\nexport {openStackFrameInEditorMiddleware};\nexport {openURLMiddleware};\nexport {rawBodyMiddleware};\nexport {securityHeadersMiddleware};\nexport {statusPageMiddleware};\nexport {systraceProfileMiddleware};\n\nexport {debuggerProxyServer};\nexport {eventsSocketServer};\nexport {messageSocketServer};\n\ntype MiddlewareOptions = {\n  host?: string;\n  watchFolders: ReadonlyArray<string>;\n  port: number;\n};\n\nexport function createDevServerMiddleware(options: MiddlewareOptions) {\n  let isDebuggerConnected = () => false;\n  let broadcast = (_event: any) => {};\n\n  const middleware = connect()\n    .use(securityHeadersMiddleware)\n    // @ts-ignore compression and connect types mismatch\n    .use(compression())\n    .use(nocache())\n    .use('/debugger-ui', debuggerUIMiddleware())\n    .use(\n      '/launch-js-devtools',\n      devToolsMiddleware(options, () => isDebuggerConnected()),\n    )\n    .use('/open-stack-frame', openStackFrameInEditorMiddleware(options))\n    .use('/open-url', openURLMiddleware)\n    .use('/status', statusPageMiddleware)\n    .use('/symbolicate', rawBodyMiddleware)\n    .use('/systrace', systraceProfileMiddleware)\n    .use('/reload', (_req: http.IncomingMessage, res: http.ServerResponse) => {\n      broadcast('reload');\n      res.end('OK');\n    })\n    .use(errorhandler());\n\n  options.watchFolders.forEach((folder) => {\n    // @ts-ignore mismatch between express and connect middleware types\n    middleware.use(serveStatic(folder));\n  });\n\n  return {\n    attachToServer(server: HttpServer | HttpsServer) {\n      const debuggerProxy = debuggerProxyServer.attachToServer(\n        server,\n        '/debugger-proxy',\n      );\n      const messageSocket = messageSocketServer.attachToServer(\n        server,\n        '/message',\n      );\n      broadcast = messageSocket.broadcast;\n      isDebuggerConnected = debuggerProxy.isDebuggerConnected;\n      const eventsSocket = eventsSocketServer.attachToServer(\n        server,\n        '/events',\n        messageSocket,\n      );\n      return {\n        debuggerProxy,\n        eventsSocket,\n        messageSocket,\n      };\n    },\n    middleware,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}