{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleServicesFilePath = getGoogleServicesFilePath;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.setClassPath = setClassPath;\nexports.applyPlugin = applyPlugin;\nexports.withGoogleServicesFile = exports.withApplyPlugin = exports.withClassPath = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DEFAULT_TARGET_PATH = './android/app/google-services.json';\nvar googleServicesClassPath = 'com.google.gms:google-services';\nvar googleServicesPlugin = 'com.google.gms.google-services';\nvar googleServicesVersion = '4.3.3';\n\nvar withClassPath = function withClassPath(config) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure project build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withClassPath = withClassPath;\n\nvar withApplyPlugin = function withApplyPlugin(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n\n    return config;\n  });\n};\n\nexports.withApplyPlugin = withApplyPlugin;\n\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function _callee(config) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(setGoogleServicesFile(config, config.modRequest.projectRoot));\n\n          case 2:\n            return _context.abrupt(\"return\", config);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nexports.withGoogleServicesFile = withGoogleServicesFile;\n\nfunction getGoogleServicesFilePath(config) {\n  var _config$android$googl, _config$android;\n\n  return (_config$android$googl = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.googleServicesFile) !== null && _config$android$googl !== void 0 ? _config$android$googl : null;\n}\n\nfunction setGoogleServicesFile(config, projectRoot) {\n  var targetPath,\n      partialSourcePath,\n      completeSourcePath,\n      destinationPath,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function setGoogleServicesFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          targetPath = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : DEFAULT_TARGET_PATH;\n          partialSourcePath = getGoogleServicesFilePath(config);\n\n          if (partialSourcePath) {\n            _context2.next = 4;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", false);\n\n        case 4:\n          completeSourcePath = (0, _path().resolve)(projectRoot, partialSourcePath);\n          destinationPath = (0, _path().resolve)(projectRoot, targetPath);\n          _context2.prev = 6;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(_fsExtra().default.copy(completeSourcePath, destinationPath));\n\n        case 9:\n          _context2.next = 14;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](6);\n          throw new Error(\"Cannot copy google-services.json from \" + completeSourcePath + \" to \" + destinationPath + \". Please make sure the source and destination paths exist.\");\n\n        case 14:\n          return _context2.abrupt(\"return\", true);\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[6, 11]], Promise);\n}\n\nfunction setClassPath(config, buildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  return buildGradle.replace(/dependencies\\s?{/, \"dependencies {\\n        classpath '\" + googleServicesClassPath + \":\" + googleServicesVersion + \"'\");\n}\n\nfunction applyPlugin(config, appBuildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  var pattern = new RegExp(\"apply\\\\s+plugin:\\\\s+['\\\"]\" + googleServicesPlugin + \"['\\\"]\");\n\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  return appBuildGradle + (\"\\napply plugin: '\" + googleServicesPlugin + \"'\");\n}","map":{"version":3,"sources":["../../src/android/GoogleServices.ts"],"names":["DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","setClassPath","withApplyPlugin","applyPlugin","withGoogleServicesFile","setGoogleServicesFile","targetPath","partialSourcePath","getGoogleServicesFilePath","completeSourcePath","destinationPath","fs","googleServicesFile","buildGradle","pattern","appBuildGradle"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport { resolve } from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = resolve(projectRoot, partialSourcePath);\n  const destinationPath = resolve(projectRoot, targetPath);\n\n  try {\n    await fs.copy(completeSourcePath, destinationPath);\n  } catch (e) {\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"]},"metadata":{},"sourceType":"script"}