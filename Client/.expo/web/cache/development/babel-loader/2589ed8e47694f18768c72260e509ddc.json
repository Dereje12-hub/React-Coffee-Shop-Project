{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNativeModuleFileExtensions = exports.getModuleFileExtensions = void 0;\n\nvar paths_1 = require(\"@expo/config/paths\");\n\nfunction getModuleFileExtensions() {\n  for (var _len = arguments.length, platforms = new Array(_len), _key = 0; _key < _len; _key++) {\n    platforms[_key] = arguments[_key];\n  }\n\n  return paths_1.getBareExtensions(platforms).map(function (value) {\n    return \".\" + value;\n  });\n}\n\nexports.getModuleFileExtensions = getModuleFileExtensions;\n\nfunction getNativeModuleFileExtensions() {\n  for (var _len2 = arguments.length, platforms = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    platforms[_key2] = arguments[_key2];\n  }\n\n  return paths_1.getBareExtensions(platforms, {\n    isReact: true,\n    isTS: true,\n    isModern: false\n  }).map(function (value) {\n    return \".\" + value;\n  });\n}\n\nexports.getNativeModuleFileExtensions = getNativeModuleFileExtensions;","map":{"version":3,"sources":["../../src/env/extensions.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAQA,SAAgB,uBAAhB,GAA8D;AAAA,oCAAnB,SAAmB;AAAnB,IAAA,SAAmB;AAAA;;AAE5D,SAAO,OAAA,CAAA,iBAAA,CAAkB,SAAlB,EAA6B,GAA7B,CAAiC,UAAA,KAAK;AAAA,iBAAQ,KAAR;AAAA,GAAtC,CAAP;AACD;;AAHD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAKA,SAAgB,6BAAhB,GAAoE;AAAA,qCAAnB,SAAmB;AAAnB,IAAA,SAAmB;AAAA;;AAGlE,SAAO,OAAA,CAAA,iBAAA,CAAkB,SAAlB,EAA6B;AAAE,IAAA,OAAO,EAAE,IAAX;AAAiB,IAAA,IAAI,EAAE,IAAvB;AAA6B,IAAA,QAAQ,EAAE;AAAvC,GAA7B,EAA6E,GAA7E,CACL,UAAA,KAAK;AAAA,iBAAQ,KAAR;AAAA,GADA,CAAP;AAGD;;AAND,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourcesContent":["import { getBareExtensions } from '@expo/config/paths';\n\n/**\n * Get the platform specific platform extensions in the format that Webpack expects (with a dot prefix).\n *\n * @param platforms supported platforms in order of priority. ex: ios, android, web, native, electron, etc...\n * @category env\n */\nexport function getModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  return getBareExtensions(platforms).map(value => `.${value}`);\n}\n\nexport function getNativeModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  // Disable modern when using `react-native`\n  return getBareExtensions(platforms, { isReact: true, isTS: true, isModern: false }).map(\n    value => `.${value}`\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}