{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeAndEvaluate = serializeAndEvaluate;\nexports.serializeSkippingMods = serializeSkippingMods;\nexports.serializeAfterStaticPlugins = serializeAfterStaticPlugins;\n\nfunction _Errors() {\n  var data = require(\"./Errors\");\n\n  _Errors = function _Errors() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction serializeAndEvaluate(val) {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n\n    return output;\n  }\n\n  throw new (_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\n\nfunction serializeSkippingMods(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return serializeAndEvaluate(val);\n}\n\nfunction serializeAndEvaluatePlugin(val) {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    var _val$name;\n\n    return (_val$name = val.name) !== null && _val$name !== void 0 ? _val$name : 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n\n    return output;\n  }\n\n  throw new (_Errors().ConfigError)(\"Expo config doesn't support `Symbols`: \" + val, 'INVALID_CONFIG');\n}\n\nfunction serializeAfterStaticPlugins(val) {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    var output = {};\n\n    for (var property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n\n    return output;\n  }\n\n  return serializeAndEvaluate(val);\n}","map":{"version":3,"sources":["../src/Serialize.ts"],"names":["val","Array","output","serializeAndEvaluate","ConfigError","property","serializeAndEvaluatePlugin"],"mappings":";;;;;;;;;AAAA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,YAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEO,SAAA,oBAAA,CAAA,GAAA,EAA6C;AAClD,MAAI,CAAA,WAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,CAAgE,OAApE,GAAI,CAAJ,EAAiF;AAC/E,WAAA,GAAA;AADF,GAAA,MAEO,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAEpC,WAAOA,GAAP,EAAA;AAFK,GAAA,MAGA,IAAIC,KAAK,CAALA,OAAAA,CAAJ,GAAIA,CAAJ,EAAwB;AAC7B,WAAOD,GAAG,CAAHA,GAAAA,CAAP,oBAAOA,CAAP;AADK,GAAA,MAEA,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAClC,QAAME,MAA8B,GAApC,EAAA;;AACA,SAAK,IAAL,QAAA,IAAA,GAAA,EAA4B;AAC1B,UAAIF,GAAG,CAAHA,cAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChCE,QAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBC,oBAAoB,CAACH,GAAG,CAA3CE,QAA2C,CAAJ,CAAvCA;AACD;AACF;;AACD,WAAA,MAAA;AAfgD;;AAkBlD,QAAM,KAAIE,OAAAA,GAAJ,WAAA,8CAAA,GAAA,EAAN,gBAAM,CAAN;AACD;;AAEM,SAAA,qBAAA,CAAA,GAAA,EAA8C;AACnD,MAAI,OAAA,GAAA,KAAA,QAAA,IAA2B,CAACH,KAAK,CAALA,OAAAA,CAAhC,GAAgCA,CAAhC,EAAoD;AAClD,QAAMC,MAA8B,GAApC,EAAA;;AACA,SAAK,IAAL,QAAA,IAAA,GAAA,EAA4B;AAC1B,UAAIF,GAAG,CAAHA,cAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChC,YAAIK,QAAQ,KAARA,MAAAA,IAAuBA,QAAQ,KAAnC,SAAA,EAAmD;AAEjDH,UAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBF,GAAG,CAAtBE,QAAsB,CAAtBA;AAFF,SAAA,MAGO;AACLA,UAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBC,oBAAoB,CAACH,GAAG,CAA3CE,QAA2C,CAAJ,CAAvCA;AACD;AACF;AACF;;AACD,WAAA,MAAA;AACD;;AACD,SAAOC,oBAAoB,CAA3B,GAA2B,CAA3B;AACD;;AAED,SAAA,0BAAA,CAAA,GAAA,EAAmD;AACjD,MAAI,CAAA,WAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,CAAgE,OAApE,GAAI,CAAJ,EAAiF;AAC/E,WAAA,GAAA;AADF,GAAA,MAEO,IAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAAA,QAAA,SAAA;;AACpC,WAAA,CAAA,SAAA,GAAOH,GAAG,CAAV,IAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,eAAA;AADK,GAAA,MAEA,IAAIC,KAAK,CAALA,OAAAA,CAAJ,GAAIA,CAAJ,EAAwB;AAC7B,WAAOD,GAAG,CAAHA,GAAAA,CAAP,0BAAOA,CAAP;AADK,GAAA,MAEA,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAClC,QAAME,MAA8B,GAApC,EAAA;;AACA,SAAK,IAAL,QAAA,IAAA,GAAA,EAA4B;AAC1B,UAAIF,GAAG,CAAHA,cAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChCE,QAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBI,0BAA0B,CAACN,GAAG,CAAjDE,QAAiD,CAAJ,CAA7CA;AACD;AACF;;AACD,WAAA,MAAA;AAd+C;;AAiBjD,QAAM,KAAIE,OAAAA,GAAJ,WAAA,8CAAA,GAAA,EAAN,gBAAM,CAAN;AACD;;AAEM,SAAA,2BAAA,CAAA,GAAA,EAAoD;AACzD,MAAI,OAAA,GAAA,KAAA,QAAA,IAA2B,CAACH,KAAK,CAALA,OAAAA,CAAhC,GAAgCA,CAAhC,EAAoD;AAClD,QAAMC,MAA8B,GAApC,EAAA;;AACA,SAAK,IAAL,QAAA,IAAA,GAAA,EAA4B;AAC1B,UAAIF,GAAG,CAAHA,cAAAA,CAAJ,QAAIA,CAAJ,EAAkC;AAChC,YAAIK,QAAQ,KAAZ,MAAA,EAAyB;AAEvBH,UAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBF,GAAG,CAAtBE,QAAsB,CAAtBA;AAFF,SAAA,MAGO,IAAIG,QAAQ,KAARA,SAAAA,IAA0BJ,KAAK,CAALA,OAAAA,CAAcD,GAAG,CAA/C,QAA+C,CAAjBC,CAA9B,EAA4D;AAEjEC,UAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBF,GAAG,CAAHA,QAAG,CAAHA,CAAAA,GAAAA,CAAnBE,0BAAmBF,CAAnBE;AAFK,SAAA,MAGA;AACLA,UAAAA,MAAM,CAANA,QAAM,CAANA,GAAmBC,oBAAoB,CAACH,GAAG,CAA3CE,QAA2C,CAAJ,CAAvCA;AACD;AACF;AACF;;AACD,WAAA,MAAA;AACD;;AACD,SAAOC,oBAAoB,CAA3B,GAA2B,CAA3B;AACD","sourcesContent":["import { ConfigError } from './Errors';\n\nexport function serializeAndEvaluate(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    // TODO: Bacon: Should we support async methods?\n    return val();\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluate);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluate(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeSkippingMods(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods' || property === 'plugins') {\n          // Don't serialize mods or plugins\n          output[property] = val[property];\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n\nfunction serializeAndEvaluatePlugin(val: any): any {\n  if (['undefined', 'string', 'boolean', 'number', 'bigint'].includes(typeof val)) {\n    return val;\n  } else if (typeof val === 'function') {\n    return val.name ?? 'withAnonymous';\n  } else if (Array.isArray(val)) {\n    return val.map(serializeAndEvaluatePlugin);\n  } else if (typeof val === 'object') {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        output[property] = serializeAndEvaluatePlugin(val[property]);\n      }\n    }\n    return output;\n  }\n  // symbol\n  throw new ConfigError(`Expo config doesn't support \\`Symbols\\`: ${val}`, 'INVALID_CONFIG');\n}\n\nexport function serializeAfterStaticPlugins(val: any): any {\n  if (typeof val === 'object' && !Array.isArray(val)) {\n    const output: { [key: string]: any } = {};\n    for (const property in val) {\n      if (val.hasOwnProperty(property)) {\n        if (property === 'mods') {\n          // Don't serialize mods\n          output[property] = val[property];\n        } else if (property === 'plugins' && Array.isArray(val[property])) {\n          // Serialize the mods by removing any config plugins\n          output[property] = val[property].map(serializeAndEvaluatePlugin);\n        } else {\n          output[property] = serializeAndEvaluate(val[property]);\n        }\n      }\n    }\n    return output;\n  }\n  return serializeAndEvaluate(val);\n}\n"]},"metadata":{},"sourceType":"script"}