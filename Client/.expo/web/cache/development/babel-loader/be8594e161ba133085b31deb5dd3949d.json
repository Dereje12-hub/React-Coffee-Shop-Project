{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getScheme = getScheme;\nexports.setScheme = setScheme;\nexports.getSchemesFromManifest = getSchemesFromManifest;\nexports.ensureManifestHasValidIntentFilter = ensureManifestHasValidIntentFilter;\nexports.hasScheme = hasScheme;\nexports.appendScheme = appendScheme;\nexports.removeScheme = removeScheme;\nexports.withScheme = void 0;\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withScheme = (0, _androidPlugins().createAndroidManifestPlugin)(setScheme, 'withScheme');\nexports.withScheme = withScheme;\n\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n\n  return [];\n}\n\nfunction setScheme(config, androidManifest) {\n  var _config$android, _config$android2;\n\n  var schemes = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$android = config.android) !== null && _config$android !== void 0 ? _config$android : {})));\n\n  if ((_config$android2 = config.android) !== null && _config$android2 !== void 0 && _config$android2.package) {\n    schemes.push(config.android.package);\n  }\n\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    (0, _warnings().addWarningAndroid)('scheme', \"Cannot add schemes because the provided manifest does not have a valid Activity with `android:launchMode=\\\"singleTask\\\"`\", 'https://expo.fyi/setup-android-uri-scheme');\n    return androidManifest;\n  }\n\n  var currentSchemes = getSchemesFromManifest(androidManifest);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(currentSchemes), _step; !(_step = _iterator()).done;) {\n    var uri = _step.value;\n    var index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(schemes), _step2; !(_step2 = _iterator2()).done;) {\n    var _uri = _step2.value;\n    androidManifest = appendScheme(_uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter(_ref) {\n  var actions = _ref.actions,\n      categories = _ref.categories,\n      schemes = _ref.schemes;\n  return actions.includes('android.intent.action.VIEW') && !categories.includes('android.intent.category.LAUNCHER');\n}\n\nfunction propertiesFromIntentFilter(intentFilter) {\n  var _intentFilter$action$, _intentFilter$action, _intentFilter$categor, _intentFilter$categor2, _intentFilter$data$ma, _intentFilter$data;\n\n  var actions = (_intentFilter$action$ = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$action = intentFilter.action) === null || _intentFilter$action === void 0 ? void 0 : _intentFilter$action.map(function (data) {\n    var _data$$;\n\n    return data === null || data === void 0 ? void 0 : (_data$$ = data.$) === null || _data$$ === void 0 ? void 0 : _data$$['android:name'];\n  })) !== null && _intentFilter$action$ !== void 0 ? _intentFilter$action$ : [];\n  var categories = (_intentFilter$categor = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$categor2 = intentFilter.category) === null || _intentFilter$categor2 === void 0 ? void 0 : _intentFilter$categor2.map(function (data) {\n    var _data$$2;\n\n    return data === null || data === void 0 ? void 0 : (_data$$2 = data.$) === null || _data$$2 === void 0 ? void 0 : _data$$2['android:name'];\n  })) !== null && _intentFilter$categor !== void 0 ? _intentFilter$categor : [];\n  var schemes = (_intentFilter$data$ma = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$data = intentFilter.data) === null || _intentFilter$data === void 0 ? void 0 : _intentFilter$data.map(function (data) {\n    var _data$$3;\n\n    return data === null || data === void 0 ? void 0 : (_data$$3 = data.$) === null || _data$$3 === void 0 ? void 0 : _data$$3['android:scheme'];\n  })) !== null && _intentFilter$data$ma !== void 0 ? _intentFilter$data$ma : [];\n  return {\n    schemes: schemes,\n    actions: actions,\n    categories: categories\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n  var outputSchemes = [];\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step3; !(_step3 = _iterator3()).done;) {\n    var application = _step3.value;\n    var activity = application.activity;\n    var activities = Array.isArray(activity) ? activity : [activity];\n    var singleTaskActivities = activities.filter(function (activity) {\n      var _activity$$;\n\n      return (activity === null || activity === void 0 ? void 0 : (_activity$$ = activity.$) === null || _activity$$ === void 0 ? void 0 : _activity$$['android:launchMode']) === 'singleTask';\n    });\n\n    for (var _iterator4 = _createForOfIteratorHelperLoose(singleTaskActivities), _step4; !(_step4 = _iterator4()).done;) {\n      var _activity = _step4.value;\n      var intentFilters = _activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n\n  return outputSchemes;\n}\n\nfunction getSchemesFromManifest(androidManifest) {\n  var outputSchemes = [];\n  var singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n\n  for (var _iterator5 = _createForOfIteratorHelperLoose(singleTaskIntentFilters), _step5; !(_step5 = _iterator5()).done;) {\n    var intentFilter = _step5.value;\n    var properties = propertiesFromIntentFilter(intentFilter);\n\n    if (isValidRedirectIntentFilter(properties)) {\n      outputSchemes.push(properties);\n    }\n  }\n\n  return outputSchemes.reduce(function (prev, _ref2) {\n    var schemes = _ref2.schemes;\n    return [].concat(_toConsumableArray(prev), _toConsumableArray(schemes));\n  }, []);\n}\n\nfunction ensureManifestHasValidIntentFilter(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (var _iterator6 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step6; !(_step6 = _iterator6()).done;) {\n    var application = _step6.value;\n\n    for (var _iterator7 = _createForOfIteratorHelperLoose(application.activity || []), _step7; !(_step7 = _iterator7()).done;) {\n      var activity = _step7.value;\n\n      var _activity$$2;\n\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$2 = activity.$) === null || _activity$$2 === void 0 ? void 0 : _activity$$2['android:launchMode']) === 'singleTask') {\n        for (var _iterator8 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step8; !(_step8 = _iterator8()).done;) {\n          var intentFilter = _step8.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{\n            $: {\n              'android:name': 'android.intent.action.VIEW'\n            }\n          }],\n          category: [{\n            $: {\n              'android:name': 'android.intent.category.DEFAULT'\n            }\n          }, {\n            $: {\n              'android:name': 'android.intent.category.BROWSABLE'\n            }\n          }]\n        });\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction hasScheme(scheme, androidManifest) {\n  var schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nfunction appendScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (var _iterator9 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step9; !(_step9 = _iterator9()).done;) {\n    var application = _step9.value;\n\n    for (var _iterator10 = _createForOfIteratorHelperLoose(application.activity || []), _step10; !(_step10 = _iterator10()).done;) {\n      var activity = _step10.value;\n\n      var _activity$$3;\n\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$3 = activity.$) === null || _activity$$3 === void 0 ? void 0 : _activity$$3['android:launchMode']) === 'singleTask') {\n        for (var _iterator11 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step11; !(_step11 = _iterator11()).done;) {\n          var intentFilter = _step11.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: {\n                'android:scheme': scheme\n              }\n            });\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n\nfunction removeScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (var _iterator12 = _createForOfIteratorHelperLoose(androidManifest.manifest.application), _step12; !(_step12 = _iterator12()).done;) {\n    var application = _step12.value;\n\n    for (var _iterator13 = _createForOfIteratorHelperLoose(application.activity || []), _step13; !(_step13 = _iterator13()).done;) {\n      var activity = _step13.value;\n\n      var _activity$$4;\n\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$4 = activity.$) === null || _activity$$4 === void 0 ? void 0 : _activity$$4['android:launchMode']) === 'singleTask') {\n        for (var _iterator14 = _createForOfIteratorHelperLoose(activity['intent-filter'] || []), _step14; !(_step14 = _iterator14()).done;) {\n          var intentFilter = _step14.value;\n          var properties = propertiesFromIntentFilter(intentFilter);\n\n          if (isValidRedirectIntentFilter(properties)) {\n            for (var dataKey in (intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.data) || []) {\n              var _intentFilter$data2, _data$$4;\n\n              var data = (_intentFilter$data2 = intentFilter.data) === null || _intentFilter$data2 === void 0 ? void 0 : _intentFilter$data2[dataKey];\n\n              if ((data === null || data === void 0 ? void 0 : (_data$$4 = data.$) === null || _data$$4 === void 0 ? void 0 : _data$$4['android:scheme']) === scheme) {\n                var _intentFilter$data3;\n\n                (_intentFilter$data3 = intentFilter.data) === null || _intentFilter$data3 === void 0 ? true : delete _intentFilter$data3[dataKey];\n              }\n            }\n          }\n        }\n\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}","map":{"version":3,"sources":["../../src/android/Scheme.ts"],"names":["withScheme","Array","config","validate","value","schemes","getScheme","ensureManifestHasValidIntentFilter","currentSchemes","getSchemesFromManifest","index","androidManifest","appendScheme","actions","categories","data","outputSchemes","activity","activities","singleTaskActivities","intentFilters","singleTaskIntentFilters","getSingleTaskIntentFilters","properties","propertiesFromIntentFilter","isValidRedirectIntentFilter","application","action","$","category","intentFilter","scheme"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest, ManifestActivity } from './Manifest';\n\nexport type IntentFilterProps = {\n  actions: string[];\n  categories: string[];\n  schemes: string[];\n};\n\nexport const withScheme = createAndroidManifestPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => typeof value === 'string';\n\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\n// This plugin used to remove the unused schemes but this is unpredictable because other plugins could add schemes.\n// The only way to reliably remove schemes from the project is to nuke the file and regenerate the code (`expo prebuild --clean`).\n// Regardless, having extra schemes isn't a fatal issue and therefore a tolerable compromise is to just add new schemes that aren't currently present.\nexport function setScheme(\n  config: Pick<ExpoConfig, 'scheme' | 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const schemes = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: android.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.android ?? {}),\n  ];\n  // Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.android?.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    addWarningAndroid(\n      'scheme',\n      `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\``,\n      'https://expo.fyi/setup-android-uri-scheme'\n    );\n    return androidManifest;\n  }\n\n  // Get the current schemes and remove them from the list of schemes to add.\n  const currentSchemes = getSchemesFromManifest(androidManifest);\n  for (const uri of currentSchemes) {\n    const index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n\n  // Now add all of the remaining schemes.\n  for (const uri of schemes) {\n    androidManifest = appendScheme(uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter({ actions, categories, schemes }: IntentFilterProps): boolean {\n  return (\n    actions.includes('android.intent.action.VIEW') &&\n    !categories.includes('android.intent.category.LAUNCHER')\n  );\n}\n\nfunction propertiesFromIntentFilter(intentFilter: any): IntentFilterProps {\n  const actions = intentFilter?.action?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const categories = intentFilter?.category?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const schemes = intentFilter?.data?.map((data: any) => data?.$?.['android:scheme']) ?? [];\n  return {\n    schemes,\n    actions,\n    categories,\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest: AndroidManifest): any[] {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n\n  let outputSchemes: any[] = [];\n  for (const application of androidManifest.manifest.application) {\n    const { activity } = application;\n    // @ts-ignore\n    const activities = Array.isArray(activity) ? activity : [activity];\n    const singleTaskActivities = (activities as ManifestActivity[]).filter(\n      activity => activity?.$?.['android:launchMode'] === 'singleTask'\n    );\n    for (const activity of singleTaskActivities) {\n      const intentFilters = activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\n\nexport function getSchemesFromManifest(androidManifest: AndroidManifest): string[] {\n  const outputSchemes: IntentFilterProps[] = [];\n\n  const singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (const intentFilter of singleTaskIntentFilters) {\n    const properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties)) {\n      outputSchemes.push(properties);\n    }\n  }\n\n  return outputSchemes.reduce<string[]>((prev, { schemes }) => [...prev, ...schemes], []);\n}\n\nexport function ensureManifestHasValidIntentFilter(androidManifest: AndroidManifest): boolean {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],\n          category: [\n            { $: { 'android:name': 'android.intent.category.DEFAULT' } },\n            { $: { 'android:name': 'android.intent.category.BROWSABLE' } },\n          ],\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasScheme(scheme: string, androidManifest: AndroidManifest): boolean {\n  const schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexport function appendScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: { 'android:scheme': scheme },\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\n\nexport function removeScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (const dataKey in intentFilter?.data || []) {\n              const data = intentFilter.data?.[dataKey];\n              if (data?.$?.['android:scheme'] === scheme) {\n                delete intentFilter.data?.[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n"]},"metadata":{},"sourceType":"script"}