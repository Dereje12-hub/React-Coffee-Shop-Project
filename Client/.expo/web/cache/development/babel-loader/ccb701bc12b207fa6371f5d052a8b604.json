{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLegacyImportsEnabled = isLegacyImportsEnabled;\n\nfunction _getenv() {\n  var data = require(\"getenv\");\n\n  _getenv = function _getenv() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n\n  _semver = function _semver() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isLegacyImportsEnabled(exp) {\n  if ((0, _getenv().boolish)('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn('Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.');\n    return true;\n  }\n\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson, sdkVersion) {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return _semver().default.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(expJson.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"sources":["../src/isLegacyImportsEnabled.ts"],"names":["console","lteSdkVersion","expJson","semver"],"mappings":";;;;;;;AAAA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AASO,SAAA,sBAAA,CAAA,GAAA,EAAqE;AAC1E,MAAI,CAAA,GAAA,OAAA,GAAA,OAAA,EAAA,qBAAA,EAAJ,KAAI,CAAJ,EAA2C;AACzCA,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,sHAAAA;AAGA,WAAA,IAAA;AALwE;;AAS1E,SAAOC,aAAa,CAAA,GAAA,EAApB,QAAoB,CAApB;AACD;;AAED,SAAA,aAAA,CAAA,OAAA,EAAA,UAAA,EAA6F;AAC3F,MAAI,CAACC,OAAO,CAAZ,UAAA,EAAyB;AACvB,WAAA,KAAA;AACD;;AAED,MAAIA,OAAO,CAAPA,UAAAA,KAAJ,aAAA,EAA0C;AACxC,WAAA,KAAA;AACD;;AAED,MAAI;AACF,WAAOC,OAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAWD,OAAO,CAAlBC,UAAAA,EAAP,UAAOA,CAAP;AADF,GAAA,CAEE,OAAA,CAAA,EAAU;AACV,UAAM,IAAA,KAAA,CAAaD,OAAO,CAA1B,UAAM,2DAAN;AACD;AACF","sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}