{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar password_prompt_1 = tslib_1.__importDefault(require(\"password-prompt\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar DefaultUI = {\n  getWindowsEncryptionPassword: function getWindowsEncryptionPassword() {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return password_prompt_1.default('devcert password (http://bit.ly/devcert-what-password?):');\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n  },\n  warnChromeOnLinuxWithoutCertutil: function warnChromeOnLinuxWithoutCertutil() {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.warn(\"\\n      WARNING: It looks like you have Chrome installed, but you specified\\n      'skipCertutilInstall: true'. Unfortunately, without installing\\n      certutil, it's impossible get Chrome to trust devcert's certificates\\n      The certificates will work, but Chrome will continue to warn you that\\n      they are untrusted.\\n    \");\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n  },\n  closeFirefoxBeforeContinuing: function closeFirefoxBeforeContinuing() {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('Please close Firefox before continuing');\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n  },\n  startFirefoxWizard: function startFirefoxWizard(certificateHost) {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(\"\\n      devcert was unable to automatically configure Firefox. You'll need to\\n      complete this process manually. Don't worry though - Firefox will walk\\n      you through it.\\n\\n      When you're ready, hit any key to continue. Firefox will launch and\\n      display a wizard to walk you through how to trust the devcert\\n      certificate. When you are finished, come back here and we'll finish up.\\n\\n      (If Firefox doesn't start, go ahead and start it and navigate to\\n      \" + certificateHost + \" in a new tab.)\\n\\n      If you are curious about why all this is necessary, check out\\n      https://github.com/davewasmer/devcert#how-it-works\\n\\n      <Press any key to launch Firefox wizard>\\n    \");\n              _context4.next = 3;\n              return utils_1.waitForUser();\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n  },\n  firefoxWizardPromptPage: function firefoxWizardPromptPage(certificateURL) {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", \"\\n      <html>\\n        <head>\\n          <meta http-equiv=\\\"refresh\\\" content=\\\"0; url=\" + certificateURL + \"\\\" />\\n        </head>\\n      </html>\\n    \");\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n  },\n  waitForFirefoxWizard: function waitForFirefoxWizard() {\n    return tslib_1.__awaiter(this, void 0, void 0, _regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              console.log(\"\\n      Launching Firefox ...\\n\\n      Great! Once you've finished the Firefox wizard for adding the devcert\\n      certificate, just hit any key here again and we'll wrap up.\\n\\n      <Press any key to continue>\\n    \");\n              _context6.next = 3;\n              return utils_1.waitForUser();\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n  }\n};\nexports.default = DefaultUI;","map":{"version":3,"sources":["user-interface.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,WAAA;;AAWA,IAAM,SAAS,GAAkB;AACzB,EAAA,4BADyB,0CACG;;;;;;;AACzB,qBAAM,iBAAA,CAAA,OAAA,CAAe,0DAAf,CAAN;;;;;;;;;;;;AACR,GAH8B;AAIzB,EAAA,gCAJyB,8CAIO;;;;;;AACpC,cAAA,OAAO,CAAC,IAAR;;;;;;;;;AAOD,GAZ8B;AAazB,EAAA,4BAbyB,0CAaG;;;;;;AAChC,cAAA,OAAO,CAAC,GAAR,CAAY,wCAAZ;;;;;;;;;AACD,GAf8B;AAgBzB,EAAA,kBAhByB,8BAgBN,eAhBM,EAgBS;;;;;;AACtC,cAAA,OAAO,CAAC,GAAR,2eAUK,eAVL;;AAiBA,qBAAM,OAAA,CAAA,WAAA,EAAN;;;;;;;;;AACD,GAnC8B;AAoCzB,EAAA,uBApCyB,mCAoCD,cApCC,EAoCqB;;;;;;6IAIC,c;;;;;;;;;AAIpD,GA5C8B;AA6CzB,EAAA,oBA7CyB,kCA6CL;;;;;;AACxB,cAAA,OAAO,CAAC,GAAR;;AAQA,qBAAM,OAAA,CAAA,WAAA,EAAN;;;;;;;;;AACD;AAvD8B,CAAjC;AA0DA,OAAA,CAAA,OAAA,GAAe,SAAf","sourcesContent":["import passwordPrompt from 'password-prompt';\nimport { waitForUser } from './utils';\n\nexport interface UserInterface {\n  getWindowsEncryptionPassword(): Promise<string>;\n  warnChromeOnLinuxWithoutCertutil(): Promise<void>;\n  closeFirefoxBeforeContinuing(): Promise<void>;\n  startFirefoxWizard(certificateHost: string): Promise<void>;\n  firefoxWizardPromptPage(certificateURL: string): Promise<string>;\n  waitForFirefoxWizard(): Promise<void>;\n}\n\nconst DefaultUI: UserInterface = {\n  async getWindowsEncryptionPassword() {\n    return await passwordPrompt('devcert password (http://bit.ly/devcert-what-password?):');\n  },\n  async warnChromeOnLinuxWithoutCertutil() {\n    console.warn(`\n      WARNING: It looks like you have Chrome installed, but you specified\n      'skipCertutilInstall: true'. Unfortunately, without installing\n      certutil, it's impossible get Chrome to trust devcert's certificates\n      The certificates will work, but Chrome will continue to warn you that\n      they are untrusted.\n    `);\n  },\n  async closeFirefoxBeforeContinuing() {\n    console.log('Please close Firefox before continuing');\n  },\n  async startFirefoxWizard(certificateHost) {\n    console.log(`\n      devcert was unable to automatically configure Firefox. You'll need to\n      complete this process manually. Don't worry though - Firefox will walk\n      you through it.\n\n      When you're ready, hit any key to continue. Firefox will launch and\n      display a wizard to walk you through how to trust the devcert\n      certificate. When you are finished, come back here and we'll finish up.\n\n      (If Firefox doesn't start, go ahead and start it and navigate to\n      ${ certificateHost } in a new tab.)\n\n      If you are curious about why all this is necessary, check out\n      https://github.com/davewasmer/devcert#how-it-works\n\n      <Press any key to launch Firefox wizard>\n    `);\n    await waitForUser();\n  },\n  async firefoxWizardPromptPage(certificateURL: string) {\n    return `\n      <html>\n        <head>\n          <meta http-equiv=\"refresh\" content=\"0; url=${certificateURL}\" />\n        </head>\n      </html>\n    `;\n  },\n  async waitForFirefoxWizard() {\n    console.log(`\n      Launching Firefox ...\n\n      Great! Once you've finished the Firefox wizard for adding the devcert\n      certificate, just hit any key here again and we'll wrap up.\n\n      <Press any key to continue>\n    `)\n    await waitForUser();\n  }\n}\n\nexport default DefaultUI;"],"sourceRoot":"/Users/evanbacon/Documents/GitHub/devcert/"},"metadata":{},"sourceType":"script"}