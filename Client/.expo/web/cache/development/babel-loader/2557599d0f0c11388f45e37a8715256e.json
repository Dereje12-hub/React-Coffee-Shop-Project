{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineString = exports.CLIError = void 0;\n\nvar CLIError = function (_Error) {\n  _inherits(CLIError, _Error);\n\n  var _super = _createSuper(CLIError);\n\n  function CLIError(msg, originalError) {\n    var _this;\n\n    _classCallCheck(this, CLIError);\n\n    _this = _super.call(this, inlineString(msg));\n\n    if (originalError) {\n      _this.stack = typeof originalError === 'string' ? originalError : originalError.stack || ''.split('\\n').slice(0, 2).join('\\n');\n    } else {\n      delete _this.stack;\n    }\n\n    return _this;\n  }\n\n  return _createClass(CLIError);\n}(_wrapNativeSuper(Error));\n\nexports.CLIError = CLIError;\n\nvar inlineString = function inlineString(str) {\n  return str.replace(/(\\s{2,})/gm, ' ').trim();\n};\n\nexports.inlineString = inlineString;","map":{"version":3,"sources":["C:/Users/Dereje/node_modules/@react-native-community/cli-tools/build/errors.js"],"names":["Object","defineProperty","exports","value","inlineString","CLIError","msg","originalError","stack","split","slice","join","Error","str","replace","trim"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBF,OAAO,CAACG,QAAR,GAAmB,KAAK,CAA/C;;IAMMA,Q;;;;;AACJ,oBAAYC,GAAZ,EAAiBC,aAAjB,EAAgC;AAAA;;AAAA;;AAC9B,8BAAMH,YAAY,CAACE,GAAD,CAAlB;;AAEA,QAAIC,aAAJ,EAAmB;AACjB,YAAKC,KAAL,GAAa,OAAOD,aAAP,KAAyB,QAAzB,GAAoCA,aAApC,GAAoDA,aAAa,CAACC,KAAd,IAAuB,GAAGC,KAAH,CAAS,IAAT,EAAeC,KAAf,CAAqB,CAArB,EAAwB,CAAxB,EAA2BC,IAA3B,CAAgC,IAAhC,CAAxF;AACD,KAFD,MAEO;AAIL,aAAO,MAAKH,KAAZ;AACD;;AAV6B;AAW/B;;;mBAZoBI,K;;AAgBvBV,OAAO,CAACG,QAAR,GAAmBA,QAAnB;;AAEA,IAAMD,YAAY,GAAG,SAAfA,YAAe,CAAAS,GAAG;AAAA,SAAIA,GAAG,CAACC,OAAJ,CAAY,YAAZ,EAA0B,GAA1B,EAA+BC,IAA/B,EAAJ;AAAA,CAAxB;;AAEAb,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.inlineString = exports.CLIError = void 0;\n\n/**\n * A custom Error that creates a single-lined message to match current styling inside CLI.\n * Uses original stack trace when `originalError` is passed or erase the stack if it's not defined.\n */\nclass CLIError extends Error {\n  constructor(msg, originalError) {\n    super(inlineString(msg));\n\n    if (originalError) {\n      this.stack = typeof originalError === 'string' ? originalError : originalError.stack || ''.split('\\n').slice(0, 2).join('\\n');\n    } else {\n      // When the \"originalError\" is not passed, it means that we know exactly\n      // what went wrong and provide means to fix it. In such cases showing the\n      // stack is an unnecessary clutter to the CLI output, hence removing it.\n      delete this.stack;\n    }\n  }\n\n}\n\nexports.CLIError = CLIError;\n\nconst inlineString = str => str.replace(/(\\s{2,})/gm, ' ').trim();\n\nexports.inlineString = inlineString;\n\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}