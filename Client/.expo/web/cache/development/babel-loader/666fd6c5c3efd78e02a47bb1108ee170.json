{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nonEmptyInput = nonEmptyInput;\nexports.promptsExistingFile = exports.promptsNonEmptyInput = exports.existingFile = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _log() {\n  var data = _interopRequireDefault(require(\"./log\"));\n\n  _log = function _log() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction nonEmptyInput(val) {\n  return val !== '';\n}\n\nvar existingFile = function existingFile(filePath) {\n  var verbose,\n      stats,\n      _args = arguments;\n  return _regeneratorRuntime.async(function existingFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          verbose = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(_fsExtra().default.stat(filePath));\n\n        case 4:\n          stats = _context.sent;\n          return _context.abrupt(\"return\", stats.isFile());\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](1);\n\n          if (verbose) {\n            _log().default.log('\\nFile does not exist.');\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\n\nexports.existingFile = existingFile;\nvar promptsNonEmptyInput = nonEmptyInput;\nexports.promptsNonEmptyInput = promptsNonEmptyInput;\n\nvar promptsExistingFile = function promptsExistingFile(filePath) {\n  var stats;\n  return _regeneratorRuntime.async(function promptsExistingFile$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(_fsExtra().default.stat(filePath));\n\n        case 3:\n          stats = _context2.sent;\n\n          if (!stats.isFile()) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", true);\n\n        case 6:\n          return _context2.abrupt(\"return\", 'Input is not a file.');\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", 'File does not exist.');\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};\n\nexports.promptsExistingFile = promptsExistingFile;","map":{"version":3,"sources":["../src/validators.ts"],"names":["val","existingFile","verbose","stats","fs","Log","promptsNonEmptyInput","promptsExistingFile"],"mappings":";;;;;;;;;;AAAA,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;;AAAA,EAAA,QAAA,GAAA,oBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,SAAA,IAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,SAAA,CAAA;;AAAA,EAAA,IAAA,GAAA,gBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAEA,SAAA,aAAA,CAAA,GAAA,EAAoC;AAClC,SAAOA,GAAG,KAAV,EAAA;AACD;;AAED,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBC,UAAAA,OAAzB,2DAAA,IAAA;AAAA;AAAA;AAAA,2CAEGE,QAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAApB,QAAoBA,CAFH;;AAAA;AAEXD,UAAAA,KAFW;AAAA,2CAGVA,KAAK,CAAZ,MAAOA,EAHU;;AAAA;AAAA;AAAA;;AAKjB,cAAA,OAAA,EAAa;AACXE,YAAAA,IAAAA,GAAAA,OAAAA,CAAAA,GAAAA,CAAAA,wBAAAA;AACD;;AAPgB,2CAQjB,KARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;;AAcA,IAAMC,oBAAoB,GAA1B,aAAA;;;AACA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,QAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEJH,QAAAA,GAAAA,OAAAA,CAAAA,IAAAA,CAApB,QAAoBA,CAFI;;AAAA;AAElBD,UAAAA,KAFkB;;AAAA,eAGpBA,KAAK,CAAT,MAAIA,EAHoB;AAAA;AAAA;AAAA;;AAAA,4CAItB,IAJsB;;AAAA;AAAA,4CAMxB,sBANwB;;AAAA;AAAA;AAAA;AAAA,4CAQxB,sBARwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["import fs from 'fs-extra';\n\nimport Log from './log';\n\nfunction nonEmptyInput(val: string) {\n  return val !== '';\n}\n\nconst existingFile = async (filePath: string, verbose = true) => {\n  try {\n    const stats = await fs.stat(filePath);\n    return stats.isFile();\n  } catch (e) {\n    if (verbose) {\n      Log.log('\\nFile does not exist.');\n    }\n    return false;\n  }\n};\n\n// note(cedric): export prompts-compatible validators,\n// refactor when prompt is replaced with prompts\nconst promptsNonEmptyInput = nonEmptyInput;\nconst promptsExistingFile = async (filePath: string) => {\n  try {\n    const stats = await fs.stat(filePath);\n    if (stats.isFile()) {\n      return true;\n    }\n    return 'Input is not a file.';\n  } catch {\n    return 'File does not exist.';\n  }\n};\n\nexport { nonEmptyInput, existingFile, promptsNonEmptyInput, promptsExistingFile };\n"]},"metadata":{},"sourceType":"script"}