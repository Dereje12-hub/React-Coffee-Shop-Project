{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFullName = getFullName;\nexports.getAccountUsername = getAccountUsername;\n\nfunction _getUserState() {\n  var data = require(\"./getUserState\");\n\n  _getUserState = function _getUserState() {\n    return data;\n  };\n\n  return data;\n}\n\nvar ANONYMOUS_USERNAME = 'anonymous';\n\nfunction getFullName(manifest) {\n  var username = getAccountUsername(manifest);\n  return \"@\" + username + \"/\" + manifest.slug;\n}\n\nfunction getAccountUsername() {\n  var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _getUserState$read$au;\n\n  var username = manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n\n  if (username) {\n    return username;\n  }\n\n  return ((_getUserState$read$au = (0, _getUserState().getUserState)().read().auth) === null || _getUserState$read$au === void 0 ? void 0 : _getUserState$read$au.username) || ANONYMOUS_USERNAME;\n}","map":{"version":3,"sources":["../src/getFullName.ts"],"names":["ANONYMOUS_USERNAME","username","getAccountUsername","manifest","process"],"mappings":";;;;;;;;AAEA,SAAA,aAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,kBAAA;;AAAA,EAAA,aAAA,GAAA,yBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAEA,IAAMA,kBAAkB,GAAxB,WAAA;;AASO,SAAA,WAAA,CAAA,QAAA,EAA2E;AAChF,MAAMC,QAAQ,GAAGC,kBAAkB,CAAnC,QAAmC,CAAnC;AACA,eAAWD,QAAX,SAAuBE,QAAQ,CAA/B,IAAA;AACD;;AAEM,SAAA,kBAAA,GAA8E;AAAA,MAAlDA,QAAkD,uEAA9E,EAA8E;;AAAA,MAAA,qBAAA;;AAEnF,MAAMF,QAAQ,GACZE,QAAQ,CAARA,KAAAA,IAAkBC,OAAO,CAAPA,GAAAA,CAAlBD,iBAAAA,IAAmDC,OAAO,CAAPA,GAAAA,CADrD,kBAAA;;AAEA,MAAA,QAAA,EAAc;AACZ,WAAA,QAAA;AALiF;;AAQnF,SAAO,CAAA,CAAA,qBAAA,GAAA,CAAA,GAAA,aAAA,GAAA,YAAA,IAAA,IAAA,GAAA,IAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,QAAA,KAAP,kBAAA;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */\nexport function getFullName(manifest: Pick<ExpoConfig, 'owner' | 'slug'>): string {\n  const username = getAccountUsername(manifest);\n  return `@${username}/${manifest.slug}`;\n}\n\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"]},"metadata":{},"sourceType":"script"}