{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExtensions = getExtensions;\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\nexports.getManagedExtensions = getManagedExtensions;\nexports.getBareExtensions = getBareExtensions;\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getExtensions(platforms, extensions, workflows) {\n  (0, _assert().default)(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  (0, _assert().default)(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  (0, _assert().default)(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n  var fileExtensions = [];\n\n  for (var _i = 0, _arr = [].concat(_toConsumableArray(workflows), ['']); _i < _arr.length; _i++) {\n    var workflow = _arr[_i];\n\n    for (var _i2 = 0, _arr2 = [].concat(_toConsumableArray(platforms), ['']); _i2 < _arr2.length; _i2++) {\n      var platform = _arr2[_i2];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {\n        var extension = _step.value;\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n\n  return fileExtensions;\n}\n\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n      isModern = _ref.isModern,\n      isReact = _ref.isReact;\n\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && lang + \"x\"].filter(Boolean);\n  };\n\n  var extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n\n  return extensions;\n}\n\nfunction getManagedExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), ['expo']);\n\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n\n  return fileExtensions;\n}\n\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), []);\n\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n\n  return fileExtensions;\n}","map":{"version":3,"sources":["../../src/paths/extensions.ts"],"names":["Array","fileExtensions","workflow","platform","isReact","addLanguage","lang","extensions","languageOptions","isTS","isModern","getExtensions","getLanguageExtensionsInOrder","_addMiscellaneousExtensions","platforms"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,GAAA;AAAA,MAAA,IAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AAAA,EAAA,OAAA,GAAA,mBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;;;;;;;AAQO,SAAA,aAAA,CAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAIK;AAEV,GAAA,GAAA,OAAA,GAAA,OAAA,EAAOA,KAAK,CAALA,OAAAA,CAAP,SAAOA,CAAP,EAAA,iCAAA;AACA,GAAA,GAAA,OAAA,GAAA,OAAA,EAAOA,KAAK,CAALA,OAAAA,CAAP,UAAOA,CAAP,EAAA,kCAAA;AACA,GAAA,GAAA,OAAA,GAAA,OAAA,EAAOA,KAAK,CAALA,OAAAA,CAAP,SAAOA,CAAP,EAAA,iCAAA;AAEA,MAAMC,cAAc,GANV,EAMV;;AAEA,uDAAuB,SAAvB,IAAA,EAAA,4BAA2C;AAAtC,QAAMC,QAAX,WAAK;;AAEH,2DAAuB,SAAvB,IAAA,EAAA,+BAA2C;AAAtC,UAAMC,QAAX,aAAK;;AAEH,2DAAA,UAAA,wCAAoC;AAAA,YAApC,SAAoC;AAClCF,QAAAA,cAAc,CAAdA,IAAAA,CAAoB,CAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,CAAA,OAAA,EAAA,IAAA,CAApBA,GAAoB,CAApBA;AACD;AACF;AACF;;AACD,SAAA,cAAA;AACD;;AAEM,SAAA,4BAAA,OAIuB;AAAA,MAJe,IAIf,QAJe,IAIf;AAAA,MAJe,QAIf,QAJe,QAIf;AAAA,MAD5BG,OAC4B,QAD5BA,OAC4B;;AAE5B,MAAMC,WAAW,GAAIC,SAAfD,WAAeC,CAAAA,IAAD;AAAA,WAA4B,CAAA,IAAA,EAAOF,OAAO,IAAd,IAAc,MAAd,EAAA,MAAA,CAFpB,OAEoB,CAA5B;AAAA,GAApB;;AAGA,MAAIG,UAAU,GAAGF,WAAW,CAA5B,IAA4B,CAA5B;;AAEA,MAAA,QAAA,EAAc;AACZE,IAAAA,UAAU,CAAVA,OAAAA,CAAAA,KAAAA;AACD;;AACD,MAAA,IAAA,EAAU;AACRA,IAAAA,UAAU,gCAAOF,WAAW,CAAf,IAAe,CAAlB,sBAAVE,UAAU,EAAVA;AACD;;AAED,SAAA,UAAA;AACD;;AAEM,SAAA,oBAAA,CAAA,SAAA,EAGK;AAAA,MADVC,eACU,uEADyB;AAAEC,IAAAA,IAAI,EAAN,IAAA;AAAcC,IAAAA,QAAQ,EAAtB,IAAA;AAA8BN,IAAAA,OAAO,EAAE;AAAvC,GACzB;AACV,MAAMH,cAAc,GAAGU,aAAa,CAAA,SAAA,EAAYC,4BAA4B,CAAxC,eAAwC,CAAxC,EAA2D,CADrF,MACqF,CAA3D,CAApC;;AAIAC,EAAAA,2BAA2B,CAAA,SAAA,EAA3BA,cAA2B,CAA3BA;;AACA,SAAA,cAAA;AACD;;AAEM,SAAA,iBAAA,CAAA,SAAA,EAGK;AAAA,MADVL,eACU,uEADyB;AAAEC,IAAAA,IAAI,EAAN,IAAA;AAAcC,IAAAA,QAAQ,EAAtB,IAAA;AAA8BN,IAAAA,OAAO,EAAE;AAAvC,GACzB;AACV,MAAMH,cAAc,GAAGU,aAAa,CAAA,SAAA,EAElCC,4BAA4B,CAFM,eAEN,CAFM,EAD1B,EAC0B,CAApC;;AAMAC,EAAAA,2BAA2B,CAAA,SAAA,EAA3BA,cAA2B,CAA3BA;;AACA,SAAA,cAAA;AACD;;AAED,SAAA,2BAAA,CAAA,SAAA,EAAA,cAAA,EAA8F;AAG5FZ,EAAAA,cAAc,CAAdA,IAAAA,CAH4F,MAG5FA;;AAEA,MAAIa,SAAS,CAATA,QAAAA,CAAJ,KAAIA,CAAJ,EAA+B;AAC7Bb,IAAAA,cAAc,CAAdA,IAAAA,CAAAA,MAAAA;AACD;;AACD,SAAA,cAAA;AACD","sourcesContent":["import assert from 'assert';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getManagedExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), [\n    'expo',\n  ]);\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"]},"metadata":{},"sourceType":"script"}