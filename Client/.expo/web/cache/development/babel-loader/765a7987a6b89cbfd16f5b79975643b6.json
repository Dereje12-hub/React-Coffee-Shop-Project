{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAndroidManifestPlugin = createAndroidManifestPlugin;\nexports.createStringsXmlPlugin = createStringsXmlPlugin;\nexports.withGradleProperties = exports.withSettingsGradle = exports.withAppBuildGradle = exports.withProjectBuildGradle = exports.withMainApplication = exports.withMainActivity = exports.withAndroidStyles = exports.withAndroidColorsNight = exports.withAndroidColors = exports.withStringsXml = exports.withAndroidManifest = void 0;\n\nfunction _withMod() {\n  var data = require(\"./withMod\");\n\n  _withMod = function _withMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction createAndroidManifestPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withAndroidManifest(config, function _callee(config) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context.sent;\n              return _context.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nfunction createStringsXmlPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withStringsXml(config, function _callee2(config) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(action(config, config.modResults));\n\n            case 2:\n              config.modResults = _context2.sent;\n              return _context2.abrupt(\"return\", config);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n  };\n\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n\n  return withUnknown;\n}\n\nvar withAndroidManifest = function withAndroidManifest(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action: action\n  });\n};\n\nexports.withAndroidManifest = withAndroidManifest;\n\nvar withStringsXml = function withStringsXml(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'strings',\n    action: action\n  });\n};\n\nexports.withStringsXml = withStringsXml;\n\nvar withAndroidColors = function withAndroidColors(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'colors',\n    action: action\n  });\n};\n\nexports.withAndroidColors = withAndroidColors;\n\nvar withAndroidColorsNight = function withAndroidColorsNight(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'colorsNight',\n    action: action\n  });\n};\n\nexports.withAndroidColorsNight = withAndroidColorsNight;\n\nvar withAndroidStyles = function withAndroidStyles(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'styles',\n    action: action\n  });\n};\n\nexports.withAndroidStyles = withAndroidStyles;\n\nvar withMainActivity = function withMainActivity(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action: action\n  });\n};\n\nexports.withMainActivity = withMainActivity;\n\nvar withMainApplication = function withMainApplication(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'mainApplication',\n    action: action\n  });\n};\n\nexports.withMainApplication = withMainApplication;\n\nvar withProjectBuildGradle = function withProjectBuildGradle(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action: action\n  });\n};\n\nexports.withProjectBuildGradle = withProjectBuildGradle;\n\nvar withAppBuildGradle = function withAppBuildGradle(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action: action\n  });\n};\n\nexports.withAppBuildGradle = withAppBuildGradle;\n\nvar withSettingsGradle = function withSettingsGradle(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action: action\n  });\n};\n\nexports.withSettingsGradle = withSettingsGradle;\n\nvar withGradleProperties = function withGradleProperties(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'android',\n    mod: 'gradleProperties',\n    action: action\n  });\n};\n\nexports.withGradleProperties = withGradleProperties;","map":{"version":3,"sources":["../../src/plugins/android-plugins.ts"],"names":["withUnknown","config","withAndroidManifest","action","Object","value","name","withStringsXml","platform","mod","withAndroidColors","withAndroidColorsNight","withAndroidStyles","withMainActivity","withMainApplication","withProjectBuildGradle","withAppBuildGradle","withSettingsGradle","withGradleProperties"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin, Mod } from '../Plugin.types';\nimport { Manifest, Paths, Properties, Resources } from '../android';\nimport { withMod } from './withMod';\n\ntype OptionalPromise<T> = T | Promise<T>;\n\ntype MutateDataAction<T> = (expo: ExpoConfig, data: T) => OptionalPromise<T>;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createAndroidManifestPlugin(\n  action: MutateDataAction<Manifest.AndroidManifest>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withAndroidManifest(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createStringsXmlPlugin(\n  action: MutateDataAction<Resources.ResourceXML>,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = config =>\n    withStringsXml(config, async config => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AndroidManifest.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withAndroidManifest: ConfigPlugin<Mod<Manifest.AndroidManifest>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'manifest',\n    action,\n  });\n};\n\n/**\n * Provides the strings.xml for modification.\n *\n * @param config\n * @param action\n */\nexport const withStringsXml: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'strings',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidColors: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'colors',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values-night/colors.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidColorsNight: ConfigPlugin<Mod<Resources.ResourceXML>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'colorsNight',\n    action,\n  });\n};\n\n/**\n * Provides the `android/app/src/main/res/values/styles.xml` as JSON (parsed with [`xml2js`](https://www.npmjs.com/package/xml2js)).\n *\n * @param config\n * @param action\n */\nexport const withAndroidStyles: ConfigPlugin<Mod<Resources.ResourceXML>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'styles',\n    action,\n  });\n};\n\n/**\n * Provides the project MainActivity for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainActivity: ConfigPlugin<Mod<Paths.ApplicationProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'mainActivity',\n    action,\n  });\n};\n\n/**\n * Provides the project MainApplication for modification.\n *\n * @param config\n * @param action\n */\nexport const withMainApplication: ConfigPlugin<Mod<Paths.ApplicationProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'mainApplication',\n    action,\n  });\n};\n\n/**\n * Provides the project /build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withProjectBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'projectBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the app/build.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppBuildGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'appBuildGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /settings.gradle for modification.\n *\n * @param config\n * @param action\n */\nexport const withSettingsGradle: ConfigPlugin<Mod<Paths.GradleProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'settingsGradle',\n    action,\n  });\n};\n\n/**\n * Provides the /gradle.properties for modification.\n *\n * @param config\n * @param action\n */\nexport const withGradleProperties: ConfigPlugin<Mod<Properties.PropertiesItem[]>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'android',\n    mod: 'gradleProperties',\n    action,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}