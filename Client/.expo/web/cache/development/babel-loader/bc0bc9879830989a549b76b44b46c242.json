{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _excluded = [\"GMSApiKey\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\nexports.addGoogleMapsAppDelegateImport = addGoogleMapsAppDelegateImport;\nexports.removeGoogleMapsAppDelegateImport = removeGoogleMapsAppDelegateImport;\nexports.addGoogleMapsAppDelegateInit = addGoogleMapsAppDelegateInit;\nexports.removeGoogleMapsAppDelegateInit = removeGoogleMapsAppDelegateInit;\nexports.addMapsCocoaPods = addMapsCocoaPods;\nexports.removeMapsCocoaPods = removeMapsCocoaPods;\nexports.withMaps = exports.MATCH_INIT = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generateCode() {\n  var data = require(\"../utils/generateCode\");\n\n  _generateCode = function _generateCode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _resolvePackageRootFolder() {\n  var data = require(\"../utils/resolvePackageRootFolder\");\n\n  _resolvePackageRootFolder = function _resolvePackageRootFolder() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])/g;\nexports.MATCH_INIT = MATCH_INIT;\nvar withGoogleMapsKey = (0, _iosPlugins().createInfoPlistPlugin)(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nvar withMaps = function withMaps(config) {\n  config = withGoogleMapsKey(config);\n  var apiKey = getGoogleMapsApiKey(config);\n  config = withMapsCocoaPods(config, {\n    useGoogleMaps: !!apiKey\n  });\n  config = withGoogleMapsAppDelegate(config, {\n    apiKey: apiKey\n  });\n  return config;\n};\n\nexports.withMaps = withMaps;\n\nfunction getGoogleMapsApiKey(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config;\n\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.googleMapsApiKey) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\n\nfunction setGoogleMapsApiKey(config, _ref) {\n  var GMSApiKey = _ref.GMSApiKey,\n      infoPlist = _objectWithoutProperties(_ref, _excluded);\n\n  var apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    GMSApiKey: apiKey\n  });\n}\n\nfunction addGoogleMapsAppDelegateImport(src) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', '#import <GoogleMaps/GoogleMaps.h>', '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-import',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//'\n  });\n}\n\nfunction removeGoogleMapsAppDelegateImport(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-import',\n    src: src\n  });\n}\n\nfunction addGoogleMapsAppDelegateInit(src, apiKey) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', \"  [GMSServices provideAPIKey:@\\\"\" + apiKey + \"\\\"];\", '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-init',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//'\n  });\n}\n\nfunction removeGoogleMapsAppDelegateInit(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-init',\n    src: src\n  });\n}\n\nfunction addMapsCocoaPods(src, googleMapsPath) {\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps',\n    src: src,\n    newSrc: \"  pod 'react-native-google-maps', path: '\" + googleMapsPath + \"'\",\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#'\n  });\n}\n\nfunction removeMapsCocoaPods(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps',\n    src: src\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot) {\n  return (0, _resolvePackageRootFolder().resolvePackageRootFolder)(projectRoot, 'react-native-maps');\n}\n\nvar withMapsCocoaPods = function withMapsCocoaPods(config, _ref2) {\n  var useGoogleMaps = _ref2.useGoogleMaps;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function _callee(config) {\n    var filePath, contents, results, googleMapsPath, googleMapsPodPath;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            filePath = _path().default.join(config.modRequest.platformProjectRoot, 'Podfile');\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(_fsExtra().default.readFile(filePath, 'utf-8'));\n\n          case 3:\n            contents = _context.sent;\n            googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n\n            if (!(googleMapsPath && useGoogleMaps)) {\n              _context.next = 18;\n              break;\n            }\n\n            googleMapsPodPath = _path().default.relative(config.modRequest.platformProjectRoot, googleMapsPath);\n            _context.prev = 7;\n            results = addMapsCocoaPods(contents, googleMapsPodPath);\n            _context.next = 16;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](7);\n\n            if (!(_context.t0.code === 'ERR_NO_MATCH')) {\n              _context.next = 15;\n              break;\n            }\n\n            throw new Error(\"Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.\");\n\n          case 15:\n            throw _context.t0;\n\n          case 16:\n            _context.next = 19;\n            break;\n\n          case 18:\n            results = removeMapsCocoaPods(contents);\n\n          case 19:\n            if (!(results.didMerge || results.didClear)) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return _regeneratorRuntime.awrap(_fsExtra().default.writeFile(filePath, results.contents));\n\n          case 22:\n            return _context.abrupt(\"return\", config);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[7, 11]], Promise);\n  }]);\n};\n\nvar withGoogleMapsAppDelegate = function withGoogleMapsAppDelegate(config, _ref3) {\n  var apiKey = _ref3.apiKey;\n  return (0, _iosPlugins().withAppDelegate)(config, function (config) {\n    if (config.modResults.language === 'objc') {\n      if (apiKey && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(config.modResults.contents, apiKey).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\"Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.\");\n          }\n\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(config.modResults.contents).contents;\n      }\n    } else {\n      throw new Error('Cannot setup Google Maps because the AppDelegate is not Objective C');\n    }\n\n    return config;\n  });\n};","map":{"version":3,"sources":["../../src/ios/Maps.ts"],"names":["MATCH_INIT","withGoogleMapsKey","withMaps","config","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","infoPlist","GMSApiKey","newSrc","tag","src","anchor","offset","comment","filePath","path","contents","fs","googleMapsPath","isReactNativeMapsInstalled","googleMapsPodPath","results","addMapsCocoaPods","error","removeMapsCocoaPods","addGoogleMapsAppDelegateImport","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateImport","removeGoogleMapsAppDelegateInit"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\nimport { resolvePackageRootFolder } from '../utils/resolvePackageRootFolder';\n\n// Match against `UMModuleRegistryAdapter` (unimodules), and React Native without unimodules (Expo Modules).\nexport const MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = config => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src\n * @param useGoogleMaps\n * @param googleMapsPath '../node_modules/react-native-maps'\n * @returns\n */\nexport function addMapsCocoaPods(src: string, googleMapsPath: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: '${googleMapsPath}'`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  return resolvePackageRootFolder(projectRoot, 'react-native-maps');\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      if (googleMapsPath && useGoogleMaps) {\n        // Make the pod path relative to the ios folder.\n        const googleMapsPodPath = path.relative(\n          config.modRequest.platformProjectRoot,\n          googleMapsPath\n        );\n        try {\n          results = addMapsCocoaPods(contents, googleMapsPodPath);\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, config => {\n    if (config.modResults.language === 'objc') {\n      if (apiKey && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error('Cannot setup Google Maps because the AppDelegate is not Objective C');\n    }\n    return config;\n  });\n};\n"]},"metadata":{},"sourceType":"script"}