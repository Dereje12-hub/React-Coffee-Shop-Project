{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectColorsXMLPathAsync = getProjectColorsXMLPathAsync;\nexports.setColorItem = setColorItem;\nexports.removeColorItem = removeColorItem;\nexports.assignColorValue = assignColorValue;\nexports.getColorsAsObject = getColorsAsObject;\nexports.getObjectAsColorsXml = getObjectAsColorsXml;\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Resources() {\n  var data = require(\"./Resources\");\n\n  _Resources = function _Resources() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction getProjectColorsXMLPathAsync(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      kind = _ref.kind;\n\n  return (0, _Paths().getResourceXMLPathAsync)(projectRoot, {\n    kind: kind,\n    name: 'colors'\n  });\n}\n\nfunction setColorItem(itemToAdd, colorFileContentsJSON) {\n  var _colorFileContentsJSO;\n\n  if ((_colorFileContentsJSO = colorFileContentsJSON.resources) !== null && _colorFileContentsJSO !== void 0 && _colorFileContentsJSO.color) {\n    var colorNameExists = colorFileContentsJSON.resources.color.filter(function (e) {\n      return e.$.name === itemToAdd.$.name;\n    })[0];\n\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      colorFileContentsJSON.resources = {};\n    }\n\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n\n  return colorFileContentsJSON;\n}\n\nfunction removeColorItem(named, contents) {\n  var _contents$resources;\n\n  if ((_contents$resources = contents.resources) !== null && _contents$resources !== void 0 && _contents$resources.color) {\n    var index = contents.resources.color.findIndex(function (e) {\n      return e.$.name === named;\n    });\n\n    if (index > -1) {\n      contents.resources.color.splice(index, 1);\n    }\n  }\n\n  return contents;\n}\n\nfunction assignColorValue(xml, _ref2) {\n  var value = _ref2.value,\n      name = _ref2.name;\n\n  if (value) {\n    return setColorItem((0, _Resources().buildResourceItem)({\n      name: name,\n      value: value\n    }), xml);\n  }\n\n  return removeColorItem(name, xml);\n}\n\nfunction getColorsAsObject(xml) {\n  var _xml$resources;\n\n  if (!(xml !== null && xml !== void 0 && (_xml$resources = xml.resources) !== null && _xml$resources !== void 0 && _xml$resources.color)) {\n    return null;\n  }\n\n  return (0, _Resources().getResourceItemsAsObject)(xml.resources.color);\n}\n\nfunction getObjectAsColorsXml(obj) {\n  return {\n    resources: {\n      color: (0, _Resources().getObjectAsResourceItems)(obj)\n    }\n  };\n}","map":{"version":3,"sources":["../../src/android/Colors.ts"],"names":["kind","name","colorFileContentsJSON","colorNameExists","e","itemToAdd","contents","index","setColorItem","value","removeColorItem","xml","resources","color"],"mappings":"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","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport {\n  buildResourceItem,\n  getObjectAsResourceItems,\n  getResourceItemsAsObject,\n  ResourceItemXML,\n  ResourceKind,\n  ResourceXML,\n} from './Resources';\n\nexport function getProjectColorsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n) {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'colors' });\n}\n\nexport function setColorItem(itemToAdd: ResourceItemXML, colorFileContentsJSON: ResourceXML) {\n  if (colorFileContentsJSON.resources?.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: ResourceItemXML) => e.$.name === itemToAdd.$.name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\n\nexport function removeColorItem(named: string, contents: ResourceXML) {\n  if (contents.resources?.color) {\n    const index = contents.resources.color.findIndex((e: ResourceItemXML) => e.$.name === named);\n    if (index > -1) {\n      // replace the previous value\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\n\n/**\n * Set or remove value in XML based on nullish factor of the `value` property.\n */\nexport function assignColorValue(\n  xml: ResourceXML,\n  {\n    value,\n    name,\n  }: {\n    value?: string | null;\n    name: string;\n  }\n) {\n  if (value) {\n    return setColorItem(\n      buildResourceItem({\n        name,\n        value,\n      }),\n      xml\n    );\n  }\n\n  return removeColorItem(name, xml);\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n * `colors.xml` is a very basic XML file so this is pretty safe to do.\n * Added for testing purposes.\n *\n * @param xml\n * @returns\n */\nexport function getColorsAsObject(xml: ResourceXML): Record<string, string> | null {\n  if (!xml?.resources?.color) {\n    return null;\n  }\n\n  return getResourceItemsAsObject(xml.resources.color);\n}\n\n/**\n * Helper to convert a basic k/v object to a colors XML object.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsColorsXml(obj: Record<string, string>): ResourceXML {\n  return {\n    resources: {\n      color: getObjectAsResourceItems(obj),\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}