{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleSignInReservedClientId = getGoogleSignInReservedClientId;\nexports.getGoogleServicesFile = getGoogleServicesFile;\nexports.setGoogleSignInReservedClientId = setGoogleSignInReservedClientId;\nexports.setGoogleConfig = setGoogleConfig;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.withGoogleServicesFile = exports.withGoogle = void 0;\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Scheme() {\n  var data = require(\"./Scheme\");\n\n  _Scheme = function _Scheme() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withGoogle = (0, _iosPlugins().createInfoPlistPlugin)(setGoogleConfig, 'withGoogle');\nexports.withGoogle = withGoogle;\n\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults\n    });\n    return config;\n  });\n};\n\nexports.withGoogleServicesFile = withGoogleServicesFile;\n\nfunction getGoogleSignInReservedClientId(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config, _config$ios$config$go2;\n\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : (_config$ios$config$go2 = _config$ios$config.googleSignIn) === null || _config$ios$config$go2 === void 0 ? void 0 : _config$ios$config$go2.reservedClientId) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\n\nfunction getGoogleServicesFile(config) {\n  var _config$ios$googleSer, _config$ios2;\n\n  return (_config$ios$googleSer = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.googleServicesFile) !== null && _config$ios$googleSer !== void 0 ? _config$ios$googleSer : null;\n}\n\nfunction setGoogleSignInReservedClientId(config, infoPlist) {\n  var reservedClientId = getGoogleSignInReservedClientId(config);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return (0, _Scheme().appendScheme)(reservedClientId, infoPlist);\n}\n\nfunction setGoogleConfig(config, infoPlist) {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist);\n  return infoPlist;\n}\n\nfunction setGoogleServicesFile(config, _ref) {\n  var projectRoot = _ref.projectRoot,\n      project = _ref.project;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  var googleServiceFilePath = _path().default.resolve(projectRoot, googleServicesFileRelativePath);\n\n  _fsExtra().default.copyFileSync(googleServiceFilePath, _path().default.join((0, _Paths().getSourceRoot)(projectRoot), 'GoogleService-Info.plist'));\n\n  var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n  var plistFilePath = projectName + \"/GoogleService-Info.plist\";\n\n  if (!project.hasFile(plistFilePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: true,\n      verbose: true\n    });\n  }\n\n  return project;\n}","map":{"version":3,"sources":["../../src/ios/Google.ts"],"names":["withGoogle","withGoogleServicesFile","config","setGoogleServicesFile","projectRoot","project","modResults","reservedClientId","getGoogleSignInReservedClientId","infoPlist","setGoogleSignInReservedClientId","googleServicesFileRelativePath","getGoogleServicesFile","googleServiceFilePath","path","fs","projectName","plistFilePath","filepath","groupName","isBuildFile","verbose"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPlugin, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle = createInfoPlistPlugin(setGoogleConfig, 'withGoogle');\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getGoogleSignInReservedClientId(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"]},"metadata":{},"sourceType":"script"}