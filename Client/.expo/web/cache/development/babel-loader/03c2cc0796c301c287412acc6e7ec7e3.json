{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRequiresFullScreen = getRequiresFullScreen;\nexports.setRequiresFullScreen = setRequiresFullScreen;\nexports.withRequiresFullScreen = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _versions() {\n  var data = require(\"../utils/versions\");\n\n  _versions = function _versions() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n\n  _warnings = function _warnings() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withRequiresFullScreen = (0, _iosPlugins().createInfoPlistPlugin)(setRequiresFullScreen, 'withRequiresFullScreen');\nexports.withRequiresFullScreen = withRequiresFullScreen;\n\nfunction getRequiresFullScreen(config) {\n  var _config$ios;\n\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    if ((0, _versions().gteSdkVersion)(config, '43.0.0')) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nvar iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\nvar requiredIPadInterface = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown', 'UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\n\nfunction isStringArray(value) {\n  return Array.isArray(value) && value.every(function (value) {\n    return typeof value === 'string';\n  });\n}\n\nfunction hasMinimumOrientations(masks) {\n  return requiredIPadInterface.every(function (mask) {\n    return masks.includes(mask);\n  });\n}\n\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations) {\n  if (isStringArray(interfaceOrientations) && interfaceOrientations.length && !hasMinimumOrientations(interfaceOrientations)) {\n    var existingList = interfaceOrientations.join(', ');\n    (0, _warnings().addWarningIOS)('ios.requireFullScreen', \"iPad multitasking requires all `\" + iPadInterfaceKey + \"` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: \" + existingList);\n    return interfaceOrientations;\n  }\n\n  return [];\n}\n\nfunction setRequiresFullScreen(config, infoPlist) {\n  var requiresFullScreen = getRequiresFullScreen(config);\n\n  if (!requiresFullScreen) {\n    var existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n    infoPlist[iPadInterfaceKey] = _toConsumableArray(new Set(existing.concat(requiredIPadInterface)));\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    UIRequiresFullScreen: requiresFullScreen\n  });\n}","map":{"version":3,"sources":["../../src/ios/RequiresFullScreen.ts"],"names":["withRequiresFullScreen","config","iPadInterfaceKey","requiredIPadInterface","Array","value","mask","masks","isStringArray","interfaceOrientations","hasMinimumOrientations","existingList","requiresFullScreen","getRequiresFullScreen","existing","resolveExistingIpadInterfaceOrientations","infoPlist","UIRequiresFullScreen"],"mappings":";;;;;;;;;;;;;;;;;AAEA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AACA,SAAA,SAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,qBAAA;;AAAA,EAAA,SAAA,GAAA,qBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,IAAMA,sBAAsB,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,qBAAA,EAA/B,wBAA+B,CAA/B;;;AAOA,SAAA,qBAAA,CAAA,MAAA,EAA+E;AAAA,MAAA,WAAA;;AAGpF,MAAA,CAAA,WAAA,GAAIC,MAAM,CAAV,GAAA,MAAA,IAAA,IAAA,WAAA,KAAA,KAAA,CAAA,IAAIA,WAAAA,CAAAA,cAAAA,CAAJ,mBAAIA,CAAJ,EAAqD;AACnD,WAAO,CAAC,CAACA,MAAM,CAANA,GAAAA,CAAT,iBAAA;AADF,GAAA,MAEO;AAEL,QACE,CAAA,GAAA,SAAA,GAAA,aAAA,EAAA,MAAA,EADF,QACE,CADF,EAIE;AACA,aAAA,KAAA;AACD;;AACD,WAAA,IAAA;AACD;AACF;;AAED,IAAMC,gBAAgB,GAAtB,uCAAA;AAEA,IAAMC,qBAAqB,GAAG,CAAA,gCAAA,EAAA,0CAAA,EAAA,qCAAA,EAA9B,sCAA8B,CAA9B;;AAOA,SAAA,aAAA,CAAA,KAAA,EAAsD;AACpD,SAAOC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,KAAwBC,KAAK,CAALA,KAAAA,CAAYA,UAAAA,KAAK;AAAA,WAAI,OAAA,KAAA,KAApD,QAAgD;AAAA,GAAjBA,CAA/B;AACD;;AAED,SAAA,sBAAA,CAAA,KAAA,EAA0D;AACxD,SAAOF,qBAAqB,CAArBA,KAAAA,CAA4BG,UAAAA,IAAI;AAAA,WAAIC,KAAK,CAALA,QAAAA,CAA3C,IAA2CA,CAAJ;AAAA,GAAhCJ,CAAP;AACD;;AAWD,SAAA,wCAAA,CAAA,qBAAA,EAAwF;AACtF,MAEEK,aAAa,CAAbA,qBAAa,CAAbA,IAEAC,qBAAqB,CAFrBD,MAAAA,IAIA,CAACE,sBAAsB,CANzB,qBAMyB,CANzB,EAOE;AACA,QAAMC,YAAY,GAAGF,qBAAqB,CAArBA,IAAAA,CAArB,IAAqBA,CAArB;AACA,KAAA,GAAA,SAAA,GAAA,aAAA,EAAA,uBAAA,uCAEsCP,gBAFtC,4MAAA,YAAA;AAIA,WAAA,qBAAA;AACD;;AACD,SAAA,EAAA;AAGF;;AACO,SAAA,qBAAA,CAAA,MAAA,EAAA,SAAA,EAGM;AACX,MAAMU,kBAAkB,GAAGC,qBAAqB,CAAhD,MAAgD,CAAhD;;AACA,MAAI,CAAJ,kBAAA,EAAyB;AACvB,QAAMC,QAAQ,GAAGC,wCAAwC,CAACC,SAAS,CAD5C,gBAC4C,CAAV,CAAzD;AAOAA,IAAAA,SAAS,CAATA,gBAAS,CAATA,sBAAkC,IAAA,GAAA,CAAQF,QAAQ,CAARA,MAAAA,CAA1CE,qBAA0CF,CAAR,CAAlCE;AACD;;AAED,yCAAO,SAAP;AAEEC,IAAAA,oBAAoB,EAAEL;AAFxB;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { gteSdkVersion } from '../utils/versions';\nimport { addWarningIOS } from '../utils/warnings';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withRequiresFullScreen = createInfoPlistPlugin(\n  setRequiresFullScreen,\n  'withRequiresFullScreen'\n);\n\n// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexport function getRequiresFullScreen(config: Pick<ExpoConfig, 'ios' | 'sdkVersion'>) {\n  // Yes, the property is called ios.requireFullScreen, without the s - not \"requires\"\n  // This is confusing indeed because the actual property name does have the s\n  if (config.ios?.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    // In SDK 43, the `requireFullScreen` default has been changed to false.\n    if (\n      gteSdkVersion(config, '43.0.0')\n      // TODO: Uncomment after SDK 43 is released.\n      // || !config.sdkVersion\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n\nconst iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\n\nconst requiredIPadInterface = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && value.every(value => typeof value === 'string');\n}\n\nfunction hasMinimumOrientations(masks: string[]): boolean {\n  return requiredIPadInterface.every(mask => masks.includes(mask));\n}\n\n/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations: any): string[] {\n  if (\n    // Ensure type.\n    isStringArray(interfaceOrientations) &&\n    // Don't warn if it's an empty array, this is invalid regardless.\n    interfaceOrientations.length &&\n    // Check if the minimum requirements are met.\n    !hasMinimumOrientations(interfaceOrientations)\n  ) {\n    const existingList = interfaceOrientations!.join(', ');\n    addWarningIOS(\n      'ios.requireFullScreen',\n      `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`\n    );\n    return interfaceOrientations;\n  }\n  return [];\n}\n\n// Whether requires full screen on iPad\nexport function setRequiresFullScreen(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    const existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n\n    // There currently exists no mechanism to safely undo this feature besides `expo prebuild --clear`,\n    // this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n    // wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n\n    // Merge any previous interfaces with the required interfaces.\n    infoPlist[iPadInterfaceKey] = [...new Set(existing.concat(requiredIPadInterface))];\n  }\n\n  return {\n    ...infoPlist,\n    UIRequiresFullScreen: requiresFullScreen,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}