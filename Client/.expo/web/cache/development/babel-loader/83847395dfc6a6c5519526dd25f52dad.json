{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOrientation = getOrientation;\nexports.setOrientation = setOrientation;\nexports.LANDSCAPE_ORIENTATIONS = exports.PORTRAIT_ORIENTATIONS = exports.withOrientation = void 0;\n\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withOrientation = (0, _iosPlugins().createInfoPlistPlugin)(setOrientation, 'withOrientation');\nexports.withOrientation = withOrientation;\n\nfunction getOrientation(config) {\n  var _config$orientation;\n\n  return (_config$orientation = config.orientation) !== null && _config$orientation !== void 0 ? _config$orientation : null;\n}\n\nvar PORTRAIT_ORIENTATIONS = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown'];\nexports.PORTRAIT_ORIENTATIONS = PORTRAIT_ORIENTATIONS;\nvar LANDSCAPE_ORIENTATIONS = ['UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\nexports.LANDSCAPE_ORIENTATIONS = LANDSCAPE_ORIENTATIONS;\n\nfunction getUISupportedInterfaceOrientations(orientation) {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [].concat(PORTRAIT_ORIENTATIONS, LANDSCAPE_ORIENTATIONS);\n  }\n}\n\nfunction setOrientation(config, infoPlist) {\n  var orientation = getOrientation(config);\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation)\n  });\n}","map":{"version":3,"sources":["../../src/ios/Orientation.ts"],"names":["withOrientation","config","PORTRAIT_ORIENTATIONS","LANDSCAPE_ORIENTATIONS","orientation","getOrientation","UISupportedInterfaceOrientations","getUISupportedInterfaceOrientations"],"mappings":";;;;;;;;;;;;;;;AAEA,SAAA,WAAA,GAAA;AAAA,MAAA,IAAA,GAAA,OAAA,0BAAA;;AAAA,EAAA,WAAA,GAAA,uBAAA;AAAA,WAAA,IAAA;AAAA,GAAA;;AAAA,SAAA,IAAA;AAAA;;AAGO,IAAMA,eAAe,GAAG,CAAA,GAAA,WAAA,GAAA,qBAAA,EAAA,cAAA,EAAxB,iBAAwB,CAAxB;;;AAEA,SAAA,cAAA,CAAA,MAAA,EAAiE;AAAA,MAAA,mBAAA;;AACtE,SAAA,CAAA,mBAAA,GAAOC,MAAM,CAAb,WAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,mBAAA,GAAA,IAAA;AACD;;AAEM,IAAMC,qBAA6C,GAAG,CAAA,gCAAA,EAAtD,0CAAsD,CAAtD;;AAKA,IAAMC,sBAA8C,GAAG,CAAA,qCAAA,EAAvD,sCAAuD,CAAvD;;;AAKP,SAAA,mCAAA,CAAA,WAAA,EAAiG;AAC/F,MAAIC,WAAW,KAAf,UAAA,EAAgC;AAC9B,WAAA,qBAAA;AADF,GAAA,MAEO,IAAIA,WAAW,KAAf,WAAA,EAAiC;AACtC,WAAA,sBAAA;AADK,GAAA,MAEA;AACL,qBAAO,qBAAP,EAAA,sBAAA;AACD;AACF;;AAEM,SAAA,cAAA,CAAA,MAAA,EAAA,SAAA,EAGM;AACX,MAAMA,WAAW,GAAGC,cAAc,CAAlC,MAAkC,CAAlC;AAEA,yCAAO,SAAP;AAEEC,IAAAA,gCAAgC,EAAEC,mCAAmC,CAAA,WAAA;AAFvE;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceOrientation } from './IosConfig.types';\n\nexport const withOrientation = createInfoPlistPlugin(setOrientation, 'withOrientation');\n\nexport function getOrientation(config: Pick<ExpoConfig, 'orientation'>) {\n  return config.orientation ?? null;\n}\n\nexport const PORTRAIT_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n];\n\nexport const LANDSCAPE_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction getUISupportedInterfaceOrientations(orientation: string | null): InterfaceOrientation[] {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [...PORTRAIT_ORIENTATIONS, ...LANDSCAPE_ORIENTATIONS];\n  }\n}\n\nexport function setOrientation(\n  config: Pick<ExpoConfig, 'orientation'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const orientation = getOrientation(config);\n\n  return {\n    ...infoPlist,\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation),\n  };\n}\n"]},"metadata":{},"sourceType":"script"}