{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIntentFilters = getIntentFilters;\nexports.setAndroidIntentFilters = setAndroidIntentFilters;\nexports.default = renderIntentFilters;\nexports.withAndroidIntentFilters = void 0;\n\nfunction _xml2js() {\n  var data = require(\"xml2js\");\n\n  _xml2js = function _xml2js() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n\n  _Manifest = function _Manifest() {\n    return data;\n  };\n\n  return data;\n}\n\nvar withAndroidIntentFilters = (0, _androidPlugins().createAndroidManifestPlugin)(setAndroidIntentFilters, 'withAndroidIntentFilters');\nexports.withAndroidIntentFilters = withAndroidIntentFilters;\n\nfunction getIntentFilters(config) {\n  var _config$android$inten, _config$android;\n\n  return (_config$android$inten = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.intentFilters) !== null && _config$android$inten !== void 0 ? _config$android$inten : [];\n}\n\nfunction setAndroidIntentFilters(config, androidManifest) {\n  var _mainActivity$intent, intentFilters, intentFiltersXML, parser, intentFiltersJSON, mainActivity;\n\n  return _regeneratorRuntime.async(function setAndroidIntentFilters$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          intentFilters = getIntentFilters(config);\n\n          if (intentFilters.length) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", androidManifest);\n\n        case 3:\n          intentFiltersXML = renderIntentFilters(intentFilters).join('');\n          parser = new (_xml2js().Parser)();\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(parser.parseStringPromise(intentFiltersXML));\n\n        case 7:\n          intentFiltersJSON = _context.sent;\n          mainActivity = (0, _Manifest().getMainActivityOrThrow)(androidManifest);\n          mainActivity['intent-filter'] = (_mainActivity$intent = mainActivity['intent-filter']) === null || _mainActivity$intent === void 0 ? void 0 : _mainActivity$intent.concat(intentFiltersJSON['intent-filter']);\n          return _context.abrupt(\"return\", androidManifest);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction renderIntentFilters(intentFilters) {\n  return intentFilters.map(function (intentFilter) {\n    var autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n    return \"<intent-filter\" + autoVerify + \">\\n      \" + renderIntentFilterData(intentFilter.data) + \"\\n      <action android:name=\\\"android.intent.action.\" + intentFilter.action + \"\\\"/>\\n      \" + renderIntentFilterCategory(intentFilter.category) + \"\\n    </intent-filter>\";\n  });\n}\n\nfunction renderIntentFilterDatumEntries() {\n  var datum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var entries = [];\n\n  for (var _i = 0, _Object$entries = Object.entries(datum); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n    entries.push(\"android:\" + key + \"=\\\"\" + value + \"\\\"\");\n  }\n\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(data) {\n  return (Array.isArray(data) ? data : [data]).filter(Boolean).map(function (datum) {\n    return \"<data \" + renderIntentFilterDatumEntries(datum) + \"/>\";\n  }).join('\\n');\n}\n\nfunction renderIntentFilterCategory(category) {\n  return (Array.isArray(category) ? category : [category]).filter(Boolean).map(function (cat) {\n    return \"<category android:name=\\\"android.intent.category.\" + cat + \"\\\"/>\";\n  }).join('\\n');\n}","map":{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":["withAndroidIntentFilters","config","intentFilters","getIntentFilters","intentFiltersXML","renderIntentFilters","parser","Parser","intentFiltersJSON","mainActivity","intentFilter","autoVerify","renderIntentFilterData","action","renderIntentFilterCategory","datum","entries","Object","key","Array","renderIntentFilterDatumEntries","cat"],"mappings":"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","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\nimport { Parser } from 'xml2js';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n// TODO: make it so intent filters aren't written again if you run the command again\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport async function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): Promise<AndroidManifest> {\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  const intentFiltersXML = renderIntentFilters(intentFilters).join('');\n  const parser = new Parser();\n  const intentFiltersJSON = await parser.parseStringPromise(intentFiltersXML);\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    intentFiltersJSON['intent-filter']\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(intentFilters: AndroidIntentFilters): string[] {\n  // returns an array of <intent-filter> tags:\n  // [\n  //   `<intent-filter>\n  //     <data android:scheme=\"exp\"/>\n  //     <data android:scheme=\"exps\"/>\n  //\n  //     <action android:name=\"android.intent.action.VIEW\"/>\n  //\n  //     <category android:name=\"android.intent.category.DEFAULT\"/>\n  //     <category android:name=\"android.intent.category.BROWSABLE\"/>\n  //   </intent-filter>`,\n  //   ...\n  // ]\n  return intentFilters.map(intentFilter => {\n    const autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n\n    return `<intent-filter${autoVerify}>\n      ${renderIntentFilterData(intentFilter.data)}\n      <action android:name=\"android.intent.action.${intentFilter.action}\"/>\n      ${renderIntentFilterCategory(intentFilter.category)}\n    </intent-filter>`;\n  });\n}\n\nfunction renderIntentFilterDatumEntries(datum: AndroidIntentFiltersData = {}): string {\n  const entries: string[] = [];\n  for (const [key, value] of Object.entries(datum)) {\n    entries.push(`android:${key}=\"${value}\"`);\n  }\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(\n  data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]\n): string {\n  return (Array.isArray(data) ? data : [data])\n    .filter(Boolean)\n    .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)\n    .join('\\n');\n}\n\nfunction renderIntentFilterCategory(category?: string | string[]): string {\n  return (Array.isArray(category) ? category : [category])\n    .filter(Boolean)\n    .map(cat => `<category android:name=\"android.intent.category.${cat}\"/>`)\n    .join('\\n');\n}\n"]},"metadata":{},"sourceType":"script"}