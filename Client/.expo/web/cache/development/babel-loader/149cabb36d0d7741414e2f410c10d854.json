{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBundleIdentifier = getBundleIdentifier;\nexports.setBundleIdentifier = setBundleIdentifier;\nexports.getBundleIdentifierFromPbxproj = getBundleIdentifierFromPbxproj;\nexports.updateBundleIdentifierForPbxproj = updateBundleIdentifierForPbxproj;\nexports.setBundleIdentifierForPbxproj = setBundleIdentifierForPbxproj;\nexports.resetAllPlistBundleIdentifiers = resetAllPlistBundleIdentifiers;\nexports.resetPlistBundleIdentifier = resetPlistBundleIdentifier;\nexports.withBundleIdentifier = void 0;\n\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n\n  _plist = function _plist() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n\n  _assert = function _assert() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n\n  _xcode = function _xcode() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Paths() {\n  var data = require(\"./Paths\");\n\n  _Paths = function _Paths() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Target() {\n  var data = require(\"./Target\");\n\n  _Target = function _Target() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar withBundleIdentifier = function withBundleIdentifier(config, _ref) {\n  var bundleIdentifier = _ref.bundleIdentifier;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function _callee(config) {\n    var _config$ios, bundleId;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bundleId = bundleIdentifier !== null && bundleIdentifier !== void 0 ? bundleIdentifier : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bundleIdentifier;\n            (0, _assert().default)(bundleId, '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId));\n\n          case 4:\n            return _context.abrupt(\"return\", config);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }]);\n};\n\nexports.withBundleIdentifier = withBundleIdentifier;\n\nfunction getBundleIdentifier(config) {\n  var _config$ios$bundleIde, _config$ios2;\n\n  return (_config$ios$bundleIde = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.bundleIdentifier) !== null && _config$ios$bundleIde !== void 0 ? _config$ios$bundleIde : null;\n}\n\nfunction setBundleIdentifier(config, infoPlist) {\n  var bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleIdentifier: bundleIdentifier\n  });\n}\n\nfunction getBundleIdentifierFromPbxproj(projectRoot) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      targetName = _ref2.targetName,\n      _ref2$buildConfigurat = _ref2.buildConfiguration,\n      buildConfiguration = _ref2$buildConfigurat === void 0 ? 'Release' : _ref2$buildConfigurat;\n\n  var pbxprojPath;\n\n  try {\n    pbxprojPath = (0, _Paths().getPBXProjectPath)(projectRoot);\n  } catch (_unused) {\n    return null;\n  }\n\n  var project = _xcode().default.project(pbxprojPath);\n\n  project.parseSync();\n  var xcBuildConfiguration = (0, _Target().getXCBuildConfigurationFromPbxproj)(project, {\n    targetName: targetName,\n    buildConfiguration: buildConfiguration\n  });\n\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration) {\n  var bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n\n  if (bundleIdentifierRaw) {\n    var bundleIdentifier = bundleIdentifierRaw[0] === '\"' ? bundleIdentifierRaw.slice(1, -1) : bundleIdentifierRaw;\n    var bundleIdentifierParts = bundleIdentifier.split('.');\n\n    if (bundleIdentifierParts[bundleIdentifierParts.length - 1] === '$(PRODUCT_NAME:rfc1034identifier)' && xcBuildConfiguration.buildSettings.PRODUCT_NAME) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\nfunction updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var project = _xcode().default.project(pbxprojPath);\n\n  project.parseSync();\n\n  var _ref3 = (0, _Target().findFirstNativeTarget)(project),\n      _ref4 = _slicedToArray(_ref3, 2),\n      nativeTarget = _ref4[1];\n\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        item = _ref6[1];\n\n    if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n      return;\n    }\n\n    item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = \"\\\"\" + bundleIdentifier + \"\\\"\";\n\n    if (updateProductName) {\n      var productName = bundleIdentifier.split('.').pop();\n\n      if (!(productName !== null && productName !== void 0 && productName.includes('$'))) {\n        item.buildSettings.PRODUCT_NAME = productName;\n      }\n    }\n  });\n\n  _fsExtra().default.writeFileSync(pbxprojPath, project.writeSync());\n}\n\nfunction setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var pbxprojPaths = [];\n\n  try {\n    pbxprojPaths = (0, _Paths().getAllPBXProjectPaths)(projectRoot);\n  } catch (_unused2) {}\n\n  for (var _iterator = _createForOfIteratorHelperLoose(pbxprojPaths), _step; !(_step = _iterator()).done;) {\n    var pbxprojPath = _step.value;\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\nvar defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot) {\n  var infoPlistPaths = (0, _Paths().getAllInfoPlistPaths)(projectRoot);\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(infoPlistPaths), _step2; !(_step2 = _iterator2()).done;) {\n    var plistPath = _step2.value;\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath) {\n  var rawPlist = _fsExtra().default.readFileSync(plistPath, 'utf8');\n\n  var plistObject = _plist().default.parse(rawPlist);\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n    var format = {\n      pretty: true,\n      indent: \"\\t\"\n    };\n\n    var xml = _plist().default.build(_objectSpread(_objectSpread({}, plistObject), {}, {\n      CFBundleIdentifier: defaultBundleId\n    }), format);\n\n    if (xml !== rawPlist) {\n      _fsExtra().default.writeFileSync(plistPath, xml);\n    }\n  }\n}","map":{"version":3,"sources":["../../src/ios/BundleIdentifier.ts"],"names":["withBundleIdentifier","bundleIdentifier","bundleId","config","setBundleIdentifierForPbxproj","getBundleIdentifier","CFBundleIdentifier","buildConfiguration","pbxprojPath","project","xcode","xcBuildConfiguration","targetName","getProductBundleIdentifierFromBuildConfiguration","bundleIdentifierRaw","bundleIdentifierParts","updateProductName","nativeTarget","item","productName","fs","pbxprojPaths","updateBundleIdentifierForPbxproj","defaultBundleId","infoPlistPaths","resetPlistBundleIdentifier","rawPlist","plistObject","plist","format","pretty","indent","xml"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs-extra';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport { ConfigurationSectionEntry, getBuildConfigurationsForListId } from './utils/Xcodeproj';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier =\n      bundleIdentifierRaw[0] === '\"' ? bundleIdentifierRaw.slice(1, -1) : bundleIdentifierRaw;\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[\n        bundleIdentifierParts.length - 1\n      ] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"]},"metadata":{},"sourceType":"script"}