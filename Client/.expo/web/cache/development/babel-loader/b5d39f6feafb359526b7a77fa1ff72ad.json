{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getMode(_ref) {\n  var production = _ref.production,\n      development = _ref.development,\n      mode = _ref.mode;\n\n  if (mode === undefined) {\n    if (process.env.NODE_ENV != null && isValidMode(process.env.NODE_ENV)) {\n      return process.env.NODE_ENV.toLowerCase();\n    }\n  } else if (isValidMode(mode)) {\n    return mode.toLowerCase();\n  }\n\n  if (production) {\n    return 'production';\n  } else if (development) {\n    return 'development';\n  }\n\n  return 'development';\n}\n\nexports.default = getMode;\n\nfunction isValidMode(inputMode) {\n  var mode = inputMode || '';\n\n  if (typeof inputMode === 'string') {\n    mode = inputMode.toLowerCase();\n  }\n\n  return !!mode && ['none', 'production', 'development'].includes(mode);\n}","map":{"version":3,"sources":["../../src/env/getMode.ts"],"names":[],"mappings":";;;;;;AAQA,SAAwB,OAAxB,OAQC;AAAA,MAPC,UAOD,QAPC,UAOD;AAAA,MANC,WAMD,QANC,WAMD;AAAA,MALC,IAKD,QALC,IAKD;;AACC,MAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,IAAwB,IAAxB,IAAgC,WAAW,CAAC,OAAO,CAAC,GAAR,CAAY,QAAb,CAA/C,EAAuE;AACrE,aAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAqB,WAArB,EAAP;AACD;AACF,GAJD,MAIO,IAAI,WAAW,CAAC,IAAD,CAAf,EAAuB;AAC5B,WAAO,IAAI,CAAC,WAAL,EAAP;AACD;;AACD,MAAI,UAAJ,EAAgB;AACd,WAAO,YAAP;AACD,GAFD,MAEO,IAAI,WAAJ,EAAiB;AACtB,WAAO,aAAP;AACD;;AACD,SAAO,aAAP;AACD;;AAtBD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAwBA,SAAS,WAAT,CAAqB,SAArB,EAAuC;AACrC,MAAI,IAAI,GAAG,SAAS,IAAI,EAAxB;;AACA,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACjC,IAAA,IAAI,GAAG,SAAS,CAAC,WAAV,EAAP;AACD;;AACD,SAAO,CAAC,CAAC,IAAF,IAAU,CAAC,MAAD,EAAS,YAAT,EAAuB,aAAvB,EAAsC,QAAtC,CAA+C,IAA/C,CAAjB;AACD","sourcesContent":["import { Mode } from '../types';\n\n/**\n * Resolve the `mode` in a way that accounts for legacy treatment and environment variables.\n *\n * mode -> production -> development -> process.env.NODE_ENV -> 'development'\n * @category env\n */\nexport default function getMode({\n  production,\n  development,\n  mode,\n}: {\n  production?: boolean;\n  development?: boolean;\n  mode?: string;\n}): Mode {\n  if (mode === undefined) {\n    if (process.env.NODE_ENV != null && isValidMode(process.env.NODE_ENV)) {\n      return process.env.NODE_ENV.toLowerCase() as Mode;\n    }\n  } else if (isValidMode(mode)) {\n    return mode.toLowerCase() as Mode;\n  }\n  if (production) {\n    return 'production';\n  } else if (development) {\n    return 'development';\n  }\n  return 'development';\n}\n\nfunction isValidMode(inputMode?: string): boolean {\n  let mode = inputMode || '';\n  if (typeof inputMode === 'string') {\n    mode = inputMode.toLowerCase();\n  }\n  return !!mode && ['none', 'production', 'development'].includes(mode);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}