{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar expo_pwa_1 = require(\"expo-pwa\");\n\nfunction getConfig(env) {\n  if (env.config) {\n    return env.config;\n  }\n\n  return expo_pwa_1.getConfigForPWA(env.projectRoot);\n}\n\nexports.default = getConfig;","map":{"version":3,"sources":["../../src/env/getConfig.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAUA,SAAS,SAAT,CAAmB,GAAnB,EAAmE;AACjE,MAAI,GAAG,CAAC,MAAR,EAAgB;AACd,WAAO,GAAG,CAAC,MAAX;AACD;;AAED,SAAO,UAAA,CAAA,eAAA,CAAgB,GAAG,CAAC,WAApB,CAAP;AACD;;AAED,OAAA,CAAA,OAAA,GAAe,SAAf","sourcesContent":["import { getConfigForPWA, PWAConfig } from 'expo-pwa';\n\nimport { Environment } from '../types';\n\n/**\n * Get the Expo project config in a way that's optimized for web.\n *\n * @param env Environment properties used for getting the Expo project config.\n * @category env\n */\nfunction getConfig(env: Pick<Environment, 'projectRoot' | 'config'>): PWAConfig {\n  if (env.config) {\n    return env.config;\n  }\n  // Fill all config values with PWA defaults\n  return getConfigForPWA(env.projectRoot);\n}\n\nexport default getConfig;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}